id,text,code,question
0,Minimum sum possible by removing all occurrences of any array element | C ++ program for the above approach ; Function to find minimum sum after deletion ; Stores frequency of array elements ; Traverse the array ; Calculate sum ; Update frequency of the current element ; Stores the minimum sum required ; Traverse map ; Find the minimum sum obtained ; Return minimum sum ; Driver code ; Input array ; Size of array,"#include <bits/stdc++.h>
using namespace std;
int minSum(int A[], int N) {
  map<int, int> mp;
  int sum = 0;
  for (int i = 0; i < N; i++) {
    sum += A[i];
    mp[A[i]]++;
  }
  int minSum = INT_MAX;
  for (auto it : mp) {
    minSum = min(minSum, sum - (it.first * it.second));
  }
  return minSum;
}
int main() {
  int arr[] = {4, 5, 6, 6};
  int N = sizeof(arr) / sizeof(arr[0]);
  cout << minSum(arr, N) << ""\n"";
}",Minimum sum possible by removing all occurrences of any array element.
1,Maximum difference between a pair of adjacent elements by excluding every element once | C ++ program for the above approach ; Function to calculate maximum difference between adjacent elements excluding every array element once ; Traverse the array ; Stores the maximum diff ; Check for maximum adjacent element ; Exclude current element ; Update maximum difference ; Update previous value ; Append the result into a vector ; Print the result ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
void maxAdjacent(int *arr, int N) {
  vector<int> res;
  for (int i = 1; i < N - 1; i++) {
    int prev = arr[0];
    int maxi = INT_MIN;
    for (int j = 1; j < N; j++) {
      if (i == j)
        continue;
      maxi = max(maxi, abs(arr[j] - prev));
      prev = arr[j];
    }
    res.push_back(maxi);
  }
  for (auto x : res)
    cout << x << "" "";
  cout << endl;
}
int main() {
  int arr[] = {1, 3, 4, 7, 8};
  int N = sizeof(arr) / sizeof(arr[0]);
  maxAdjacent(arr, N);
}",Maximum difference between a pair of adjacent elements by excluding every element once.
2,"Count 1 s present in a range of indices [ L , R ] in a given array | C ++ Program to implement the above approach ; Function to find the size of the array if the array initially contains a single element ; Base case ; P / 2 -> findSize ( N / 2 ) P % 2 -> 1 P / 2 -> findSize ( N / 2 ) ; Function to return the count of 1 s in the range [ L , R ] ; Base Case ; PART 1 -> N / 2 [ 1 , Siz_M ] ; Update the right end point of the range to min ( Siz_M , R ) ; PART 2 -> N % 2 [ SizM + 1 , Siz_M + 1 ] ; PART 3 -> N / 2 [ SizM + 2 , 2 * Siz_M - 1 ] Same as PART 1 Property of Symmetricity Shift the coordinates according to PART 1 Subtract ( Siz_M + 1 ) from both L , R ; Driver Code ; Input ; Counts the number of 1 's in  the range [L, R]","#include <bits/stdc++.h>
using namespace std;
int findSize(int N) {
  if (N == 0)
    return 1;
  if (N == 1)
    return 1;
  int Size = 2 * findSize(N / 2) + 1;
  return Size;
}
int CountOnes(int N, int L, int R) {
  if (L > R) {
    return 0;
  }
  if (N <= 1) {
    return N;
  }
  int ret = 0;
  int M = N / 2;
  int Siz_M = findSize(M);
  if (L <= Siz_M) {
    ret += CountOnes(N / 2, L, min(Siz_M, R));
  }
  if (L <= Siz_M + 1 && Siz_M + 1 <= R) {
    ret += N % 2;
  }
  if (Siz_M + 1 < R) {
    ret += CountOnes(N / 2, max(1, L - Siz_M - 1), R - Siz_M - 1);
  }
  return ret;
}
int main() {
  int N = 7, L = 2, R = 5;
  cout << CountOnes(N, L, R) << endl;
  return 0;
}","Count 1 s present in a range of indices [ L , R ] in a given array."
3,"Find the pair ( a , b ) with minimum LCM such that their sum is equal to N | C ++ program for the above approach ; Function to check if number is prime or not ; As 1 is neither prime nor composite return false ; Check if it is divided by any number then it is not prime , return false ; Check if n is not divided by any number then it is prime and hence return true ; Function to find the pair ( a , b ) such that sum is N & LCM is minimum ; Check if the number is prime ; Now , if it is not prime then find the least divisior ; Check if divides n then it is a factor ; Required output is a = n / i & b = n / i * ( n - 1 ) ; Driver Code ; Function call","#include <bits/stdc++.h>
using namespace std;
bool prime(int n) {
  if (n == 1)
    return false;
  for (int i = 2; i * i <= n; i++) {
    if (n % i == 0)
      return false;
  }
  return true;
}
void minDivisior(int n) {
  if (prime(n)) {
    cout << 1 << "" "" << n - 1;
  } else {
    for (int i = 2; i * i <= n; i++) {
      if (n % i == 0) {
        cout << n / i << "" "" << n / i * (i - 1);
        break;
      }
    }
  }
}
int main() {
  int N = 4;
  minDivisior(N);
  return 0;
}","Find the pair ( a , b ) with minimum LCM such that their sum is equal to N."
4,"Find Landau 's function for a given number N | C ++ program for the above approach ; To store Landau 's function of the number ; Function to return gcd of 2 numbers ; Function to return LCM of two numbers ; Function to find max lcm value among all representations of n ; Calculate Landau 's value ; Recursive function to find different ways in which n can be written as sum of atleast one positive integers ; Check if sum becomes n , consider this representation ; Start from previous element in the representation till n ; Include current element from representation ; Call function again with reduced sum ; Backtrack - remove current element from representation ; Function to find the Landau 's function ; Using recurrence find different ways in which n can be written as a sum of atleast one + ve integers ; Print the result ; Driver Code ; Given N ; Function Call","#include <bits/stdc++.h>
using namespace std;
int Landau = INT_MIN;
int gcd(int a, int b) {
  if (a == 0)
    return b;
  return gcd(b % a, a);
}
int lcm(int a, int b) { return (a * b) / gcd(a, b); }
void findLCM(vector<int> &arr) {
  int nth_lcm = arr[0];
  for (int i = 1; i < arr.size(); i++)
    nth_lcm = lcm(nth_lcm, arr[i]);
  Landau = max(Landau, nth_lcm);
}
void findWays(vector<int> &arr, int i, int n) {
  if (n == 0)
    findLCM(arr);
  for (int j = i; j <= n; j++) {
    arr.push_back(j);
    findWays(arr, j, n - j);
    arr.pop_back();
  }
}
void Landau_function(int n) {
  vector<int> arr;
  findWays(arr, 1, n);
  cout << Landau;
}
int main() {
  int N = 4;
  Landau_function(N);
  return 0;
}",Find Landau 's function for a given number N.
5,Check if the remainder of N | C ++ implementation to check the following expression for an integer N is valid or not ; Function to check if a number holds the condition ( N - 1 ) ! % N = N - 1 ; Corner cases ; Number divisible by 2 or 3 are not prime ; Iterate from 5 and keep checking for prime ; Function to check the expression for the value N ; Driver Program,"#include <bits/stdc++.h>
using namespace std;
bool isPrime(int n) {
  if (n == 1)
    return true;
  if (n <= 3)
    return true;
  if (n % 2 == 0 n % 3 == 0)
    return false;
  for (int i = 5; i * i <= n; i = i + 6)
    if (n % i == 0 || n % (i + 2) == 0)
      return false;
  return true;
}
void checkExpression(int n) {
  if (isPrime(n))
    cout << ""Yes"";
  else
    cout << ""No"";
}
int main() {
  int N = 3;
  checkExpression(N);
  return 0;
}",Check if the remainder of N.
6,Check if it is possible to split given Array into K odd | C ++ implementation to check if it is possible to split array into K subsets with odd sum ; Function to check if array can be split in required K subsets ; Store count of odd numbers ; Check if element is odd ; Check if split is possible ; Driver Program,"#include <bits/stdc++.h>
using namespace std;
bool checkArray(int n, int k, int arr[]) {
  int cnt = 0;
  for (int i = 0; i < n; i++) {
    if (arr[i] & 1)
      cnt += 1;
  }
  if (cnt >= k && cnt % 2 == k % 2)
    return true;
  else
    return false;
}
int main() {
  int arr[] = {1, 3, 4, 7, 5, 3, 1};
  int n = sizeof(arr) / sizeof(arr[0]);
  int k = 4;
  if (checkArray(n, k, arr))
    cout << ""Yes"";
  else
    cout << ""No"";
  return 0;
}",Check if it is possible to split given Array into K odd.
7,"Sum of division of the possible pairs for the given Array | C ++ implementation to compute the sum of division of all the possible pairs for the given array ; Function to compute the sum ; counting frequency of each term and finding maximum among it ; Making cumulative frequency ; Taking the ceil value ; nos . in [ ( n - 0.5 ) X , ( n + 0.5 ) X ) range will add n to the ans ; Return the final result ; Driver code","#include <bits/stdc++.h>
#definelllonglong
using namespace std;
int func(int arr[], int n) {
  double ans = 0;
  int maxx = 0;
  double freq[100005] = {0};
  int temp;
  for (int i = 0; i < n; i++) {
    temp = arr[i];
    freq[temp]++;
    maxx = max(maxx, temp);
  }
  for (int i = 1; i <= maxx; i++) {
    freq[i] += freq[i - 1];
  }
  for (int i = 1; i <= maxx; i++) {
    if (freq[i]) {
      i = (double)i;
      double j;
      ll value = 0;
      double cur = ceil(0.5 * i) - 1.0;
      for (j = 1.5;; j++) {
        int val = min(maxx, (int)(ceil(i * j) - 1.0));
        int times = (freq[i] - freq[i - 1]), con = j - 0.5;
        ans += times * con * (freq[(int)val] - freq[(int)cur]);
        cur = val;
        if (val == maxx)
          break;
      }
    }
  }
  return (ll)ans;
}
int main() {
  int arr[] = {1, 2, 3};
  int n = sizeof(arr) / sizeof(arr[0]);
  cout << func(arr, n) << endl;
  return 0;
}",Sum of division of the possible pairs for the given Array.
8,Count of elements to be inserted to make Array sum twice the XOR of Array | C ++ program to find the count of elements to be inserted to make Array sum twice the XOR of Array ; Function to find the minimum number of elements that need to be inserted such that the sum of the elements of the array is twice the XOR of the array ; Variable to store the Xor of all the elements ; Variable to store the sum of all elements ; Loop to find the Xor and the sum of the array ; If sum = 2 * Xor ; No need to insert more elements ; We insert one more element which is Sum ; We insert two more elements Sum + Xor and Xor . ; Print the number of elements inserted in the array ; Print the elements that are inserted in the array ; Driver code,"#include <bits/stdc++.h>
using namespace std;
void insert_element(int a[], int n) {
  int Xor = 0;
  int Sum = 0;
  for (int i = 0; i < n; i++) {
    Xor ^= a[i];
    Sum += a[i];
  }
  if (Sum == 2 * Xor) {
    cout << ""0"" << endl;
    return;
  }
  if (Xor == 0) {
    cout << ""1"" << endl;
    cout << Sum << endl;
    return;
  }
  int num1 = Sum + Xor;
  int num2 = Xor;
  cout << ""2"";
  cout << num1 << "" "" << num2 << endl;
}
int main() {
  int a[] = {1, 2, 3};
  int n = sizeof(a) / sizeof(a[0]);
  insert_element(a, n);
}",Count of elements to be inserted to make Array sum twice the XOR of Array.
9,Check if roots of a Quadratic Equation are reciprocal of each other or not | C ++ program to check if roots of a Quadratic Equation are reciprocal of each other or not ; Function to check if the roots of a quadratic equation are reciprocal of each other or not ; Driver code,"#include <iostream>
using namespace std;
void checkSolution(int a, int b, int c) {
  if (a == c)
    cout << ""Yes"";
  else
    cout << ""No"";
}
int main() {
  int a = 2, b = 0, c = 2;
  checkSolution(a, b, c);
  return 0;
}",Check if roots of a Quadratic Equation are reciprocal of each other or not.
10,Sunny Number | C ++ program for the above approach ; Function check whether x is a perfect square or not ; Find floating point value of square root of x . ; If square root is an integer ; Function to check Sunny Number ; Check if ( N + 1 ) is a perfect square or not ; If ( N + 1 ) is not a perfect square ; Driver Code ; Given Number ; Function call,"#include ""bits/stdc++.h""
using namespace std;
bool isPerfectSquare(long double x) {
  long double sr = sqrt(x);
  return ((sr - floor(sr)) == 0);
}
void checkSunnyNumber(int N) {
  if (isPerfectSquare(N + 1)) {
    cout << ""Yes\n"";
  } else {
    cout << ""No\n"";
  }
}
int main() {
  int N = 8;
  checkSunnyNumber(N);
  return 0;
}",Sunny Number.
11,Count the numbers which can convert N to 1 using given operation | C ++ program to count the numbers which can convert N to 1 using the given operation ; Function to count the numbers which can convert N to 1 using the given operation ; Iterate through all the integers ; Check if N can be converted to 1 ; Incrementing the count if it can be converted ; Driver code,"#include <bits/stdc++.h>
using namespace std;
int countValues(int n) {
  int answer = 0;
  for (int i = 2; i <= n; i++) {
    int k = n;
    while (k >= i) {
      if (k % i == 0)
        k /= i;
      else
        k -= i;
    }
    if (k == 1)
      answer++;
  }
  return answer;
}
int main() {
  int N = 6;
  cout << countValues(N);
  return 0;
}",Count the numbers which can convert N to 1 using given operation.
12,"Find K numbers with sum equal to N and sum of their squares maximized | C ++ program to find K numbers with sum equal to N and the sum of their squares maximized ; Function that prints the required K numbers ; Print 1 , K - 1 times ; Print ( N - K + 1 ) ; Driver Code","#include <bits/stdc++.h>
using namespace std;
void printKNumbers(int N, int K) {
  for (int i = 0; i < K - 1; i++)
    cout << 1 << "" "";
  cout << (N - K + 1);
}
int main() {
  int N = 10, K = 3;
  printKNumbers(N, K);
  return 0;
}",Find K numbers with sum equal to N and sum of their squares maximized.
13,"Print Nth Stepping or Autobiographical number | C ++ implementation to find NaTMth stepping natural Number ; Function to find the Nth stepping natural number ; Declare the queue ; Enqueue 1 , 2 , ... , 9 in this order ; Perform K operation on queue ; Get the ith Stepping number ; Perform Dequeue from the Queue ; If x mod 10 is not equal to 0 ; then Enqueue 10 x + ( x mod 10 ) - 1 ; Enqueue 10 x + ( x mod 10 ) ; If x mod 10 is not equal to 9 ; then Enqueue 10 x + ( x mod 10 ) + 1 ; Return the dequeued number of the K - th operation as the Nth stepping number ; Driver Code ; initialise K","#include <bits/stdc++.h>
using namespace std;
int NthSmallest(int K) {
  queue<int> Q;
  int x;
  for (int i = 1; i < 10; i++)
    Q.push(i);
  for (int i = 1; i <= K; i++) {
    x = Q.front();
    Q.pop();
    if (x % 10 != 0) {
      Q.push(x * 10 + x % 10 - 1);
    }
    Q.push(x * 10 + x % 10);
    if (x % 10 != 9) {
      Q.push(x * 10 + x % 10 + 1);
    }
  }
  return x;
}
int main() {
  int N = 16;
  cout << NthSmallest(N) << ""\n"";
  return 0;
}",Print Nth Stepping or Autobiographical number.
14,Least number to be added to or subtracted from N to make it a Perfect Square | C ++ implementation of the approach ; Function to return the Least number ; Get the perfect square before and after N ; Check which is nearest to N ; return the result ; Driver code,"#include <bits/stdc++.h>
using namespace std;
int nearest(int n) {
  int prevSquare = sqrt(n);
  int nextSquare = prevSquare + 1;
  prevSquare = prevSquare * prevSquare;
  nextSquare = nextSquare * nextSquare;
  int ans =
      (n - prevSquare) < (nextSquare - n) ? (prevSquare - n) : (nextSquare - n);
  return ans;
}
int main() {
  int n = 14;
  cout << nearest(n) << endl;
  n = 16;
  cout << nearest(n) << endl;
  n = 18;
  cout << nearest(n) << endl;
  return 0;
}",Least number to be added to or subtracted from N to make it a Perfect Square.
15,Value of Pi ( Î ) up to 50 decimal places | C ++ program to calculate the value of pi up to n decimal places ; Function that prints the value of pi upto N decimal places ; Find value of pi upto using acos ( ) function ; Print value of pi upto N decimal places ; Driver Code ; Function that prints the value of pi,"#include ""bits/stdc++.h""
using namespace std;
void printValueOfPi(int N) {
  double pi = 2 * acos(0.0);
  printf(""%.*lf\n"", N, pi);
}
int main() {
  int N = 45;
  printValueOfPi(N);
  return 0;
}",Value of Pi ( Î ) up to 50 decimal places.
16,Invert the Kth most significant bit of N | C ++ implementation of the approach ; Function to convert decimal number n to its binary representation stored as an array arr [ ] ; Function to convert the number represented as a binary array arr [ ] into its decimal equivalent ; Function to return the updated integer after flipping the kth bit ; Number of bits in n ; Find the binary representation of n ; The number of bits in n are less than k ; Flip the kth bit ; Return the decimal equivalent of the number ; Driver code,"#include <bits/stdc++.h>
using namespace std;
void decBinary(int arr[], int n) {
  int k = log2(n);
  while (n > 0) {
    arr[k--] = n % 2;
    n /= 2;
  }
}
int binaryDec(int arr[], int n) {
  int ans = 0;
  for (int i = 0; i < n; i++)
    ans += arr[i] << (n - i - 1);
  return ans;
}
int getNum(int n, int k) {
  int l = log2(n) + 1;
  int a[l] = {0};
  decBinary(a, n);
  if (k > l)
    return n;
  a[k - 1] = (a[k - 1] == 0) ? 1 : 0;
  return binaryDec(a, l);
}
int main() {
  int n = 56, k = 2;
  cout << getNum(n, k);
  return 0;
}",Invert the Kth most significant bit of N.
17,Queries for the product of first N factorials | C ++ implementation of the approach ; Declare result array globally ; Function to precompute the product of factorials upto MAX ; Initialize base condition if n = 0 then factorial of 0 is equal to 1 and answer for n = 0 is 1 ; Iterate loop from 1 to MAX ; factorial ( i ) = factorial ( i - 1 ) * i ; Result for current n is equal to result [ i - 1 ] multiplied by the factorial of i ; Function to perform the queries ; Precomputing the result till MAX ; Perform queries ; Driver code,"#include <bits/stdc++.h>
using namespace std;
#definelllonglong
#defineMAX1000000
    const ll MOD = 1e9 + 7;
ll result[MAX + 1];
ll fact[MAX + 1];
void preCompute() {
  fact[0] = 1;
  result[0] = 1;
  for (int i = 1; i <= MAX; i++) {
    fact[i] = ((fact[i - 1] % MOD) * i) % MOD;
    result[i] = ((result[i - 1] % MOD) * (fact[i] % MOD)) % MOD;
  }
}
void performQueries(int q[], int n) {
  preCompute();
  for (int i = 0; i < n; i++)
    cout << result[q[i]] << ""\n"";
}
int main() {
  int q[] = {4, 5};
  int n = sizeof(q) / sizeof(q[0]);
  performQueries(q, n);
  return 0;
}",Queries for the product of first N factorials.
18,"Nth number in a set of multiples of A , B or C | C ++ program to find nth term divisible by a , b or c ; Function to return gcd of a and b ; Function to return the count of integers from the range [ 1 , num ] which are divisible by either a , b or c ; Calculate the number of terms divisible by a , b and c then remove the terms which are divisible by both ( a , b ) or ( b , c ) or ( c , a ) and then add the numbers which are divisible by a , b and c ; Function for binary search to find the nth term divisible by a , b or c ; Set low to 1 and high to LONG_MAX ; If the current term is less than n then we need to increase low to mid + 1 ; If current term is greater than equal to n then high = mid ; Driver code","#include <bits/stdc++.h>
using namespace std;
int gcd(int a, int b) {
  if (a == 0)
    return b;
  return gcd(b % a, a);
}
long divTermCount(long a, long b, long c, long num) {
  return (
      (num / a) + (num / b) + (num / c) - (num / ((a * b) / gcd(a, b))) -
      (num / ((c * b) / gcd(c, b))) - (num / ((a * c) / gcd(a, c))) +
      (num / ((((a * b) / gcd(a, b)) * c) / gcd(((a * b) / gcd(a, b)), c))));
}
int findNthTerm(int a, int b, int c, long n) {
  long low = 1, high = LONG_MAX, mid;
  while (low < high) {
    mid = low + (high - low) / 2;
    if (divTermCount(a, b, c, mid) < n)
      low = mid + 1;
    else
      high = mid;
  }
  return low;
}
int main() {
  long a = 2, b = 3, c = 5, n = 100;
  cout << findNthTerm(a, b, c, n);
  return 0;
}","Nth number in a set of multiples of A , B or C."
19,"Angle between 3 given vertices in a n | C ++ implementation of the approach ; Function that checks whether given angle can be created using any 3 sides ; Initialize x and y ; Calculate the number of vertices between i and j , j and k ; Calculate the angle subtended at the circumference ; Angle subtended at j can be found using the fact that the sum of angles of a triangle is equal to 180 degrees ; Driver code","#include <bits/stdc++.h>
using namespace std;
double calculate_angle(int n, int i, int j, int k) {
  int x, y;
  if (i < j)
    x = j - i;
  else
    x = j + n - i;
  if (j < k)
    y = k - j;
  else
    y = k + n - j;
  double ang1 = (180 * x) / n;
  double ang2 = (180 * y) / n;
  double ans = 180 - ang1 - ang2;
  return ans;
}
int main() {
  int n = 5;
  int a1 = 1;
  int a2 = 2;
  int a3 = 5;
  cout << calculate_angle(n, a1, a2, a3);
  return 0;
}",Angle between 3 given vertices in a n.
20,Loss when two items are sold at same price and same percentage profit / loss | C ++ implementation of above approach . ; Function that will find loss ; Driver Code ; Calling Function,"#include <bits/stdc++.h>
using namespace std;
void Loss(int SP, int P) {
  float loss = 0;
  loss = (2 * P * P * SP) / float(100 * 100 - P * P);
  cout << ""Loss = "" << loss;
}
int main() {
  int SP = 2400, P = 30;
  Loss(SP, P);
  return 0;
}",Loss when two items are sold at same price and same percentage profit / loss.
21,Check for an array element that is co | C ++ implementation of the approach ; Stores smallest prime factor for every number ; Hash to store prime factors count ; Function to calculate SPF ( Smallest Prime Factor ) for every number till MAXN ; Marking smallest prime factor for every number to be itself ; Separately marking spf for every even number as 2 ; Checking if i is prime ; Marking SPF for all numbers divisible by i ; Marking spf [ j ] if it is not previously marked ; Function to store the prime factors after dividing by the smallest prime factor at every step ; Storing the count of prime factors in hash ; Function that returns true if there are no common prime factors between x and other numbers of the array ; Checking whether it common prime factor with other numbers ; Function that returns true if there is an element in the array which is coprime with all the other elements of the array ; Using sieve for generating prime factors ; Checking the common prime factors with other numbers ; Driver code,"#include <bits/stdc++.h>
using namespace std;
#defineMAXN1000001 int spf[MAXN];
int hash1[MAXN] = {0};
void sieve() {
  spf[1] = 1;
  for (int i = 2; i < MAXN; i++)
    spf[i] = i;
  for (int i = 4; i < MAXN; i += 2)
    spf[i] = 2;
  for (int i = 3; i * i < MAXN; i++) {
    if (spf[i] == i) {
      for (int j = i * i; j < MAXN; j += i)
        if (spf[j] == j)
          spf[j] = i;
    }
  }
}
void getFactorization(int x) {
  int temp;
  while (x != 1) {
    temp = spf[x];
    if (x % temp == 0) {
      hash1[spf[x]]++;
      x = x / spf[x];
    }
    while (x % temp == 0)
      x = x / temp;
  }
}
bool check(int x) {
  int temp;
  while (x != 1) {
    temp = spf[x];
    if (x % temp == 0 && hash1[temp] > 1)
      return false;
    while (x % temp == 0)
      x = x / temp;
  }
  return true;
}
bool hasValidNum(int arr[], int n) {
  sieve();
  for (int i = 0; i < n; i++)
    getFactorization(arr[i]);
  for (int i = 0; i < n; i++)
    if (check(arr[i]))
      return true;
  return false;
}
int main() {
  int arr[] = {2, 8, 4, 10, 6, 7};
  int n = sizeof(arr) / sizeof(arr[0]);
  if (hasValidNum(arr, n))
    cout << ""Yes"";
  else
    cout << ""No"";
  return 0;
}",Check for an array element that is co.
22,Ways to Remove Edges from a Complete Graph to make Odd Edges | C ++ implementation of the approach ; Function to return the number of ways to remove edges from the graph so that odd number of edges are left in the graph ; Total number of edges ; Driver code,"#include <bits/stdc++.h>
using namespace std;
int countWays(int N) {
  int E = (N * (N - 1)) / 2;
  if (N == 1)
    return 0;
  return pow(2, E - 1);
}
int main() {
  int N = 4;
  cout << countWays(N);
  return 0;
}",Ways to Remove Edges from a Complete Graph to make Odd Edges.
23,Calculate nCr using Pascal 's Triangle | C ++ implementation of the approach ; Initialize the matrix with 0 ; 0 C0 = 1 ; Set every nCr = 1 where r = 0 ; Value for the current cell of Pascal 's triangle ; Function to return the value of nCr ; Return nCr ; Driver code ; Build the Pascal 's triangle,"#include <bits/stdc++.h>
using namespace std;
int l[1001][1001] = {0};
void initialize() {
  l[0][0] = 1;
  for (int i = 1; i < 1001; i++) {
    l[i][0] = 1;
    for (int j = 1; j < i + 1; j++) {
      l[i][j] = (l[i - 1][j - 1] + l[i - 1][j]);
    }
  }
}
int nCr(int n, int r) { return l[n][r]; }
int main() {
  initialize();
  int n = 8;
  int r = 3;
  cout << nCr(n, r);
}",Calculate nCr using Pascal 's Triangle.
24,Closest sum partition ( into two subsets ) of numbers from 1 to n | C ++ implementation of the approach ; Function to return the minimum required absolute difference ; Driver code,"#include <bits/stdc++.h>
using namespace std;
int minAbsDiff(int n) {
  int mod = n % 4;
  if (mod == 0 mod == 3)
    return 0;
  return 1;
}
int main() {
  int n = 5;
  cout << minAbsDiff(n);
  return 0;
}",Closest sum partition ( into two subsets ) of numbers from 1 to n.
25,Check if the Xor of the frequency of all digits of a number N is zero or not | C ++ implementation of the above approach ; creating a frequency array ; Finding the last digit of the number ; Dividing the number by 10 to eliminate last digit ; counting frequency of each digit ; checking if the xor of all frequency is zero or not ; Driver function,"#include <bits/stdc++.h>
using namespace std;
bool check(int s) {
  int freq[10] = {0}, r;
  while (s != 0) {
    r = s % 10;
    s = int(s / 10);
    freq[r] += 1;
  }
  int xor__ = 0;
  for (int i = 0; i < 10; i++) {
    xor__ = xor__ ^ freq[i];
    if (xor__ == 0)
      return true;
    else
      return false;
  }
}
int main() {
  int s = 122233;
  if (check(s))
    cout << ""Yes"" << endl;
  else
    cout << ""No"" << endl;
}",Check if the Xor of the frequency of all digits of a number N is zero or not.
26,Print N lines of 4 numbers such that every pair among 4 numbers has a GCD K | C ++ implementation of the above approach ; Function to print N lines ; Iterate N times to print N lines ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
void printLines(int n, int k) {
  for (int i = 0; i < n; i++) {
    cout << k * (6 * i + 1) << "" "" << k * (6 * i + 2) << "" "" << k * (6 * i + 3)
         << "" "" << k * (6 * i + 5) << endl;
  }
}
int main() {
  int n = 2, k = 2;
  printLines(n, k);
  return 0;
}",Print N lines of 4 numbers such that every pair among 4 numbers has a GCD K.
27,"Sum of first n term of Series 3 , 5 , 9 , 17 , 33. ... | C ++ program to find sum of first n terms ; Sn = n * ( 4 * n * n + 6 * n - 1 ) / 3 ; Driver code ; number of terms to be included in sum ; find the Sn","#include <bits/stdc++.h>
using namespace std;
int calculateSum(int n) { return (pow(2, n + 1) + n - 2); }
int main() {
  int n = 4;
  cout << ""Sum = "" << calculateSum(n);
  return 0;
}","Sum of first n term of Series 3 , 5 , 9 , 17 , 33. ...."
28,Count the number of Special Strings of a given length N | C ++ Program to Count the number of Special Strings of a given length N ; Function to return count of special strings ; stores the answer for a particular value of n ; for n = 0 we have empty string ; for n = 1 we have 2 special strings ; calculate count of special string of length i ; fib [ n ] stores the count of special strings of length n ; Driver code ; initialise n,"#include <bits/stdc++.h>
using namespace std;
#definemod1000000007 long count_special(long n) {
  long fib[n + 1];
  fib[0] = 1;
  fib[1] = 2;
  for (int i = 2; i <= n; i++) {
    fib[i] = (fib[i - 1] % mod + fib[i - 2] % mod) % mod;
  }
  return fib[n];
}
int main() {
  long n = 3;
  cout << count_special(n) << endl;
  return 0;
}",Count the number of Special Strings of a given length N.
29,Counts Path in an Array | C ++ implementation of the above approach ; Find the number of ways to reach the end ; Base case ; Recursive structure ; Driver code,"#include <bits/stdc++.h>
using namespace std;
const int mod = 1e9 + 7;
int ways(int i, int arr[], int n) {
  if (i == n - 1)
    return 1;
  int sum = 0;
  for (int j = 1; j + i < n && j <= arr[i]; j++) {
    sum += (ways(i + j, arr, n)) % mod;
    sum %= mod;
  }
  return sum % mod;
}
int main() {
  int arr[] = {5, 3, 1, 4, 3};
  int n = sizeof(arr) / sizeof(arr[0]);
  cout << ways(0, arr, n) << endl;
  return 0;
}",Counts Path in an Array.
30,Counts Path in an Array | C ++ implementation ; find the number of ways to reach the end ; dp to store value ; base case ; Bottom up dp structure ; F [ i ] is dependent of F [ i + 1 ] to F [ i + k ] ; Return value of dp [ 0 ] ; Driver code,"#include <bits/stdc++.h>
using namespace std;
const int mod = 1e9 + 7;
int ways(int arr[], int n) {
  int dp[n + 1];
  dp[n - 1] = 1;
  for (int i = n - 2; i >= 0; i--) {
    dp[i] = 0;
    for (int j = 1; ((j + i) < n && j <= arr[i]); j++) {
      dp[i] += dp[i + j];
      dp[i] %= mod;
    }
  }
  return dp[0] % mod;
}
int main() {
  int arr[] = {5, 3, 1, 4, 3};
  int n = sizeof(arr) / sizeof(arr[0]);
  cout << ways(arr, n) % mod << endl;
  return 0;
}",Counts Path in an Array.
31,Number of Subsequences with Even and Odd Sum | C ++ implementation ; Returns the count of odd and even subsequences ; Variables to store the count of even subsequences and odd subsequences ; Initialising count_even and count_odd to 0 since as there is no subsequence before the iteration with even or odd count . ; Find sum of all subsequences with even count and odd count and storing them as we iterate . ; if the number is even ; if the number is odd ; Driver code ; Calling the function,"#include <bits/stdc++.h>
using namespace std;
pair<int, int> countSum(int arr[], int n) {
  int result = 0;
  int count_odd, count_even;
  count_odd = 0;
  count_even = 0;
  for (int i = 1; i <= n; i++) {
    if (arr[i - 1] % 2 == 0) {
      count_even = count_even + count_even + 1;
      count_odd = count_odd + count_odd;
    } else {
      int temp = count_even;
      count_even = count_even + count_odd;
      count_odd = count_odd + temp + 1;
    }
  }
  return {count_even, count_odd};
}
int main() {
  int arr[] = {1, 2, 2, 3};
  int n = sizeof(arr) / sizeof(arr[0]);
  pair<int, int> ans = countSum(arr, n);
  cout << ""EvenSum = "" << ans.first;
  cout << "" OddSum = "" << ans.second;
  return 0;
}",Number of Subsequences with Even and Odd Sum.
32,Count of integers of length N and value less than K such that they contain digits only from the given set | C ++ implementation of the approach ; Function to convert a number into vector ; Push all the digits of N from the end one by one to the vector ; If the original number was 0 ; Reverse the vector elements ; Return the required vector ; Function to return the count of B length integers which are less than C and they contain digits from set A [ ] only ; Convert number to digit array ; Case 1 : No such number possible as the generated numbers will always be greater than C ; Case 2 : All integers of length B are valid as they all are less than C ; contain 0 ; Case 3 ; Update the lower [ ] array such that lower [ i ] stores the count of elements in A [ ] which are less than i ; For first index we can 't use 0 ; Whether ( i - 1 ) digit of generated number can be equal to ( i - 1 ) digit of C ; Is digit [ i - 1 ] present in A ? ; Driver code,"#include <bits/stdc++.h>
using namespace std;
#defineMAX10 vector < int> numToVec(int N) {
  vector<int> digit;
  while (N != 0) {
    digit.push_back(N % 10);
    N = N / 10;
  }
  if (digit.size() == 0)
    digit.push_back(0);
  reverse(digit.begin(), digit.end());
  return digit;
}
int solve(vector<int> &A, int B, int C) {
  vector<int> digit;
  int d, d2;
  digit = numToVec(C);
  d = A.size();
  if (B > digit.size() d == 0)
    return 0;
  else if (B < digit.size()) {
    if (A[0] == 0 && B != 1)
      return (d - 1) * pow(d, B - 1);
    else
      return pow(d, B);
  } else {
    int dp[B + 1] = {0};
    int lower[MAX + 1] = {0};
    for (int i = 0; i < d; i++)
      lower[A[i] + 1] = 1;
    for (int i = 1; i <= MAX; i++)
      lower[i] = lower[i - 1] + lower[i];
    bool flag = true;
    dp[0] = 0;
    for (int i = 1; i <= B; i++) {
      d2 = lower[digit[i - 1]];
      dp[i] = dp[i - 1] * d;
      if (i == 1 && A[0] == 0 && B != 1)
        d2 = d2 - 1;
      if (flag)
        dp[i] += d2;
      flag = (flag & (lower[digit[i - 1] + 1] == lower[digit[i - 1]] + 1));
    }
    return dp[B];
  }
}
int main() {
  vector<int> A = {0, 1, 2, 5};
  int N = 2;
  int k = 21;
  cout << solve(A, N, k);
  return 0;
}",Count of integers of length N and value less than K such that they contain digits only from the given set.
33,"Number of Paths of Weight W in a K | C ++ program to count the number of paths with weight W in a K - ary tree ; Function to return the number of ways having weight as wt in K - ary tree ; Return 0 if weight becomes less than zero ; Return one only if the current path has included edge weight of atleast M ; If the current edge weight is greater than or equal to M , set used as true ; Driver Code to test above function","#include <bits/stdc++.h>
using namespace std;
int solve(int dp[][2], int wt, int K, int M, int used) {
  if (wt < 0)
    return 0;
  if (wt == 0) {
    if (used)
      return 1;
    return 0;
  }
  if (dp[wt][used] != -1)
    return dp[wt][used];
  int ans = 0;
  for (int i = 1; i <= K; i++) {
    if (i >= M)
      ans += solve(dp, wt - i, K, M, used 1);
    else
      ans += solve(dp, wt - i, K, M, used);
  }
  return dp[wt][used] = ans;
}
int main() {
  int W = 3, K = 3, M = 2;
  int dp[W + 1][2];
  memset(dp, -1, sizeof(dp));
  cout << solve(dp, W, K, M, 0) << endl;
  return 0;
}",Number of Paths of Weight W in a K.
34,Ways to write N as sum of two or more positive integers | Set | C ++ implementation of above approach ; Function to find the number of partitions of N ; Base case ; Driver code,"#include <bits/stdc++.h>
using namespace std;
long long partitions(int n) {
  vector<long long> p(n + 1, 0);
  p[0] = 1;
  for (int i = 1; i <= n; ++i) {
    int k = 1;
    while ((k * (3 * k - 1)) / 2 <= i) {
      p[i] += (k % 2 ? 1 : -1) * p[i - (k * (3 * k - 1)) / 2];
      if (k > 0)
        k *= -1;
      else
        k = 1 - k;
    }
  }
  return p[n];
}
int main() {
  int N = 20;
  cout << partitions(N);
  return 0;
}",Ways to write N as sum of two or more positive integers.
35,"Longest Increasing Path in Matrix | CPP program to find longest increasing path in a matrix . ; Return the length of LIP in 2D matrix ; If value not calculated yet . ; If reach bottom left cell , return 1. ; If reach the corner of the matrix . ; If value greater than below cell . ; If value greater than left cell . ; Wrapper function ; Driven Program","#include <bits/stdc++.h>
#defineMAX10
using namespace std;
int LIP(int dp[][MAX], int mat[][MAX], int n, int m, int x, int y) {
  if (dp[x][y] < 0) {
    int result = 0;
    if (x == n - 1 && y == m - 1)
      return dp[x][y] = 1;
    if (x == n - 1 y == m - 1)
      result = 1;
    if (mat[x][y] < mat[x + 1][y])
      result = 1 + LIP(dp, mat, n, m, x + 1, y);
    if (mat[x][y] < mat[x][y + 1])
      result = max(result, 1 + LIP(dp, mat, n, m, x, y + 1));
    dp[x][y] = result;
  }
  return dp[x][y];
}
int wrapper(int mat[][MAX], int n, int m) {
  int dp[MAX][MAX];
  memset(dp, -1, sizeof dp);
  return LIP(dp, mat, n, m, 0, 0);
}
int main() {
  int mat[][MAX] = {
      {1, 2, 3, 4},
      {2, 2, 3, 4},
      {3, 2, 3, 4},
      {4, 5, 6, 7},
  };
  int n = 4, m = 4;
  cout << wrapper(mat, n, m) << endl;
  return 0;
}",Longest Increasing Path in Matrix.
36,"Counts paths from a point to reach Origin | C ++ program to count total number of paths from a point to origin ; Recursive function to count number of paths ; If we reach bottom or top left , we are have only one way to reach ( 0 , 0 ) ; Else count sum of both ways ; Driver Code","#include <bits/stdc++.h>
using namespace std;
int countPaths(int n, int m) {
  if (n == 0 m == 0)
    return 1;
  return (countPaths(n - 1, m) + countPaths(n, m - 1));
}
int main() {
  int n = 3, m = 2;
  cout << "" Number of Paths "" << countPaths(n, m);
  return 0;
}",Counts paths from a point to reach Origin.
37,"Gold Mine Problem | C ++ program to solve Gold Mine problem ; Returns maximum amount of gold that can be collected when journey started from first column and moves allowed are right , right - up and right - down ; Create a table for storing intermediate results and initialize all cells to 0. The first row of goldMineTable gives the maximum gold that the miner can collect when starts that row ; Gold collected on going to the cell on the right ( -> ) ; Gold collected on going to the cell to right up ( / ) ; Gold collected on going to the cell to right down ( \ ) ; Max gold collected from taking either of the above 3 paths ; The max amount of gold collected will be the max value in first column of all rows ; Driver Code","#include <bits/stdc++.h>
using namespace std;
const int MAX = 100;
int getMaxGold(int gold[][MAX], int m, int n) {
  int goldTable[m][n];
  memset(goldTable, 0, sizeof(goldTable));
  for (int col = n - 1; col >= 0; col--) {
    for (int row = 0; row < m; row++) {
      int right = (col == n - 1) ? 0 : goldTable[row][col + 1];
      int right_up = (row == 0 col == n - 1) ? 0 : goldTable[row - 1][col + 1];
      int right_down =
          (row == m - 1 col == n - 1) ? 0 : goldTable[row + 1][col + 1];
      goldTable[row][col] =
          gold[row][col] + max(right, max(right_up, right_down));
    }
  }
  int res = goldTable[0][0];
  for (int i = 1; i < m; i++)
    res = max(res, goldTable[i][0]);
  return res;
}
int main() {
  int gold[MAX][MAX] = {{1, 3, 1, 5}, {2, 2, 4, 1}, {5, 0, 2, 3}, {0, 6, 1, 2}};
  int m = 4, n = 4;
  cout << getMaxGold(gold, m, n);
  return 0;
}",Gold Mine Problem.
38,"Find minimum adjustment cost of an array | C ++ program to find minimum adjustment cost of an array ; Function to find minimum adjustment cost of an array ; dp [ i ] [ j ] stores minimal adjustment cost on changing A [ i ] to j ; handle first element of array separately ; do for rest elements of the array ; replace A [ i ] to j and calculate minimal adjustment cost dp [ i ] [ j ] ; initialize minimal adjustment cost to INT_MAX ; consider all k such that k >= max ( j - target , 0 ) and k <= min ( M , j + target ) and take minimum ; return minimum value from last row of dp table ; Driver Program to test above functions","#include <bits/stdc++.h>
using namespace std;
#defineM100 int minAdjustmentCost(int A[], int n, int target) {
  int dp[n][M + 1];
  for (int j = 0; j <= M; j++)
    dp[0][j] = abs(j - A[0]);
  for (int i = 1; i < n; i++) {
    for (int j = 0; j <= M; j++) {
      dp[i][j] = INT_MAX;
      for (int k = max(j - target, 0); k <= min(M, j + target); k++)
        dp[i][j] = min(dp[i][j], dp[i - 1][k] + abs(A[i] - j));
    }
  }
  int res = INT_MAX;
  for (int j = 0; j <= M; j++)
    res = min(res, dp[n - 1][j]);
  return res;
}
int main() {
  int arr[] = {55, 77, 52, 61, 39, 6, 25, 60, 49, 47};
  int n = sizeof(arr) / sizeof(arr[0]);
  int target = 10;
  cout << ""Minimum adjustment cost is "" << minAdjustmentCost(arr, n, target)
       << endl;
  return 0;
}",Find minimum adjustment cost of an array.
39,"Count triplets from a given range having sum of two numbers of a triplet equal to the third number | C ++ program for the above approach ; Function to find the number of triplets from the range [ L , R ] having sum of two numbers from the triplet equal to the third number ; Stores the total number of triplets ; Find the difference of the range ; Case 1 : If triplets can 't  be formed, then return 0 ; Otherwise ; Update the total number of triplets ; Return the count ; Driver Code","#include <bits/stdc++.h>
using namespace std;
int totalCombination(int L, int R) {
  int count = 0;
  int K = R - L;
  if (K < L)
    return 0;
  int ans = K - L;
  count = ((ans + 1) * (ans + 2)) / 2;
  return count;
}
int main() {
  int L = 2, R = 6;
  cout << totalCombination(L, R);
  return 0;
}",Count triplets from a given range having sum of two numbers of a triplet equal to the third number.
40,"Construct two N | C ++ program for the above approach ; Function to generate two arrays satisfying the given conditions ; Declare the two arrays A and B ; Iterate from range [ 1 , 2 * n ] ; Assign consecutive numbers to same indices of the two arrays ; Print the first array ; Print the second array , B ; Driver Code ; Function Call","#include <bits/stdc++.h>
using namespace std;
void printArrays(int n) {
  vector<int> A, B;
  for (int i = 1; i <= 2 * n; i++) {
    if (i % 2 == 0)
      A.push_back(i);
    else
      B.push_back(i);
  }
  cout << ""{ "";
  for (int i = 0; i < n; i++) {
    cout << A[i];
    if (i != n - 1)
      cout << "", "";
  }
  cout << "" }\n"";
  cout << ""{ "";
  for (int i = 0; i < n; i++) {
    cout << B[i];
    if (i != n - 1)
      cout << "", "";
  }
  cout << "" }"";
}
int main() {
  int N = 5;
  printArrays(N);
  return 0;
}",Construct two N.
41,Numbers formed by flipping common set bits in two given integers | C ++ program to implement the above approach ; Function to flip bits of A and B which are set bits in A and B ; Iterater all possible bits of A and B ; If ith bit is set in both A and B ; Clear i - th bit of A ; Clear i - th bit of B ; Print A and B ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
void flipBitsOfAandB(int A, int B) {
  for (int i = 0; i < 32; i++) {
    if ((A & (1 << i)) && (B & (1 << i))) {
      A = A ^ (1 << i);
      B = B ^ (1 << i);
    }
  }
  cout << A << "" "" << B;
}
int main() {
  int A = 7, B = 4;
  flipBitsOfAandB(A, B);
  return 0;
}",Numbers formed by flipping common set bits in two given integers.
42,Count of distinct pair sum between two 1 to N value Arrays | C ++ implementation to find count of distinct pair sum between two 1 to N value Arrays ; Function to find the distinct sums ; Driver code,"#include <bits/stdc++.h>
using namespace std;
int findDistinctSums(int N) { return (2 * N - 1); }
int main() {
  int N = 3;
  cout << findDistinctSums(N);
  return 0;
}",Count of distinct pair sum between two 1 to N value Arrays.
43,"Count of substrings from given Ternary strings containing characters at least once | C ++ program for above approach ; Function to count the number of substrings consists of 0 , 1 , and 2 ; Initialize frequency array of size 3 ; Stores the resultant count ; Traversing string str ; Update frequency array ; If all the characters are present counting number of substrings possible ; Update number of substrings ; Return the number of substrings ; Driver Code","#include <iostream>
#include <string>
using namespace std;
int countSubstrings(string &str) {
  int freq[3] = {0};
  int count = 0;
  int i = 0;
  for (int j = 0; j < str.length(); j++) {
    freq[str[j] - '0']++;
    while (freq[0] > 0 && freq[1] > 0 && freq[2] > 0) {
      freq[str[i++] - '0']--;
    }
    count += i;
  }
  return count;
}
int main() {
  string str = ""00021"";
  int count = countSubstrings(str);
  cout << count;
  return 0;
}",Count of substrings from given Ternary strings containing characters at least once.
44,"Minimum flips to remove any consecutive 3 0 s or 1 s in given Binary string | C ++ program for the above approach ; Function to find the minimum number of flips to make all three pairs of consecutive characters different ; Stores resultant count of pairs ; Base Case ; Iterate over the range [ 0 , N - 2 ] ; If the consecutive 3 numbers are the same then increment the count and the counter ; Return the answer ; Driver Code","#include <bits/stdc++.h>
using namespace std;
int minFlips(string str) {
  int count = 0;
  if (str.size() <= 2) {
    return 0;
  }
  for (int i = 0; i < str.size() - 2;) {
    if (str[i] == str[i + 1] && str[i + 2] == str[i + 1]) {
      i = i + 3;
      count++;
    } else {
      i++;
    }
  }
  return count;
}
int main() {
  string S = ""0011101"";
  cout << minFlips(S);
  return 0;
}",Minimum flips to remove any consecutive 3 0 s or 1 s in given Binary string.
45,Encrypt the string | C ++ program for the above approach ; Function to convert Decimal to Hex ; Function to encrypt the string ; Iterate the characters of the string ; Iterate until S [ i ] is equal to ch ; Update count and i ; Decrement i by 1 ; Convert count to hexadecimal representation ; Append the character ; Append the characters frequency in hexadecimal representation ; Reverse the obtained answer ; Return required answer ; Driver Code ; Given Input ; Function Call,"#include <bits/stdc++.h>
using namespace std;
string convertToHex(int num) {
  string temp = """";
  while (num != 0) {
    int rem = num % 16;
    char c;
    if (rem < 10) {
      c = rem + 48;
    } else {
      c = rem + 87;
    }
    temp += c;
    num = num / 16;
  }
  return temp;
}
string encryptString(string S, int N) {
  string ans = """";
  for (int i = 0; i < N; i++) {
    char ch = S[i];
    int count = 0;
    string hex;
    while (i < N && S[i] == ch) {
      count++;
      i++;
    }
    i--;
    hex = convertToHex(count);
    ans += ch;
    ans += hex;
  }
  reverse(ans.begin(), ans.end());
  return ans;
}
int main() {
  string S = ""abc"";
  int N = S.size();
  cout << encryptString(S, N);
  return 0;
}",Encrypt the string.
46,"Count of Binary Strings of length N such that frequency of 1 ' s ▁ exceeds ▁ frequency ▁ of ▁ 0' s | C ++ Program to implement the above approach ; Function to calculate and return the value of Binomial Coefficient C ( n , k ) ; Since C ( n , k ) = C ( n , n - k ) ; Calculate the value of [ n * ( n - 1 ) * -- - * ( n - k + 1 ) ] / [ k * ( k - 1 ) * -- - * 1 ] ; Function to return the count of binary strings of length N such that frequency of 1 ' s ▁ exceed ▁ that ▁ of ▁ 0' s ; Count of N - length binary strings ; Count of N - length binary strings having equal count of 0 ' s ▁ and ▁ 1' s ; For even length strings ; Driver Code","#include <bits/stdc++.h>
using namespace std;
unsigned long int binomialCoeff(unsigned long int n, unsigned long int k) {
  unsigned long int res = 1;
  if (k > n - k)
    k = n - k;
  for (int i = 0; i < k; ++i) {
    res *= (n - i);
    res /= (i + 1);
  }
  return res;
}
unsigned long int countOfString(int N) {
  unsigned long int Stotal = pow(2, N);
  unsigned long int Sequal = 0;
  if (N % 2 == 0)
    Sequal = binomialCoeff(N, N / 2);
  unsigned long int S1 = (Stotal - Sequal) / 2;
  return S1;
}
int main() {
  int N = 3;
  cout << countOfString(N);
  return 0;
}",Count of Binary Strings of length N such that frequency of 1 ' s ▁ exceeds ▁ frequency ▁ of ▁ 0' s.
47,Remove all occurrences of a character in a string | Recursive approach | C ++ program for the above approach ; Function to remove all occurrences of a character in the string ; Base Case ; Check the first character of the given string ; Pass the rest of the string to recursion Function call ; Add the first character of str and string from recursion ; Driver Code ; Given String ; Given character ; Function Call,"#include <bits/stdc++.h>
using namespace std;
string removeCharRecursive(string str, char X) {
  if (str.length() == 0) {
    return """";
  }
  if (str[0] == X) {
    return removeCharRecursive(str.substr(1), X);
  }
  return str[0] + removeCharRecursive(str.substr(1), X);
}
int main() {
  string str = ""geeksforgeeks"";
  char X = 'e';
  str = removeCharRecursive(str, X);
  cout << str;
  return 0;
}",Remove all occurrences of a character in a string.
48,"Maximum time such that absolute difference between hour and minute lies in given range | C ++ program for the above approach ; Function checks whether given time is correct ; To check minute value of time ; To check hour value of time ; Changes in value is not allowed at position where ' ? ' is not present ; Function checks whether the absolute difference between hour and minute value is within [ L , R ] ; Checks if the difference is outside the give range ; Displays time in proper 24 - hour format ; Function find the desired value of time whose difference lies in the range [ L , R ] ; Decrease hour value from 23 to 0 ; Check if the hour value is valid if not valid then no need to change minute value , since time will still remain in valid , to check hour value flag is set to 1. ; Decrease minute value from 59 to 0 ; Check if the minute value is valid , if not valid then skip the current iteration , to check ' minute ' value flag is set to 0. ; Driver code ; Input time ; Difference range","#include <bits/stdc++.h>
using namespace std;
bool isValid(char a1, char a2, string str, int flag) {
  char v1, v2;
  if (flag == 0) {
    v1 = str[4];
    v2 = str[3];
  } else {
    v1 = str[1];
    v2 = str[0];
  }
  if (v1 != a1 && v1 != '?')
    return false;
  if (v2 != a2 && v2 != '?')
    return false;
  return true;
}
bool inRange(int hh, int mm, int L, int R) {
  int a = abs(hh - mm);
  if (a<L a> R)
    return false;
  return true;
}
void displayTime(int hh, int mm) {
  if (hh > 10)
    cout << hh << "":"";
  else if (hh < 10)
    cout << ""0"" << hh << "":"";
  if (mm > 10)
    cout << mm << endl;
  else if (mm < 10)
    cout << ""0"" << mm << endl;
}
void maximumTimeWithDifferenceInRange(string str, int L, int R) {
  int i, j;
  int h1, h2, m1, m2;
  for (i = 23; i >= 0; i--) {
    h1 = i % 10;
    h2 = i / 10;
    if (!isValid(h1 + '0', h2 + '0', str, 1)) {
      continue;
    }
    for (j = 59; j >= 0; j--) {
      m1 = j % 10;
      m2 = j / 10;
      if (!isValid(m1 + '0', m2 + '0', str, 0)) {
        continue;
      }
      if (inRange(i, j, L, R)) {
        displayTime(i, j);
        return;
      }
    }
  }
  if (inRange(i, j, L, R))
    displayTime(i, j);
  else
    cout << ""-1"" << endl;
}
int main() {
  string timeValue = ""??:??"";
  int L = 20, R = 39;
  maximumTimeWithDifferenceInRange(timeValue, L, R);
  return 0;
}",Maximum time such that absolute difference between hour and minute lies in given range.
49,"Check if a string can be split into even length palindromic substrings | C ++ program for the above approach ; Function to check string str can be split a string into even length palindromic substrings ; Initialize a stack ; Iterate the string ; If the i - th character is same as that at the top of the stack then pop the top element ; Else push the current charactor into the stack ; If the stack is empty , then even palindromic substrings are possible ; Else not - possible ; Driver Code ; Given string ; Function Call","#include <bits/stdc++.h>
using namespace std;
bool check(string s, int n) {
  stack<char> st;
  for (int i = 0; i < n; i++) {
    if (!st.empty() && st.top() == s[i])
      st.pop();
    else
      st.push(s[i]);
  }
  if (st.empty()) {
    return true;
  } else {
    return false;
  }
}
int main() {
  string str = ""aanncddc"";
  int n = str.length();
  if (check(str, n)) {
    cout << ""Yes"" << endl;
  } else {
    cout << ""No"" << endl;
  }
  return 0;
}",Check if a string can be split into even length palindromic substrings.
50,Number of strings in two array satisfy the given conditions | C ++ program for the above approach ; To store the frequency of string after bitmasking ; To store result for each string in arr2 [ ] ; Traverse the arr1 [ ] and bitmask each string in it ; Bitmasking for each string s ; Update the frequency of string with it 's bitmasking value ; Traverse the arr2 [ ] ; Bitmasking for each string s ; Check if temp is present in an unordered_map or not ; Check for next set bit ; Push the count for current string in resultant array ; Print the count for each string ; Driver Code ; Function call,"#include <bits/stdc++.h>
using namespace std;
void findNumOfValidWords(vector<string> &w, vector<string> &p) {
  unordered_map<int, int> m;
  vector<int> res;
  for (string &s : w) {
    int val = 0;
    for (char c : s) {
      val = val | (1 << (c - 'a'));
    }
    m[val]++;
  }
  for (string &s : p) {
    int val = 0;
    for (char c : s) {
      val = val | (1 << (c - 'a'));
    }
    int temp = val;
    int first = s[0] - 'a';
    int count = 0;
    while (temp != 0) {
      if (((temp >> first) & 1) == 1) {
        if (m.find(temp) != m.end()) {
          count += m[temp];
        }
      }
      temp = (temp - 1) & val;
    }
    res.push_back(count);
  }
  for (auto &it : res) {
    cout << it <<'';
  }
}
int main() {
  vector<string> arr1;
  arr1 = {""aaaa"", ""asas"", ""able"", ""ability"", ""actt"", ""actor"", ""access""};
  vector<string> arr2;
  arr2 = {""aboveyz"", ""abrodyz"", ""absolute"", ""absoryz"", ""actresz"", ""gaswxyz""};
  findNumOfValidWords(arr1, arr2);
  return 0;
}",Number of strings in two array satisfy the given conditions.
51,Maximize the decimal equivalent by flipping only a contiguous set of 0 s | C ++ implementation to Maximize the value of the decimal equivalent given in the binary form ; Function to print the binary number ; Check if the current number is 0 ; Find the continuous 0 s ; Replace initially occurring 0 with 1 ; Break out of loop if 1 occurs ; Driver code,"#include <bits/stdc++.h>
using namespace std;
void flip(string &s) {
  for (int i = 0; i < s.length(); i++) {
    if (s[i] == '0') {
      while (s[i] == '0') {
        s[i] = '1';
        i++;
      }
      break;
    }
  }
}
int main() {
  string s = ""100010001"";
  flip(s);
  cout << s;
  return 0;
}",Maximize the decimal equivalent by flipping only a contiguous set of 0 s.
52,Sentence Case of a given Camel cased string | C ++ implementation of the approach ; Function to return the original string after converting it back from camelCase ; Print the first character as it is ; Traverse the rest of the characters one by one ; If current character is uppercase print space followed by the current character in lowercase ; Else print the current character ; Driver code,"#include <bits/stdc++.h>
using namespace std;
void getOrgString(string s) {
  cout << s[0];
  int i = 1;
  while (i < s.length()) {
    if (s[i] >= 'A' && s[i] <= 'Z')
      cout << "" "" << (char)tolower(s[i]);
    else
      cout << s[i];
    i++;
  }
}
int main() {
  string s = ""ILoveGeeksForGeeks"";
  getOrgString(s);
  return 0;
}",Sentence Case of a given Camel cased string.
53,Count occurrences of a character in a repeated string | CPP program to find the occurrences of character x in the infinite repeated string upto length n ; Function to count the character ' a ' ; atleast k repetition are required ; if n is not the multiple of the string size check for the remaining repeating character . ; Driver code,"#include <bits/stdc++.h>
using namespace std;
int countChar(string str, char x) {
  int count = 0, n = 10;
  for (int i = 0; i < str.size(); i++)
    if (str[i] == x)
      count++;
  int repetitions = n / str.size();
  count = count * repetitions;
  for (int i = 0; i < n % str.size(); i++) {
    if (str[i] == x)
      count++;
  }
  return count;
}
int main() {
  string str = ""abcac"";
  cout << countChar(str, 'a');
  return 0;
}",Count occurrences of a character in a repeated string.
54,Frequency Measuring Techniques for Competitive Programming | C ++ program to count frequencies of array items having small values . ; Create an array to store counts . The size of array is limit + 1 and all values are initially 0 ; Traverse through array elements and count frequencies ( assuming that elements are limited by limit ) ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
void countFreq(int arr[], int n, int limit) {
  vector<int> count(limit + 1, 0);
  for (int i = 0; i < n; i++)
    count[arr[i]]++;
  for (int i = 0; i <= limit; i++)
    if (count[i] > 0)
      cout << i << "" "" << count[i] << endl;
}
int main() {
  int arr[] = {5, 5, 6, 6, 5, 6, 1, 2, 3, 10, 10};
  int n = sizeof(arr) / sizeof(arr[0]);
  int limit = 10;
  countFreq(arr, n, limit);
  return 0;
}",Frequency Measuring Techniques for Competitive Programming.
55,Check if a string has m consecutive 1 ' s ▁ or ▁ 0' s | Program to check if the binary string contains m consecutive 1 ' s ▁ or ▁ 0' s ; Function that checks if the binary string contains m consecutive 1 ' s ▁ or ▁ 0' s ; length of binary string ; counts zeros ; counts 1 's ; count consecutive 0 's ; count consecutive 1 's ; Drivers Code ; function call,"#include <bits/stdc++.h>
#include <stdio.h>
using namespace std;
bool check(string s, int m) {
  int l = s.length();
  int c1 = 0;
  int c2 = 0;
  for (int i = 0; i < l; i++) {
    if (s[i] == '0') {
      c2 = 0;
      c1++;
    } else {
      c1 = 0;
      c2++;
    }
    if (c1 == m c2 == m)
      return true;
  }
  return false;
}
int main() {
  string s = ""001001"";
  int m = 2;
  if (check(s, m))
    cout << ""YES"";
  else
    cout << ""NO"";
  return 0;
}",Check if a string has m consecutive 1 ' s ▁ or ▁ 0' s.
56,Product of nodes at k | C ++ implementation to find product of digits of elements at k - th level ; Function to find product of digits of elements at k - th level ; int product = 1 ; Initialize result ; increasing level number ; decreasing level number ; check if current level is the desired level or not ; required product ; Driver program,"#include <bits/stdc++.h>
using namespace std;
int productAtKthLevel(string tree, int k) {
  int level = -1;
  int n = tree.length();
  for (int i = 0; i < n; i++) {
    if (tree[i] == '(')
      level++;
    else if (tree[i] == ')')
      level--;
    else {
      if (level == k)
        product *= (tree[i] - '0');
    }
  }
  return product;
}
int main() {
  string tree = ""(0(5(6()())(4()(9()())))(7(1()())(3()())))"";
  int k = 2;
  cout << productAtKthLevel(tree, k);
  return 0;
}",Product of nodes at k.
57,Removing row or column wise duplicates from matrix of characters | CPP code to form string after removing duplicates from rows and columns . ; Function to check duplicates in row and column ; Create an array isPresent and initialize all entries of it as false . The value of isPresent [ i ] [ j ] is going to be true if s [ i ] [ j ] is present in its row or column . ; Checking every row for duplicates of a [ i ] [ j ] ; Checking every column for duplicate characters ; If the character is unique in its row and column ; Driver code ; character array ; Calling function,"#include <bits/stdc++.h>
using namespace std;
void findDuplciates(string a[], int n, int m) {
  bool isPresent[n][m];
  memset(isPresent, 0, sizeof(isPresent));
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < m; j++) {
      for (int k = 0; k < n; k++) {
        if (a[i][j] == a[k][j] && i != k) {
          isPresent[i][j] = true;
          isPresent[k][j] = true;
        }
      }
      for (int k = 0; k < m; k++) {
        if (a[i][j] == a[i][k] && j != k) {
          isPresent[i][j] = true;
          isPresent[i][k] = true;
        }
      }
    }
  }
  for (int i = 0; i < n; i++)
    for (int j = 0; j < m; j++)
      if (!isPresent[i][j])
        printf(""%c"", a[i][j]);
}
int main() {
  int n = 2, m = 5;
  string a[] = {""zx"", ""xz""};
  findDuplciates(a, n, m);
  return 0;
}",Removing row or column wise duplicates from matrix of characters.
58,"Program to check for ISBN | CPP program to check if a given ISBN is valid or not ; length must be 10 ; Computing weighted sum of first 9 digits ; Checking last digit . ; If last digit is ' X ' , add 10 to sum , else add its value . ; Return true if weighted sum of digits is divisible by 11. ; Driver code","#include <bits/stdc++.h>
using namespace std;
bool isValidISBN(string &isbn) {
  int n = isbn.length();
  if (n != 10)
    return false;
  int sum = 0;
  for (int i = 0; i < 9; i++) {
    int digit = isbn[i] - '0';
    if (0 > digit 9 < digit)
      return false;
    sum += (digit * (10 - i));
  }
  char last = isbn[9];
  if (last != 'X' && (last<'0' last> '9'))
    return false;
  sum += ((last == 'X') ? 10 : (last - '0'));
  return (sum % 11 == 0);
}
int main() {
  string isbn = ""007462542X"";
  if (isValidISBN(isbn))
    cout << ""Valid"";
  else
    cout << ""Invalid"";
  return 0;
}",Program to check for ISBN.
59,Reverse vowels in a given string | C ++ program to reverse order of vowels ; utility function to check for vowel ; Function to reverse order of vowels ; Storing the vowels separately ; Placing the vowels in the reverse order in the string ; Driver function,"#include <bits/stdc++.h>
using namespace std;
bool isVowel(char c) {
  return (c == 'a' c == 'A' c == 'e' c == 'E' c == 'i' c == 'I' c == 'o' c ==
          'O' c == 'u' c == 'U');
}
string reverseVowel(string str) {
  int j = 0;
  string vowel;
  for (int i = 0; str[i] != '\0'; i++)
    if (isVowel(str[i]))
      vowel[j++] = str[i];
  for (int i = 0; str[i] != '\0'; i++)
    if (isVowel(str[i]))
      str[i] = vowel[--j];
  return str;
}
int main() {
  string str = ""hello world"";
  cout << reverseVowel(str);
  return 0;
}",Reverse vowels in a given string.
60,"String containing first letter of every word in a given string with spaces | C ++ program to find the string which contain the first character of each word of another string . ; Function to find string which has first character of each word . ; Traverse the string . ; If it is space , set v as true . ; Else check if v is true or not . If true , copy character in output string and set v as false . ; Driver cpde","#include <bits/stdc++.h>
using namespace std;
string firstLetterWord(string str) {
  string result = """";
  bool v = true;
  for (int i = 0; i < str.length(); i++) {
    if (str[i] == ' ')
      v = true;
    else if (str[i] != ' ' && v == true) {
      result.push_back(str[i]);
      v = false;
    }
  }
  return result;
}
int main() {
  string str = ""geeks for geeks"";
  cout << firstLetterWord(str);
  return 0;
}",String containing first letter of every word in a given string with spaces.
61,"Unique paths covering every non | C ++ implementation of the approach ; Function for dfs . i , j == > Current cell indexes vis == > To mark visited cells ans == > Result z == > Current count 0 s visited z_count == > Total 0 s present ; Mark the block as visited ; update the count ; If end block reached ; If path covered all the non - obstacle blocks ; Up ; Down ; Left ; Right ; Unmark the block ( unvisited ) ; Function to return the count of the unique paths ; int z_count = 0 ; Total 0 s present ; Count non - obstacle blocks ; Starting position ; Driver code","#include <bits/stdc++.h>
using namespace std;
void dfs(int i, int j, vector<vector<int>> &grid, vector<vector<bool>> &vis,
         int &ans, int z, int z_count) {
  int n = grid.size(), m = grid[0].size();
  vis[i][j] = 1;
  if (grid[i][j] == 0)
    z++;
  if (grid[i][j] == 2) {
    if (z == z_count)
      ans++;
    vis[i][j] = 0;
    return;
  }
  if (i >= 1 && !vis[i - 1][j] && grid[i - 1][j] != -1)
    dfs(i - 1, j, grid, vis, ans, z, z_count);
  if (i < n - 1 && !vis[i + 1][j] && grid[i + 1][j] != -1)
    dfs(i + 1, j, grid, vis, ans, z, z_count);
  if (j >= 1 && !vis[i][j - 1] && grid[i][j - 1] != -1)
    dfs(i, j - 1, grid, vis, ans, z, z_count);
  if (j < m - 1 && !vis[i][j + 1] && grid[i][j + 1] != -1)
    dfs(i, j + 1, grid, vis, ans, z, z_count);
  vis[i][j] = 0;
}
int uniquePaths(vector<vector<int>> &grid) {
  int n = grid.size(), m = grid[0].size();
  int ans = 0;
  vector<vector<bool>> vis(n, vector<bool>(m, 0));
  int x, y;
  for (int i = 0; i < n; ++i) {
    for (int j = 0; j < m; ++j) {
      if (grid[i][j] == 0)
        z_count++;
      else if (grid[i][j] == 1) {
        x = i, y = j;
      }
    }
  }
  dfs(x, y, grid, vis, ans, 0, z_count);
  return ans;
}
int main() {
  vector<vector<int>> grid{{1, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 2, -1}};
  cout << uniquePaths(grid);
  return 0;
}",Unique paths covering every non.
62,"Count of unordered pairs ( x , y ) of Array which satisfy given equation | C ++ Program to find the number of unordered pairs ( x , y ) which satisfy the given equation for the array ; Return the number of unordered pairs satisfying the conditions ; ans stores the number of unordered pairs ; Making each value of array to positive ; Sort the array ; For each index calculating the right boundary for the unordered pairs ; Return the final result ; Driver code","#include <bits/stdc++.h>
using namespace std;
int numPairs(int a[], int n) {
  int ans, i, index;
  ans = 0;
  for (i = 0; i < n; i++)
    a[i] = abs(a[i]);
  sort(a, a + n);
  for (i = 0; i < n; i++) {
    index = upper_bound(a, a + n, 2 * a[i]) - a;
    ans += index - i - 1;
  }
  return ans;
}
int main() {
  int a[] = {3, 6};
  int n = sizeof(a) / sizeof(a[0]);
  cout << numPairs(a, n) << endl;
  return 0;
}","Count of unordered pairs ( x , y ) of Array which satisfy given equation."
63,"Area of a Square | Using Side , Diagonal and Perimeter | C ++ program for the above approach ; Function to find the area of a square ; Use above formula ; Driver Code ; Given Side of square ; Function call","#include <iostream>
using namespace std;
int areaOfSquare(int S) {
  int area = S * S;
  return area;
}
int main() {
  int S = 5;
  cout << areaOfSquare(S);
  return 0;
}",Area of a Square.
64,Maximum points of intersections possible among X circles and Y straight lines | C ++ program to implement the above approach ; Driver code ; Number of circles ; Number of straight lines ; Function Call,"#include <bits/stdc++.h>
using namespace std;
int maxPointOfIntersection(int x, int y) {
  int k = y * (y - 1) / 2;
  k = k + x * (2 * y + x - 1);
  return k;
}
int main() {
  int x = 3;
  int y = 4;
  cout << (maxPointOfIntersection(x, y));
}",Maximum points of intersections possible among X circles and Y straight lines.
65,Icosihenagonal Number | C ++ program to find nth Icosihenagonal number ; Function to find Icosihenagonal number ; Formula to calculate nth Icosihenagonal number ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
int Icosihenagonal_num(int n) { return (19 * n * n - 17 * n) / 2; }
int main() {
  int n = 3;
  cout << Icosihenagonal_num(n) << endl;
  n = 10;
  cout << Icosihenagonal_num(n) << endl;
  return 0;
}",Icosihenagonal Number.
66,Find the centroid of a non | C ++ program to implement the above approach ; For all vertices ; Calculate value of A using shoelace formula ; Calculating coordinates of centroid of polygon ; Driver code ; Coordinate of the vertices,"#include <bits/stdc++.h>
using namespace std;
pair<double, double> find_Centroid(vector<pair<double, double>> &v) {
  pair<double, double> ans = {0, 0};
  int n = v.size();
  double signedArea = 0;
  for (int i = 0; i < v.size(); i++) {
    double x0 = v[i].first, y0 = v[i].second;
    double x1 = v[(i + 1) % n].first, y1 = v[(i + 1) % n].second;
    double A = (x0 * y1) - (x1 * y0);
    signedArea += A;
    ans.first += (x0 + x1) * A;
    ans.second += (y0 + y1) * A;
  }
  signedArea *= 0.5;
  ans.first = (ans.first) / (6 * signedArea);
  ans.second = (ans.second) / (6 * signedArea);
  return ans;
}
int main() {
  vector<pair<double, double>> vp = {{1, 2}, {3, -4}, {6, -7}};
  pair<double, double> ans = find_Centroid(vp);
  cout << setprecision(12) << ans.first << "" "" << ans.second <<'';
  return 0;
}",Find the centroid of a non.
67,Program to find the angles of a quadrilateral | C ++ implementation of the approach ; Driver code ; according to formula derived above ; print all the angles,"#include <bits/stdc++.h>
#definelllonglongint
using namespace std;
int main() {
  int d = 10;
  double a;
  a = (double)(360 - (6 * d)) / 4;
  cout << a << "", "" << a + d << "", "" << a + (2 * d) << "", "" << a + (3 * d)
       << endl;
  return 0;
}",Program to find the angles of a quadrilateral.
68,Distance between two parallel Planes in 3 | C ++ program to find the Distance between two parallel Planes in 3 D . ; Function to find distance ; Driver Code,"#include <bits/stdc++.h>
#include <math.h>
using namespace std;
void distance(float a1, float b1, float c1, float d1, float a2, float b2,
              float c2, float d2) {
  float x1, y1, z1, d;
  if (a1 / a2 == b1 / b2 && b1 / b2 == c1 / c2) {
    x1 = y1 = 0;
    z1 = -d1 / c1;
    d = fabs((c2 * z1 + d2)) / (sqrt(a2 * a2 + b2 * b2 + c2 * c2));
    cout << ""Perpendicular distance is "" << d << endl;
  } else
    cout << ""Planes are not parallel"";
  return;
}
int main() {
  float a1 = 1;
  float b1 = 2;
  float c1 = -1;
  float d1 = 1;
  float a2 = 3;
  float b2 = 6;
  float c2 = -3;
  float d2 = -4;
  distance(a1, b1, c1, d1, a2, b2, c2, d2);
  return 0;
}",Distance between two parallel Planes in 3.
69,Count of ways to form 2 necklace from N beads containing N / 2 beads each | C ++ program for the above approach ; Function to calculate factorial ; Function to count number of ways to make 2 necklace having exactly N / 2 beads if each bead is considered different ; Number of ways to choose N / 2 beads from N beads ; Number of ways to permute N / 2 beads ; Divide ans by 2 to remove repetitions ; Return ans ; Driver Code ; Given Input ; Function Call,"#include <bits/stdc++.h>
using namespace std;
int factorial(int n) {
  if (n == 0)
    return 1;
  return n * factorial(n - 1);
}
long long numOfNecklace(int N) {
  long long ans = factorial(N) / (factorial(N / 2) * factorial(N / 2));
  ans = ans * factorial(N / 2 - 1);
  ans = ans * factorial(N / 2 - 1);
  ans /= 2;
  return ans;
}
int main() {
  int N = 4;
  cout << numOfNecklace(N) << endl;
  return 0;
}",Count of ways to form 2 necklace from N beads containing N / 2 beads each.
70,"Check if a number S can be made divisible by D by repeatedly adding the remainder to S | C ++ program for the above approach ; Function to check if S is divisible by D while changing S to ( S + S % D ) ; V ( 0 ) = S % D ; Stores the encountered values ; V ( i ) = ( V ( i - 1 ) + V ( i - 1 ) % D ) % D ; Check if the value has already been encountered ; Edge Case ; Otherwise , insert it into the hashmap ; Driver Code","#include <bits/stdc++.h>
using namespace std;
string isDivisibleByDivisor(int S, int D) {
  S %= D;
  unordered_set<int> hashMap;
  hashMap.insert(S);
  for (int i = 0; i <= D; i++) {
    S += (S % D);
    S %= D;
    if (hashMap.find(S) != hashMap.end()) {
      if (S == 0) {
        return ""Yes"";
      }
      return ""No"";
    } else
      hashMap.insert(S);
  }
  return ""Yes"";
}
int main() {
  int S = 3, D = 6;
  cout << isDivisibleByDivisor(S, D);
  return 0;
}",Check if a number S can be made divisible by D by repeatedly adding the remainder to S.
71,"Minimum number of given moves required to reach ( 1 , 1 ) from ( X , Y ) | C ++ program for the above approach ; Function to count the number of steps required to convert ( x , y ) to ( 1 , 1 ) ; Store the required result ; Iterate while both x and y are not equal to 0 ; If x is greater than y ; Update count and value of x ; Otherwise ; Update count and value of y ; If both x and y > 1 ; Print the result ; Driver Code ; Given X and Y","#include <bits/stdc++.h>
using namespace std;
int minimumSteps(int x, int y) {
  int cnt = 0;
  while (x != 0 && y != 0) {
    if (x > y) {
      cnt += x / y;
      x %= y;
    } else {
      cnt += y / x;
      y %= x;
    }
  }
  cnt--;
  if (x > 1 y > 1)
    cnt = -1;
  cout << cnt;
}
int main() {
  int x = 3, y = 1;
  minimumSteps(x, y);
  return 0;
}","Minimum number of given moves required to reach ( 1 , 1 ) from ( X , Y )."
72,"Check if an array is stack sortable | C ++ implementation of above approach . ; Function to check if A [ ] is Stack Sortable or Not . ; Stack S ; Pointer to the end value of array B . ; Traversing each element of A [ ] from starting Checking if there is a valid operation that can be performed . ; If the stack is not empty ; Top of the Stack . ; If the top of the stack is Equal to B_end + 1 , we will pop it And increment B_end by 1. ; if current top is equal to B_end + 1 , we will increment B_end to B_end + 1 ; Pop the top element . ; If the stack is empty We cannot further perfom this operation . Therefore break ; Current Top ; If stack is empty Push the Current element ; If the Current element of the array A [ ] if smaller than the top of the stack We can push it in the Stack . ; Else We cannot sort the array Using any valid operations . ; Not Stack Sortable ; If the stack is empty push the current element in the stack . ; Stack Sortable ; Driver 's Code","#include <bits/stdc++.h>
using namespace std;
bool check(int A[], int N) {
  stack<int> S;
  int B_end = 0;
  for (int i = 0; i < N; i++) {
    if (!S.empty()) {
      int top = S.top();
      while (top == B_end + 1) {
        B_end = B_end + 1;
        S.pop();
        if (S.empty()) {
          break;
        }
        top = S.top();
      }
      if (S.empty()) {
        S.push(A[i]);
      } else {
        top = S.top();
        if (A[i] < top) {
          S.push(A[i]);
        } else {
          return false;
        }
      }
    } else {
      S.push(A[i]);
    }
  }
  return true;
}
int main() {
  int A[] = {4, 1, 2, 3};
  int N = sizeof(A) / sizeof(A[0]);
  check(A, N) ? cout << ""YES"" : cout << ""NO"";
  return 0;
}",Check if an array is stack sortable.
73,"Minimum number of bracket reversals needed to make an expression balanced | C ++ program to find minimum number of reversals required to balance an expression ; Returns count of minimum reversals for making expr balanced . Returns - 1 if expr cannot be balanced . ; length of expression must be even to make it balanced by using reversals . ; After this loop , stack contains unbalanced part of expression , i . e . , expression of the form "" } } . . } { { . . { "" ; Length of the reduced expression red_len = ( m + n ) ; count opening brackets at the end of stack ; return ceil ( m / 2 ) + ceil ( n / 2 ) which is actually equal to ( m + n ) / 2 + n % 2 when m + n is even . ; Driver program to test above function","#include <bits/stdc++.h>
using namespace std;
int countMinReversals(string expr) {
  int len = expr.length();
  if (len % 2)
    return -1;
  stack<char> s;
  for (int i = 0; i < len; i++) {
    if (expr[i] == '}' && !s.empty()) {
      if (s.top() == '{')
        s.pop();
      else
        s.push(expr[i]);
    } else
      s.push(expr[i]);
  }
  int red_len = s.size();
  int n = 0;
  while (!s.empty() && s.top() == '{') {
    s.pop();
    n++;
  }
  return (red_len / 2 + n % 2);
}
int main() {
  string expr = ""}}{{"";
  cout << countMinReversals(expr);
  return 0;
}",Minimum number of bracket reversals needed to make an expression balanced.
74,Minimum number of bracket reversals needed to make an expression balanced | C ++ program to find minimum number of reversals required to balance an expression ; Returns count of minimum reversals for making expr balanced . Returns - 1 if expr cannot be balanced . ; Expressions of odd lengths cannot be balanced ; If we find a left bracket then we simply increment the left bracket ; Else if left bracket is 0 then we find unbalanced right bracket and increment right bracket or if the expression is balanced then we decrement left ; Driver program to test above function,"#include <bits/stdc++.h>
using namespace std;
int countMinReversals(string expr) {
  int len = expr.length();
  if (len % 2 != 0) {
    return -1;
  }
  int left_brace = 0, right_brace = 0;
  int ans;
  for (int i = 0; i < len; i++) {
    if (expr[i] == '{') {
      left_brace++;
    } else {
      if (left_brace == 0) {
        right_brace++;
      } else {
        left_brace--;
      }
    }
  }
  ans = ceil(left_brace / 2) + ceil(right_brace / 2);
  return ans;
}
int main() {
  string expr = ""}}{{"";
  cout << countMinReversals(expr);
  return 0;
}",Minimum number of bracket reversals needed to make an expression balanced.
75,"Form minimum number from given sequence | C ++ program to print minimum number that can be formed from a given sequence of Is and Ds ; Prints the minimum number that can be formed from input sequence of I ' s ▁ and ▁ D ' s ; Initialize current_max ( to make sure that we don 't use repeated character ; Initialize last_entry ( Keeps track for last printed digit ) ; Iterate over input array ; Initialize ' noOfNextD ' to get count of next D 's available ; If letter is ' I ' Calculate number of next consecutive D 's  available ; If ' I ' is first letter , print incremented sequence from 1 ; Set max digit reached ; If not first letter Get next digit to print ; Print digit for I ; For all next consecutive ' D ' print decremented sequence ; If letter is ' D ' ; If ' D ' is first letter in sequence Find number of Next D 's available ; Calculate first digit to print based on number of consecutive D 's ; Print twice for the first time ; Store last entry ; If current ' D ' is not first letter Decrement last_entry ; Driver program to test above","#include <bits/stdc++.h>
using namespace std;
void PrintMinNumberForPattern(string arr) {
  int curr_max = 0;
  int last_entry = 0;
  int j;
  for (int i = 0; i < arr.length(); i++) {
    int noOfNextD = 0;
    switch (arr[i]) {
    case 'I':
      j = i + 1;
      while (arr[j] == 'D' && j < arr.length()) {
        noOfNextD++;
        j++;
      }
      if (i == 0) {
        curr_max = noOfNextD + 2;
        cout << "" "" << ++last_entry;
        cout << "" "" << curr_max;
        last_entry = curr_max;
      } else {
        curr_max = curr_max + noOfNextD + 1;
        last_entry = curr_max;
        cout << "" "" << last_entry;
      }
      for (int k = 0; k < noOfNextD; k++) {
        cout << "" "" << --last_entry;
        i++;
      }
      break;
    case 'D':
      if (i == 0) {
        j = i + 1;
        while (arr[j] == 'D' && j < arr.length()) {
          noOfNextD++;
          j++;
        }
        curr_max = noOfNextD + 2;
        cout << "" "" << curr_max << "" "" << curr_max - 1;
        last_entry = curr_max - 1;
      } else {
        cout << "" "" << last_entry - 1;
        last_entry--;
      }
      break;
    }
  }
  cout << endl;
}
int main() {
  PrintMinNumberForPattern(""IDID"");
  PrintMinNumberForPattern(""I"");
  PrintMinNumberForPattern(""DD"");
  PrintMinNumberForPattern(""II"");
  PrintMinNumberForPattern(""DIDI"");
  PrintMinNumberForPattern(""IIDDD"");
  PrintMinNumberForPattern(""DDIDDIID"");
  return 0;
}",Form minimum number from given sequence.
76,Form minimum number from given sequence | C ++ program to print minimum number that can be formed from a given sequence of Is and Ds ; min_avail represents the minimum number which is still available for inserting in the output vector . pos_of_I keeps track of the most recent index where ' I ' was encountered w . r . t the output vector ; vector to store the output ; cover the base cases ; Traverse rest of the input ; print the number ; Driver program to check the above function,"#include <bits/stdc++.h>
using namespace std;
void printLeast(string arr) {
  int min_avail = 1, pos_of_I = 0;
  vector<int> v;
  if (arr[0] == 'I') {
    v.push_back(1);
    v.push_back(2);
    min_avail = 3;
    pos_of_I = 1;
  } else {
    v.push_back(2);
    v.push_back(1);
    min_avail = 3;
    pos_of_I = 0;
  }
  for (int i = 1; i < arr.length(); i++) {
    if (arr[i] == 'I') {
      v.push_back(min_avail);
      min_avail++;
      pos_of_I = i + 1;
    } else {
      v.push_back(v[i]);
      for (int j = pos_of_I; j <= i; j++)
        v[j]++;
      min_avail++;
    }
  }
  for (int i = 0; i < v.size(); i++)
    cout << v[i] << "" "";
  cout << endl;
}
int main() {
  printLeast(""IDID"");
  printLeast(""I"");
  printLeast(""DD"");
  printLeast(""II"");
  printLeast(""DIDI"");
  printLeast(""IIDDD"");
  printLeast(""DDIDDIID"");
  return 0;
}",Form minimum number from given sequence.
77,Form minimum number from given sequence | C ++ program to print minimum number that can be formed from a given sequence of Is and Ds ; Function to decode the given sequence to construct minimum number without repeated digits ; result store output string ; create an empty stack of integers ; run n + 1 times where n is length of input sequence ; push number i + 1 into the stack ; if all characters of the input sequence are processed or current character is ' I ' ( increasing ) ; run till stack is empty ; remove top element from the stack and add it to solution ; main function,"#include <bits/stdc++.h>
using namespace std;
void PrintMinNumberForPattern(string seq) {
  string result;
  stack<int> stk;
  for (int i = 0; i <= seq.length(); i++) {
    stk.push(i + 1);
    if (i == seq.length() seq[i] == 'I') {
      while (!stk.empty()) {
        result += to_string(stk.top());
        result += "" "";
        stk.pop();
      }
    }
  }
  cout << result << endl;
}
int main() {
  PrintMinNumberForPattern(""IDID"");
  PrintMinNumberForPattern(""I"");
  PrintMinNumberForPattern(""DD"");
  PrintMinNumberForPattern(""II"");
  PrintMinNumberForPattern(""DIDI"");
  PrintMinNumberForPattern(""IIDDD"");
  PrintMinNumberForPattern(""DDIDDIID"");
  return 0;
}",Form minimum number from given sequence.
78,Form minimum number from given sequence | C ++ program of above approach ; Returns minimum number made from given sequence without repeating digits ; The loop runs for each input character as well as one additional time for assigning rank to remaining characters ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
string getMinNumberForPattern(string seq) {
  int n = seq.length();
  if (n >= 9)
    return ""-1"";
  string result(n + 1, ' ');
  int count = 1;
  for (int i = 0; i <= n; i++) {
    if (i == n seq[i] == 'I') {
      for (int j = i - 1; j >= -1; j--) {
        result[j + 1] = '0' + count++;
        if (j >= 0 && seq[j] == 'I')
          break;
      }
    }
  }
  return result;
}
int main() {
  string inputs[] = {""IDID"", ""I"", ""DD"", ""II"", ""DIDI"", ""IIDDD"", ""DDIDDIID""};
  for (string input : inputs) {
    cout << getMinNumberForPattern(input) << ""\n"";
  }
  return 0;
}",Form minimum number from given sequence.
79,Check if the first and last digit of the smallest number forms a prime | C ++ implementation of above approach ; function to check prime ; Function to generate smallest possible number with given digits ; Declare a hash array of size 10 and initialize all the elements to zero ; store the number of occurrences of the digits in the given array into the hash table ; Traverse the hash in ascending order to print the required number ; Print the number of times a digits occurs ; extracting the first digit ; extracting the last digit ; printing the prime combinations ; Driver code,"#include <bits/stdc++.h>
using namespace std;
int isPrime(int n) {
  int i, c = 0;
  for (i = 1; i < n / 2; i++) {
    if (n % i == 0)
      c++;
  }
  if (c == 1)
    return 1;
  else
    return 0;
}
void findMinNum(int arr[], int n) {
  int first = 0, last = 0, num, rev, i;
  int hash[10] = {0};
  for (int i = 0; i < n; i++) {
    hash[arr[i]]++;
  }
  cout << ""Minimum number: "";
  for (int i = 0; i <= 9; i++) {
    for (int j = 0; j < hash[i]; j++)
      cout << i;
  }
  cout << endl;
  for (i = 0; i <= 9; i++) {
    if (hash[i] != 0) {
      first = i;
      break;
    }
  }
  for (i = 9; i >= 0; i--) {
    if (hash[i] != 0) {
      last = i;
      break;
    }
  }
  num = first * 10 + last;
  rev = last * 10 + first;
  cout << ""Prime combinations: "";
  if (isPrime(num) && isPrime(rev))
    cout << num << "" "" << rev;
  else if (isPrime(num))
    cout << num;
  else if (isPrime(rev))
    cout << rev;
  else
    cout << ""No combinations exist"";
}
int main() {
  int arr[] = {1, 2, 4, 7, 8};
  findMinNum(arr, 5);
  return 0;
}",Check if the first and last digit of the smallest number forms a prime.
80,"Finding a Non Transitive Co | C ++ program to find possible non transitive triplets btw L and R ; Function to return gcd of a and b ; function to check for gcd ; a and b are coprime if their gcd is 1. ; Checks if any possible triplet ( a , b , c ) satisfying the condition that ( a , b ) is coprime , ( b , c ) is coprime but ( a , c ) isnt ; Generate and check for all possible triplets between L and R ; if we find any such triplets set flag to true ; flag = True indicates that a pair exists between L and R ; Driver code ; finding possible Triplet between 2 and 10 ; finding possible Triplet between 23 and 46","#include <bits/stdc++.h>
using namespace std;
int gcd(int a, int b) {
  if (a == 0)
    return b;
  return gcd(b % a, a);
}
bool coprime(int a, int b) { return (gcd(a, b) == 1); }
void possibleTripletInRange(int L, int R) {
  bool flag = false;
  int possibleA, possibleB, possibleC;
  for (int a = L; a <= R; a++) {
    for (int b = a + 1; b <= R; b++) {
      for (int c = b + 1; c <= R; c++) {
        if (coprime(a, b) && coprime(b, c) && !coprime(a, c)) {
          flag = true;
          possibleA = a;
          possibleB = b;
          possibleC = c;
          break;
        }
      }
    }
  }
  if (flag == true) {
    cout << ""("" << possibleA << "", "" << possibleB << "", "" << possibleC << "")""
         << "" is one such possible triplet between "" << L << "" and "" << R
         << ""\n"";
  } else {
    cout << ""No Such Triplet exists between "" << L << "" and "" << R << ""\n"";
  }
}
int main() {
  int L, R;
  L = 2;
  R = 10;
  possibleTripletInRange(L, R);
  L = 23;
  R = 46;
  possibleTripletInRange(L, R);
  return 0;
}",Finding a Non Transitive Co.
81,"Reach A and B by multiplying them with K and K ^ 2 at every step | CPP program to determine if A and B can be reached starting from 1 , 1 following the given steps . ; function to check is it is possible to reach A and B starting from 1 and 1 ; find the cuberoot of the number ; divide the number by cuberoot ; if it is a perfect cuberoot and divides a and b ; Driver code","#include <bits/stdc++.h>
using namespace std;
bool possibleToReach(int a, int b) {
  int c = cbrt(a * b);
  int re1 = a / c;
  int re2 = b / c;
  if ((re1 * re1 * re2 == a) && (re2 * re2 * re1 == b))
    return true;
  else
    return false;
}
int main() {
  int A = 60, B = 450;
  if (possibleToReach(A, B))
    cout << ""yes"";
  else
    cout << ""no"";
  return 0;
}",Reach A and B by multiplying them with K and K ^ 2 at every step.
82,Undulating numbers | C ++ program to check whether a number is undulating or not ; Considering the definition with restriction that there should be at least 3 digits ; Check if all alternate digits are same or not . ; Driver code,"#include <bits/stdc++.h>
using namespace std;
bool isUndulating(string n) {
  if (n.length() <= 2)
    return false;
  for (int i = 2; i < n.length(); i++)
    if (n[i - 2] != n[i])
      false;
  return true;
}
int main() {
  string n = ""1212121"";
  if (isUndulating(n))
    cout << ""Yes"";
  else
    cout << ""No"";
}",Undulating numbers.
83,Program to find the sum of a Series ( 1 * 1 ) + ( 2 * 2 ) + ( 3 * 3 ) + ( 4 * 4 ) + ( 5 * 5 ) + ... + ( n * n ) | CPP program to calculate the following series ; Function to calculate the following series ; Driver Code,"#include <iostream>
using namespace std;
int Series(int n) {
  int i;
  int sums = 0;
  for (i = 1; i <= n; i++)
    sums += (i * i);
  return sums;
}
int main() {
  int n = 3;
  int res = Series(n);
  cout << res << endl;
}",Program to find the sum of a Series ( 1 * 1 ) + ( 2 * 2 ) + ( 3 * 3 ) + ( 4 * 4 ) + ( 5 * 5 ) + ... + ( n * n ).
84,Count numbers with unit digit k in given range | Efficient CPP program to count numbers with last digit as k in given range . ; Returns count of numbers with k as last digit . ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
int countLastDigitK(long long low, long long high, long long K) {
  long long mlow = 10 * ceil(low / 10.0);
  long long mhigh = 10 * floor(high / 10.0);
  int count = (mhigh - mlow) / 10;
  if (high % 10 >= K)
    count++;
  if (low % 10 <= K && (low % 10))
    count++;
  return count;
}
int main() {
  int low = 3, high = 35, k = 3;
  cout << countLastDigitK(low, high, k);
  return 0;
}",Count numbers with unit digit k in given range.
85,Sum of all numbers divisible by 6 in a given range | CPP program to find sum of numbers divisible by 6 in a given range . ; function to calculate the sum of all numbers divisible by 6 in range L - R . . ; no of multiples of 6 upto r ; no of multiples of 6 upto l - 1 ; summation of all multiples of 6 upto r ; summation of all multiples of 6 upto l - 1 ; returns the answer ; driver program to test the above function,"#include <bits/stdc++.h>
using namespace std;
int sum(int L, int R) {
  int p = R / 6;
  int q = (L - 1) / 6;
  int sumR = 3 * (p * (p + 1));
  int sumL = (q * (q + 1)) * 3;
  return sumR - sumL;
}
int main() {
  int L = 1, R = 20;
  cout << sum(L, R);
  return 0;
}",Sum of all numbers divisible by 6 in a given range.
86,"Largest smaller number possible using only one swap operation | C ++ program to find the largest smaller number by swapping one digit . ; Returns largest possible number with one swap such that the number is smaller than str . It is assumed that there are leading 0 s . ; Traverse from right until we find a digit which is greater than its next digit . For example , in 34125 , our index is 4. ; We can also use binary search here as digits after index are sorted in increasing order . Find the biggest digit in the right of arr [ index ] which is smaller than arr [ index ] ; If index is - 1 i . e . digits are in increasing order . ; Swap both values ; Drivers code","#include <bits/stdc++.h>
using namespace std;
string prevNum(string str) {
  int len = str.length();
  int index = -1;
  for (int i = len - 2; i >= 0; i--) {
    if (str[i] > str[i + 1]) {
      index = i;
      break;
    }
  }
  int smallGreatDgt = -1;
  for (int i = len - 1; i > index; i--) {
    if (str[i] < str[index]) {
      if (smallGreatDgt == -1)
        smallGreatDgt = i;
      else if (str[i] >= str[smallGreatDgt])
        smallGreatDgt = i;
    }
  }
  if (index == -1)
    return ""-1"";
  if (smallGreatDgt != -1) {
    swap(str[index], str[smallGreatDgt]);
    return str;
  }
  return ""-1"";
}
int main() {
  string str = ""34125"";
  cout << prevNum(str);
  return 0;
}",Largest smaller number possible using only one swap operation.
87,Sgn value of a polynomial | CPP program to find sign value of a polynomial ; returns value of poly [ 0 ] x ( n - 1 ) + poly [ 1 ] x ( n - 2 ) + . . + poly [ n - 1 ] ; Evaluate value of polynomial using Horner 's method ; Returns sign value of polynomial ; Driver program to test above function . ; Let us evaluate value of 2 x3 - 6 x2 + 2 x - 1 for x = 3,"#include <iostream>
using namespace std;
int horner(int poly[], int n, int x) {
  for (int i = 1; i < n; i++)
    result = result * x + poly[i];
  return result;
}
int findSign(int poly[], int n, int x) {
  int result = horner(poly, n, x);
  if (result > 0)
    return 1;
  else if (result < 0)
    return -1;
  return 0;
}
int main() {
  int poly[] = {2, -6, 2, -1};
  int x = 3;
  int n = sizeof(poly) / sizeof(poly[0]);
  cout << ""Sign of polynomial is "" << findSign(poly, n, x);
  return 0;
}",Sgn value of a polynomial.
88,Insert minimum number in array so that sum of array becomes prime | C ++ program to find minimum number to insert in array so their sum is prime ; Array to store primes ; function to calculate primes using sieve of eratosthenes ; Find prime number greater than a number ; To return prime number greater than n ; check if num is prime ; increment num ; To find number to be added so sum of array is prime ; call sieveOfEratostheneses to calculate primes ; To find sum of array elements ; To find prime number greater then sum ; Return difference of sum and num ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
#defineMAX100005 bool isPrime[MAX];
void sieveOfEratostheneses() {
  memset(isPrime, true, sizeof(isPrime));
  isPrime[1] = false;
  for (int i = 2; i * i < MAX; i++) {
    if (isPrime[i]) {
      for (int j = 2 * i; j < MAX; j += i)
        isPrime[j] = false;
    }
  }
}
int findPrime(int n) {
  int num = n + 1;
  while (num) {
    if (isPrime[num])
      return num;
    num = num + 1;
  }
  return 0;
}
int minNumber(int arr[], int n) {
  sieveOfEratostheneses();
  int sum = 0;
  for (int i = 0; i < n; i++)
    sum += arr[i];
  if (isPrime[sum])
    return 0;
  int num = findPrime(sum);
  return num - sum;
}
int main() {
  int arr[] = {2, 4, 6, 8, 12};
  int n = sizeof(arr) / sizeof(arr[0]);
  cout << minNumber(arr, n);
  return 0;
}",Insert minimum number in array so that sum of array becomes prime.
89,Sum of all Subarrays | Set 1 | Simple C ++ program to compute sum of subarray elements ; Computes sum all sub - array ; Pick starting point ; Pick ending point ; sum subarray between current starting and ending points ; driver program to test above function,"#include <bits/stdc++.h>
using namespace std;
long int SubArraySum(int arr[], int n) {
  long int result = 0, temp = 0;
  for (int i = 0; i < n; i++) {
    temp = 0;
    for (int j = i; j < n; j++) {
      temp += arr[j];
      result += temp;
    }
  }
  return result;
}
int main() {
  int arr[] = {1, 2, 3};
  int n = sizeof(arr) / sizeof(arr[0]);
  cout << ""Sum of SubArray : "" << SubArraySum(arr, n) << endl;
  return 0;
}",Sum of all Subarrays.
90,Highest power of 2 less than or equal to given number | C ++ program to find highest power of 2 smaller than or equal to n . ; Driver code,"#include <bits/stdc++.h>
using namespace std;
int highestPowerof2(int n) {
  int p = (int)log2(n);
  return (int)pow(2, p);
}
int main() {
  int n = 10;
  cout << highestPowerof2(n);
  return 0;
}",Highest power of 2 less than or equal to given number.
91,"Rearrange characters in a string such that no two adjacent are same | C ++ program to rearrange characters in a string so that no two adjacent characters are same . ; store frequency of character ; function for priority_queue to store Key according to freq ; Function to rearrange character of a string so that no char repeat twice ; Store frequencies of all characters in string ; Insert all characters with their frequencies into a priority_queue ; ' str ' that will store resultant value ; work as the previous visited element initial previous element be . ( ' # ' and it ' s ▁ frequency ▁ ' - 1 ' ) ; traverse queue ; pop top element from queue and add it to string . ; IF frequency of previous character is less than zero that means it is useless , we need not to push it ; make current character as the previous ' char ' decrease frequency by ' one ' ; If length of the resultant string and original string is not same then string is not valid ; valid string ; Driver program to test above function","#include <bits/stdc++.h>
using namespace std;
const int MAX_CHAR = 26;
struct Key {
  int freq;
  char ch;
  bool operator<(const Key &k) const { return freq < k.freq; }
};
void rearrangeString(string str) {
  int n = str.length();
  int count[MAX_CHAR] = {0};
  for (int i = 0; i < n; i++)
    count[str[i] - 'a']++;
  priority_queue<Key> pq;
  for (char c = 'a'; c <= 'z'; c++) {
    int val = c - 'a';
    if (count[val]) {
      pq.push(Key{count[val], c});
    }
  }
  str = """";
  Key prev{-1, '#'};
  while (!pq.empty()) {
    Key k = pq.top();
    pq.pop();
    str = str + k.ch;
    if (prev.freq > 0)
      pq.push(prev);
    (k.freq)--;
    prev = k;
  }
  if (n != str.length())
    cout << "" Not valid String "" << endl;
  else
    cout << str << endl;
}
int main() {
  string str = ""bbbaa"";
  rearrangeString(str);
  return 0;
}",Rearrange characters in a string such that no two adjacent are same.
92,Find ( a ^ b ) % m where ' a ' is very large | C ++ program to find ( a ^ b ) mod m for a large ' a ' ; utility function to calculate a % m ; ( s [ i ] - '0' ) gives the digit value and form the number ; Returns find ( a ^ b ) % m ; Find a % m ; now multiply ans by b - 1 times and take mod with m ; Driver program to run the case,"#include <bits/stdc++.h>
using namespace std;
unsigned int aModM(string s, unsigned int mod) {
  unsigned int number = 0;
  for (unsigned int i = 0; i < s.length(); i++) {
    number = (number * 10 + (s[i] - '0'));
    number %= mod;
  }
  return number;
}
unsigned int ApowBmodM(string &a, unsigned int b, unsigned int m) {
  unsigned int ans = aModM(a, m);
  unsigned int mul = ans;
  for (unsigned int i = 1; i < b; i++)
    ans = (ans * mul) % m;
  return ans;
}
int main() {
  string a = ""987584345091051645734583954832576"";
  unsigned int b = 3, m = 11;
  cout << ApowBmodM(a, b, m);
  return 0;
}",Find ( a ^ b ) % m where ' a ' is very large.
93,Lagrange 's Interpolation | C ++ program for implementation of Lagrange 's Interpolation ; To represent a data point corresponding to x and y = f ( x ) ; function to interpolate the given data points using Lagrange 's formula xi corresponds to the new data point whose value is to be obtained n represents the number of known data points ; double result = 0 ; Initialize result ; Compute individual terms of above formula ; Add current term to result ; driver function to check the program ; creating an array of 4 known data points ; Using the interpolate function to obtain a data point corresponding to x = 3,"#include <bits/stdc++.h>
using namespace std;
struct Data {
  int x, y;
};
double interpolate(Data f[], int xi, int n) {
  for (int i = 0; i < n; i++) {
    double term = f[i].y;
    for (int j = 0; j < n; j++) {
      if (j != i)
        term = term * (xi - f[j].x) / double(f[i].x - f[j].x);
    }
    result += term;
  }
  return result;
}
int main() {
  Data f[] = {{0, 2}, {1, 3}, {2, 12}, {5, 147}};
  cout << ""Value of f(3) is : "" << interpolate(f, 3, 5);
  return 0;
}",Lagrange 's Interpolation.
94,"Sieve of Sundaram to print all primes smaller than n | C ++ program to print primes smaller than n using Sieve of Sundaram . ; Prints all prime numbers smaller ; In general Sieve of Sundaram , produces primes smaller than ( 2 * x + 2 ) for a number given number x . Since we want primes smaller than n , we reduce n to half ; This array is used to separate numbers of the form i + j + 2 ij from others where 1 <= i <= j ; Initialize all elements as not marked ; Main logic of Sundaram . Mark all numbers of the form i + j + 2 ij as true where 1 <= i <= j ; Since 2 is a prime number ; Print other primes . Remaining primes are of the form 2 * i + 1 such that marked [ i ] is false . ; Driver program to test above","#include <bits/stdc++.h>
using namespace std;
int SieveOfSundaram(int n) {
  int nNew = (n - 1) / 2;
  bool marked[nNew + 1];
  memset(marked, false, sizeof(marked));
  for (int i = 1; i <= nNew; i++)
    for (int j = i; (i + j + 2 * i * j) <= nNew; j++)
      marked[i + j + 2 * i * j] = true;
  if (n > 2)
    cout << 2 << "" "";
  for (int i = 1; i <= nNew; i++)
    if (marked[i] == false)
      cout << 2 * i + 1 << "" "";
}
int main(void) {
  int n = 20;
  SieveOfSundaram(n);
  return 0;
}",Sieve of Sundaram to print all primes smaller than n.
95,Construct original array starting with K from an array of XOR of all elements except elements at same index | C ++ program for the above approach ; Function to construct an array with each element equal to XOR of all array elements except the element at the same index ; Original array ; Stores Bitwise XOR of array ; Calculate XOR of all array elements ; Print the original array B [ ] ; Driver Code ; Function Call,"#include <bits/stdc++.h>
using namespace std;
void constructArray(int A[], int N, int K) {
  int B[N];
  int totalXOR = A[0] ^ K;
  for (int i = 0; i < N; i++)
    B[i] = totalXOR ^ A[i];
  for (int i = 0; i < N; i++) {
    cout << B[i] << "" "";
  }
}
int main() {
  int A[] = {13, 14, 10, 6}, K = 2;
  int N = sizeof(A) / sizeof(A[0]);
  constructArray(A, N, K);
  return 0;
}",Construct original array starting with K from an array of XOR of all elements except elements at same index.
96,Find extra element in the second array | C ++ implementation of the approach ; Function to return the extra element in B [ ] ; To store the result ; Find the XOR of all the element of array A [ ] and array B [ ] ; Driver code,"#include <bits/stdc++.h>
using namespace std;
int extraElement(int A[], int B[], int n) {
  int ans = 0;
  for (int i = 0; i < n; i++)
    ans ^= A[i];
  for (int i = 0; i < n + 1; i++)
    ans ^= B[i];
  return ans;
}
int main() {
  int A[] = {10, 15, 5};
  int B[] = {10, 100, 15, 5};
  int n = sizeof(A) / sizeof(int);
  cout << extraElement(A, B, n);
  return 0;
}",Find extra element in the second array.
97,Hamming distance between two Integers | C ++ implementation of above approach ; Function to calculate hamming distance ; Driver code,"#include <bits/stdc++.h>
using namespace std;
int hammingDistance(int n1, int n2) {
  int x = n1 ^ n2;
  int setBits = 0;
  while (x > 0) {
    setBits += x & 1;
    x >>= 1;
  }
  return setBits;
}
int main() {
  int n1 = 9, n2 = 14;
  cout << hammingDistance(9, 14) << endl;
  return 0;
}",Hamming distance between two Integers.
98,Print bitwise AND set of a number N | CPP program to print all bitwise subsets of N ( Naive approach ) ; function to find bitwise subsets Naive approach ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
void printSubsets(int n) {
  for (int i = 0; i <= n; i++)
    if ((n & i) == i)
      cout << i << "" "";
}
int main() {
  int n = 9;
  printSubsets(n);
  return 0;
}",Print bitwise AND set of a number N.
99,Find most significant set bit of a number | CPP program to find MSB number for given n . ; To find the position of the most significant set bit ; To return the the value of the number with set bit at k - th position ; Driver code,"#include <bits/stdc++.h>
using namespace std;
int setBitNumber(int n) {
  int k = (int)(log2(n));
  return 1 << k;
}
int main() {
  int n = 273;
  cout << setBitNumber(n);
  return 0;
}",Find most significant set bit of a number.
100,Minimum number of subsets with distinct elements | A sorting based solution to find the minimum number of subsets of a set such that every subset contains distinct elements . ; Function to count subsets such that all subsets have distinct elements . ; Take input and initialize res = 0 ; Sort the array ; Traverse the input array and find maximum frequency ; For each number find its repetition / frequency ; Update res ; Driver code,"#include <bits/stdc++.h>
using namespace std;
int subset(int ar[], int n) {
  int res = 0;
  sort(ar, ar + n);
  for (int i = 0; i < n; i++) {
    int count = 1;
    for (; i < n - 1; i++) {
      if (ar[i] == ar[i + 1])
        count++;
      else
        break;
    }
    res = max(res, count);
  }
  return res;
}
int main() {
  int arr[] = {5, 6, 9, 3, 4, 3, 4};
  int n = sizeof(arr) / sizeof(arr[0]);
  cout << subset(arr, n);
  return 0;
}",Minimum number of subsets with distinct elements.
101,Minimum number of subsets with distinct elements | A hashing based solution to find the minimum number of subsets of a set such that every subset contains distinct elements . ; Function to count subsets such that all subsets have distinct elements . ; Traverse the input array and store frequencies of elements ; Find the maximum value in map . ; Driver code,"#include <bits/stdc++.h>
using namespace std;
int subset(int arr[], int n) {
  unordered_map<int, int> mp;
  for (int i = 0; i < n; i++)
    mp[arr[i]]++;
  int res = 0;
  for (auto x : mp)
    res = max(res, x.second);
  return res;
}
int main() {
  int arr[] = {5, 6, 9, 3, 4, 3, 4};
  int n = sizeof(arr) / sizeof(arr[0]);
  cout << subset(arr, n);
  return 0;
}",Minimum number of subsets with distinct elements.
102,Count ways to represent a number as sum of perfect squares | C ++ program for the above approach ; Store perfect squares less than or equal to N ; Utility function to calculate perfect squares less than or equal to N ; Function to find the number of ways to represent a number as sum of perfect squares ; Handle the base cases ; Include the i - th index element ; Exclude the i - th index element ; Return the result ; Driver Code ; Given Input ; Precalculate perfect squares <= N ; Function Call,"#include <bits/stdc++.h>
using namespace std;
vector<int> psquare;
void calcPsquare(int N) {
  for (int i = 1; i * i <= N; i++)
    psquare.push_back(i * i);
}
int countWays(int index, int target) {
  if (target == 0)
    return 1;
  if (index < 0 target < 0)
    return 0;
  int inc = countWays(index, target - psquare[index]);
  int exc = countWays(index - 1, target);
  return inc + exc;
}
int main() {
  int N = 9;
  calcPsquare(N);
  cout << countWays(psquare.size() - 1, N);
  return 0;
}",Count ways to represent a number as sum of perfect squares.
103,"Sum of distances of all nodes from a given node | C ++ program for the above approach ; Structure of a binary tree node ; Function that allocates a new node with the given data and NULL to its left and right pointers ; Return newly created node ; Function to count the number of nodes in the left and right subtrees ; Initialize a pair that stores the pair { number of nodes , depth } ; Finding the number of nodes in the left subtree ; Find the number of nodes in the right subtree ; Filling up size field ; Stores the sum of distances of all nodes from the given node ; Function to find the total distance ; If target node matches with the current node ; If root -> left is not null ; Update sum ; Recur for the left subtree ; If root -> right is not null ; Apply the formula given in the approach ; Recur for the right subtree ; Driver Code ; Input tree ; Total number of nodes ; Print the sum of distances","#include <bits/stdc++.h>
using namespace std;
class TreeNode {
public:
  int data, size;
  TreeNode *left;
  TreeNode *right;
};
TreeNode *newNode(int data) {
  TreeNode *Node = new TreeNode();
  Node->data = data;
  Node->left = NULL;
  Node->right = NULL;
  return (Node);
}
pair<int, int> sumofsubtree(TreeNode *root) {
  pair<int, int> p = make_pair(1, 0);
  if (root->left) {
    pair<int, int> ptemp = sumofsubtree(root->left);
    p.second += ptemp.first + ptemp.second;
    p.first += ptemp.first;
  }
  if (root->right) {
    pair<int, int> ptemp = sumofsubtree(root->right);
    p.second += ptemp.first + ptemp.second;
    p.first += ptemp.first;
  }
  root->size = p.first;
  return p;
}
int sum = 0;
void distance(TreeNode *root, int target, int distancesum, int n) {
  if (root->data == target) {
    sum = distancesum;
  }
  if (root->left) {
    int tempsum = distancesum - root->left->size + (n - root->left->size);
    distance(root->left, target, tempsum, n);
  }
  if (root->right) {
    int tempsum = distancesum - root->right->size + (n - root->right->size);
    distance(root->right, target, tempsum, n);
  }
}
int main() {
  TreeNode *root = newNode(1);
  root->left = newNode(2);
  root->right = newNode(3);
  root->left->left = newNode(4);
  root->left->right = newNode(5);
  root->right->left = newNode(6);
  root->right->right = newNode(7);
  root->left->left->left = newNode(8);
  root->left->left->right = newNode(9);
  int target = 3;
  pair<int, int> p = sumofsubtree(root);
  int totalnodes = p.first;
  distance(root, target, p.second, totalnodes);
  cout << sum << endl;
  return 0;
}",Sum of distances of all nodes from a given node.
104,Rearrange array such that sum of same indexed elements is atmost K | C ++ program for the above approach ; Function to rearrange array such that sum of similar indexed elements does not exceed K ; Sort the array B [ ] in descending order ; If condition fails ; Print the array ; Driver Code ; Given arrays,"#include <bits/stdc++.h>
using namespace std;
void rearrangeArray(int A[], int B[], int N, int K) {
  sort(B, B + N, greater<int>());
  bool flag = true;
  for (int i = 0; i < N; i++) {
    if (A[i] + B[i] > K) {
      flag = false;
      break;
    }
  }
  if (!flag) {
    cout << ""-1"" << endl;
  } else {
    for (int i = 0; i < N; i++) {
      cout << B[i] << "" "";
    }
  }
}
int main() {
  int A[] = {1, 2, 3, 4, 2};
  int B[] = {1, 2, 3, 1, 1};
  int N = sizeof(A) / sizeof(A[0]);
  int K = 5;
  rearrangeArray(A, B, N, K);
  return 0;
}",Rearrange array such that sum of same indexed elements is atmost K.
105,Count rows with sum exceeding sum of the remaining Matrix | C ++ program to implement the above approach ; Function to count the number of rows whose sum exceeds the sum of elements of the remaining matrix ; To store the result ; Stores the total sum of the matrix elements ; Calculate the total sum ; Traverse to check for each row ; Stores the sum of elements of the current row ; Calculate the sum of elements of the current row ; If sum of current row exceeds the sum of rest of the matrix ; Increase count ; Print the result ; Driver Code ; Given matrix ; Function Call,"#include <bits/stdc++.h>
using namespace std;
#defineN3
#defineM3
    void
    countRows(int mat[M][N]) {
  int count = 0;
  int totalSum = 0;
  for (int i = 0; i < N; i++) {
    for (int j = 0; j < M; j++) {
      totalSum += mat[i][j];
    }
  }
  for (int i = 0; i < N; i++) {
    int currSum = 0;
    for (int j = 0; j < M; j++) {
      currSum += mat[i][j];
    }
    if (currSum > totalSum - currSum)
      count++;
  }
  cout << count;
}
int main() {
  int mat[N][M] = {{2, -1, 5}, {-3, 0, -2}, {5, 1, 2}};
  countRows(mat);
}",Count rows with sum exceeding sum of the remaining Matrix.
106,"Check if array contains contiguous integers with duplicates allowed | C ++ implementation to check whether the array contains a set of contiguous integers ; function to check whether the array contains a set of contiguous integers ; Find maximum and minimum elements . ; There should be at least m elements in array to make them contiguous . ; Create a visited array and initialize false . ; Mark elements as true . ; If any element is not marked , all elements are not contiguous . ; Driver program","#include <bits/stdc++.h>
using namespace std;
bool areElementsContiguous(int arr[], int n) {
  int max = *max_element(arr, arr + n);
  int min = *min_element(arr, arr + n);
  int m = max - min + 1;
  if (m > n)
    return false;
  bool visited[m];
  memset(visited, false, sizeof(visited));
  for (int i = 0; i < n; i++)
    visited[arr[i] - min] = true;
  for (int i = 0; i < m; i++)
    if (visited[i] == false)
      return false;
  return true;
}
int main() {
  int arr[] = {5, 2, 3, 6, 4, 4, 6, 6};
  int n = sizeof(arr) / sizeof(arr[0]);
  if (areElementsContiguous(arr, n))
    cout << ""Yes"";
  else
    cout << ""No"";
  return 0;
}",Check if array contains contiguous integers with duplicates allowed.
107,"Check if array contains contiguous integers with duplicates allowed | C ++ implementation to check whether the array contains a set of contiguous integers ; Function to check whether the array contains a set of contiguous integers ; Storing elements of ' arr [ ] ' in a hash table ' us ' ; as arr [ 0 ] is present in ' us ' ; starting with previous smaller element of arr [ 0 ] ; if ' curr _ ele ' is present in ' us ' ; increment count ; update 'curr_ele"" ; starting with next greater element of arr [ 0 ] ; if ' curr _ ele ' is present in ' us ' ; increment count ; update 'curr_ele"" ; returns true if array contains a set of contiguous integers else returns false ; Driver program to test above","#include <bits/stdc++.h>
using namespace std;
bool areElementsContiguous(int arr[], int n) {
  unordered_set<int> us;
  for (int i = 0; i < n; i++)
    us.insert(arr[i]);
  int count = 1;
  int curr_ele = arr[0] - 1;
  while (us.find(curr_ele) != us.end()) {
    count++;
    curr_ele--;
  }
  curr_ele = arr[0] + 1;
  while (us.find(curr_ele) != us.end()) {
    count++;
    curr_ele++;
  }
  return (count == (int)(us.size()));
}
int main() {
  int arr[] = {5, 2, 3, 6, 4, 4, 6, 6};
  int n = sizeof(arr) / sizeof(arr[0]);
  if (areElementsContiguous(arr, n))
    cout << ""Yes"";
  else
    cout << ""No"";
  return 0;
}",Check if array contains contiguous integers with duplicates allowed.
108,"Longest subarray not having more than K distinct elements | CPP program to find longest subarray with k or less distinct elements . ; function to print the longest sub - array ; mark the element visited ; if its visited first time , then increase the counter of distinct elements by 1 ; When the counter of distinct elements increases from k , then reduce it to k ; from the left , reduce the number of time of visit ; if the reduced visited time element is not present in further segment then decrease the count of distinct elements ; increase the subsegment mark ; check length of longest sub - segment when greater then previous best then change it ; print the longest sub - segment ; driver program to test the above function","#include <bits/stdc++.h>
using namespace std;
void longest(int a[], int n, int k) {
  unordered_map<int, int> freq;
  int start = 0, end = 0, now = 0, l = 0;
  for (int i = 0; i < n; i++) {
    freq[a[i]]++;
    if (freq[a[i]] == 1)
      now++;
    while (now > k) {
      freq[a[l]]--;
      if (freq[a[l]] == 0)
        now--;
      l++;
    }
    if (i - l + 1 >= end - start + 1)
      end = i, start = l;
  }
  for (int i = start; i <= end; i++)
    cout << a[i] << "" "";
}
int main() {
  int a[] = {6, 5, 1, 2, 3, 2, 1, 4, 5};
  int n = sizeof(a) / sizeof(a[0]);
  int k = 3;
  longest(a, n, k);
  return 0;
}",Longest subarray not having more than K distinct elements.
109,Check if any K ranges overlap at any point | C ++ implementation of the approach ; Comparator to sort the vector of pairs ; Function that returns true if any k segments overlap at any point ; Starting points are marked by - 1 and ending points by + 1 ; Sort the vector by first element ; Stack to store the overlaps ; Get the current element ; If it is the starting point ; Push it in the stack ; It is the ending point ; Pop an element from stack ; If more than k ranges overlap ; Driver code,"#include <bits/stdc++.h>
using namespace std;
bool sortby(const pair<int, int> &a, const pair<int, int> &b) {
  if (a.first != b.first)
    return a.first < b.first;
  return (a.second < b.second);
}
bool kOverlap(vector<pair<int, int>> pairs, int k) {
  vector<pair<int, int>> vec;
  for (int i = 0; i < pairs.size(); i++) {
    vec.push_back({pairs[i].first, -1});
    vec.push_back({pairs[i].second, +1});
  }
  sort(vec.begin(), vec.end());
  stack<pair<int, int>> st;
  for (int i = 0; i < vec.size(); i++) {
    pair<int, int> cur = vec[i];
    if (cur.second == -1) {
      st.push(cur);
    } else {
      st.pop();
    }
    if (st.size() >= k) {
      return true;
    }
  }
  return false;
}
int main() {
  vector<pair<int, int>> pairs;
  pairs.push_back(make_pair(1, 3));
  pairs.push_back(make_pair(2, 4));
  pairs.push_back(make_pair(3, 5));
  pairs.push_back(make_pair(7, 10));
  int n = pairs.size(), k = 3;
  if (kOverlap(pairs, k))
    cout << ""Yes"";
  else
    cout << ""No"";
  return 0;
}",Check if any K ranges overlap at any point.
110,"Find smallest range containing elements from k lists | C ++ program to finds out smallest range that includes elements from each of the given sorted lists . ; array for storing the current index of list i ; This function takes an k sorted lists in the form of 2D array as an argument . It finds out smallest range that includes elements from each of the k lists . ; initializing to 0 index ; ; for maintaining the index of list containing the minimum element ; iterating over all the list ; if every element of list [ i ] is traversed then break the loop ; find minimum value among all the list elements pointing by the ptr [ ] array ; update the index of the list ; find maximum value among all the list elements pointing by the ptr [ ] array ; if any list exhaust we will not get any better answer , so break the while loop ; updating the minrange ; Driver program to test above function","#include <bits/stdc++.h>
using namespace std;
#defineN5 int ptr[501];
void findSmallestRange(int arr[][N], int n, int k) {
  int i, minval, maxval, minrange, minel, maxel, flag, minind;
  for (i = 0; i <= k; i++)
    ptr[i] = 0;
  minrange = INT_MAX;
  while (1) {
    minind = -1;
    minval = INT_MAX;
    maxval = INT_MIN;
    flag = 0;
    for (i = 0; i < k; i++) {
      if (ptr[i] == n) {
        flag = 1;
        break;
      }
      if (ptr[i] < n && arr[i][ptr[i]] < minval) {
        minind = i;
        minval = arr[i][ptr[i]];
      }
      if (ptr[i] < n && arr[i][ptr[i]] > maxval) {
        maxval = arr[i][ptr[i]];
      }
    }
    if (flag)
      break;
    ptr[minind]++;
    if ((maxval - minval) < minrange) {
      minel = minval;
      maxel = maxval;
      minrange = maxel - minel;
    }
  }
  printf(""The smallest range is [%d, %d]\n"", minel, maxel);
}
int main() {
  int arr[][N] = {{4, 7, 9, 12, 15}, {0, 8, 10, 14, 20}, {6, 12, 16, 30, 50}};
  int k = sizeof(arr) / sizeof(arr[0]);
  findSmallestRange(arr, N, k);
  return 0;
}",Find smallest range containing elements from k lists.
111,"Find largest d in array such that a + b + c = d | CPP Program to find the largest d such that d = a + b + c ; function to find largest d ; sort the array in ascending order ; iterating from backwards to find the required largest d ; since all four a , b , c , d should be distinct ; if the current combination of j , k , l in the set is equal to S [ i ] return this value as this would be the largest d since we are iterating in descending order ; Driver Code","#include <bits/stdc++.h>
using namespace std;
int findLargestd(int S[], int n) {
  bool found = false;
  sort(S, S + n);
  for (int i = n - 1; i >= 0; i--) {
    for (int j = 0; j < n; j++) {
      if (i == j)
        continue;
      for (int k = j + 1; k < n; k++) {
        if (i == k)
          continue;
        for (int l = k + 1; l < n; l++) {
          if (i == l)
            continue;
          if (S[i] == S[j] + S[k] + S[l]) {
            found = true;
            return S[i];
          }
        }
      }
    }
  }
  if (found == false)
    return INT_MIN;
}
int main() {
  int S[] = {2, 3, 5, 7, 12};
  int n = sizeof(S) / sizeof(S[0]);
  int ans = findLargestd(S, n);
  if (ans == INT_MIN)
    cout << ""No Solution"" << endl;
  else
    cout << ""Largest d such that a + b + ""
         << ""c = d is "" << ans << endl;
  return 0;
}",Find largest d in array such that a + b + c = d.
112,"Find largest d in array such that a + b + c = d | A hashing based CPP program to find largest d such that a + b + c = d . ; The function finds four elements with given sum X ; Store sums ( a + b ) of all pairs ( a , b ) in a hash table ; Traverse through all pairs and find ( d - c ) is present in hash table ; If d - c is present in hash table , ; Making sure that all elements are distinct array elements and an element is not considered more than once . ; Driver program to test above function","#include <bits/stdc++.h>
using namespace std;
int findFourElements(int arr[], int n) {
  unordered_map<int, pair<int, int>> mp;
  for (int i = 0; i < n - 1; i++)
    for (int j = i + 1; j < n; j++)
      mp[arr[i] + arr[j]] = {i, j};
  int d = INT_MIN;
  for (int i = 0; i < n - 1; i++) {
    for (int j = i + 1; j < n; j++) {
      int abs_diff = abs(arr[i] - arr[j]);
      if (mp.find(abs_diff) != mp.end()) {
        pair<int, int> p = mp[abs_diff];
        if (p.first != i && p.first != j && p.second != i && p.second != j)
          d = max(d, max(arr[i], arr[j]));
      }
    }
  }
  return d;
}
int main() {
  int arr[] = {2, 3, 5, 7, 12};
  int n = sizeof(arr) / sizeof(arr[0]);
  int res = findFourElements(arr, n);
  if (res == INT_MIN)
    cout << ""No Solution."";
  else
    cout << res;
  return 0;
}",Find largest d in array such that a + b + c = d.
113,Maximize count of elements that can be selected having minimum difference between their sum and K | C ++ implementation of the above approach ; Function to count maximum number of elements that can be selected ; Sort the array ; Traverse the array ; Add current element to the sum ; IF sum exceeds k ; Increment count ; Return the count ; Driver Code ; Function call,"#include <bits/stdc++.h>
using namespace std;
int CountMaximum(int arr[], int n, int k) {
  sort(arr, arr + n);
  int sum = 0, count = 0;
  for (int i = 0; i < n; i++) {
    sum += arr[i];
    if (sum > k)
      break;
    count++;
  }
  return count;
}
int main() {
  int arr[] = {30, 30, 10, 10};
  int n = sizeof(arr) / sizeof(arr[0]);
  int k = 50;
  cout << CountMaximum(arr, n, k);
  return 0;
}",Maximize count of elements that can be selected having minimum difference between their sum and K.
114,Program for array rotation | C ++ program to rotate an array by d elements ; Function to left Rotate arr [ ] of size n by 1 ; Function to left rotate arr [ ] of size n by d ; utility function to print an array ; Driver program to test above functions,"#include <bits/stdc++.h>
using namespace std;
void leftRotatebyOne(int arr[], int n) {
  int temp = arr[0], i;
  for (i = 0; i < n - 1; i++)
    arr[i] = arr[i + 1];
  arr[n - 1] = temp;
}
void leftRotate(int arr[], int d, int n) {
  for (int i = 0; i < d; i++)
    leftRotatebyOne(arr, n);
}
void printArray(int arr[], int n) {
  for (int i = 0; i < n; i++)
    cout << arr[i] << "" "";
}
int main() {
  int arr[] = {1, 2, 3, 4, 5, 6, 7};
  int n = sizeof(arr) / sizeof(arr[0]);
  leftRotate(arr, 2, n);
  printArray(arr, n);
  return 0;
}",Program for array rotation.
115,Sort the array in a given index range | C ++ program to sort the array in a given index range ; Function to sort the elements of the array from index a to index b ; Variables to store start and end of the index range ; Temporary array ; Sort the temporary array ; Modifying original array with temporary array elements ; Print the modified array ; Driver code ; length of the array,"#include <bits/stdc++.h>
using namespace std;
void partSort(int arr[], int N, int a, int b) {
  int l = min(a, b);
  int r = max(a, b);
  int temp[r - l + 1];
  int j = 0;
  for (int i = l; i <= r; i++) {
    temp[j] = arr[i];
    j++;
  }
  sort(temp, temp + r - l + 1);
  j = 0;
  for (int i = l; i <= r; i++) {
    arr[i] = temp[j];
    j++;
  }
  for (int i = 0; i < N; i++) {
    cout << arr[i] << "" "";
  }
}
int main() {
  int arr[] = {7, 8, 4, 5, 2};
  int a = 1;
  int b = 4;
  int N = sizeof(arr) / sizeof(arr[0]);
  partSort(arr, N, a, b);
  return 0;
}",Sort the array in a given index range.
116,"Sorting rows of matrix in descending order followed by columns in ascending order | C ++ implementation to sort the rows of matrix in descending order followed by sorting the columns in ascending order ; function to sort each row of the matrix according to the order specified by descending . ; function to find transpose of the matrix ; swapping element at index ( i , j ) by element at index ( j , i ) ; function to sort the matrix row - wise and column - wise ; sort rows of mat [ ] [ ] in descending order ; get transpose of mat [ ] [ ] ; again sort rows of mat [ ] [ ] in ascending order . ; again get transpose of mat [ ] [ ] ; function to print the matrix ; Driver code","#include <bits/stdc++.h>
using namespace std;
#defineMAX_SIZE10 void sortByRow(int mat[][MAX_SIZE], int n, bool descending) {
  for (int i = 0; i < n; i++) {
    if (descending == true)
      sort(mat[i], mat[i] + n, greater<int>());
    else
      sort(mat[i], mat[i] + n);
  }
}
void transpose(int mat[][MAX_SIZE], int n) {
  for (int i = 0; i < n; i++)
    for (int j = i + 1; j < n; j++)
      swap(mat[i][j], mat[j][i]);
}
void sortMatRowAndColWise(int mat[][MAX_SIZE], int n) {
  sortByRow(mat, n, true);
  transpose(mat, n);
  sortByRow(mat, n, false);
  transpose(mat, n);
}
void printMat(int mat[][MAX_SIZE], int n) {
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < n; j++)
      cout << mat[i][j] << "" "";
    cout << endl;
  }
}
int main() {
  int n = 3;
  int mat[n][MAX_SIZE] = {{3, 2, 1}, {9, 8, 7}, {6, 5, 4}};
  cout << ""Original Matrix:\n"";
  printMat(mat, n);
  sortMatRowAndColWise(mat, n);
  cout << ""MatrixAfterSorting:"";
  printMat(mat, n);
  return 0;
}",Sorting rows of matrix in descending order followed by columns in ascending order.
117,"Move all zeroes to end of array | A C ++ program to move all zeroes at the end of array ; Function which pushes all zeros to end of an array . ; Count of non - zero elements ; Traverse the array . If element encountered is non - zero , then replace the element at index ' count ' with this element ; here count is ; incremented Now all non - zero elements have been shifted to front and ' count ' is set as index of first 0. Make all elements 0 from count to end . ; Driver program to test above function","#include <iostream>
using namespace std;
void pushZerosToEnd(int arr[], int n) {
  int count = 0;
  for (int i = 0; i < n; i++)
    if (arr[i] != 0)
      arr[count++] = arr[i];
  while (count < n)
    arr[count++] = 0;
}
int main() {
  int arr[] = {1, 9, 8, 4, 0, 0, 2, 7, 0, 6, 0, 9};
  int n = sizeof(arr) / sizeof(arr[0]);
  pushZerosToEnd(arr, n);
  cout << ""Array after pushing all zeros to end of array :\n"";
  for (int i = 0; i < n; i++)
    cout << arr[i] << "" "";
  return 0;
}",Move all zeroes to end of array.
118,"Move all zeroes to end of array | Set | C ++ implementation to move all zeroes at the end of array ; function to move all zeroes at the end of array ; Count of non - zero elements ; Traverse the array . If arr [ i ] is non - zero , then swap the element at index ' count ' with the element at index ' i ' ; function to print the array elements ; Driver program to test above","#include <iostream>
using namespace std;
void moveZerosToEnd(int arr[], int n) {
  int count = 0;
  for (int i = 0; i < n; i++)
    if (arr[i] != 0)
      swap(arr[count++], arr[i]);
}
void printArray(int arr[], int n) {
  for (int i = 0; i < n; i++)
    cout << arr[i] << "" "";
}
int main() {
  int arr[] = {0, 1, 9, 8, 4, 0, 0, 2, 7, 0, 6, 0, 9};
  int n = sizeof(arr) / sizeof(arr[0]);
  cout << ""Original array: "";
  printArray(arr, n);
  moveZerosToEnd(arr, n);
  cout << ""Modifiedarray:"" printArray(arr, n);
  return 0;
}",Move all zeroes to end of array.
119,"Double the first element and move zero to end | C ++ implementation to rearrange the array elements after modification ; function which pushes all zeros to end of an array . ; Count of non - zero elements ; Traverse the array . If element encountered is non - zero , then replace the element at index ' count ' with this element ; here count is incremented ; Now all non - zero elements have been shifted to front and ' count ' is set as index of first 0. Make all elements 0 from count to end . ; function to rearrange the array elements after modification ; if ' arr [ ] ' contains a single element only ; traverse the array ; if true , perform the required modification ; double current index value ; put 0 in the next index ; increment by 1 so as to move two indexes ahead during loop iteration ; push all the zeros at the end of ' arr [ ] ' ; function to print the array elements ; Driver program to test above","#include <bits/stdc++.h>
using namespace std;
void pushZerosToEnd(int arr[], int n) {
  int count = 0;
  for (int i = 0; i < n; i++)
    if (arr[i] != 0)
      arr[count++] = arr[i];
  while (count < n)
    arr[count++] = 0;
}
void modifyAndRearrangeArr(int arr[], int n) {
  if (n == 1)
    return;
  for (int i = 0; i < n - 1; i++) {
    if ((arr[i] != 0) && (arr[i] == arr[i + 1])) {
      arr[i] = 2 * arr[i];
      arr[i + 1] = 0;
      i++;
    }
  }
  pushZerosToEnd(arr, n);
}
void printArray(int arr[], int n) {
  for (int i = 0; i < n; i++)
    cout << arr[i] << "" "";
}
int main() {
  int arr[] = {0, 2, 2, 2, 0, 6, 6, 0, 0, 8};
  int n = sizeof(arr) / sizeof(arr[0]);
  cout << ""Original array: "";
  printArray(arr, n);
  modifyAndRearrangeArr(arr, n);
  cout << ""Modifiedarray:"" printArray(arr, n);
  return 0;
}",Double the first element and move zero to end.
120,"Double the first element and move zero to end | Utility Function For Swaping Two Element Of An Array ; shift all zero to left side of an array ; Maintain last index with positive value ; If Element is non - zero ; swap current index , with lastSeen non - zero ; next element will be last seen non - zero","void swap(int &a, int &b) { a = b + a - (b = a); }
void shiftAllZeroToLeft(int array[], int n) {
  int lastSeenNonZero = 0;
  for (index = 0; index < n; index++) {
    if (array[index] != 0) {
      swap(array[index], array[lastSeenNonZero]);
      lastSeenNonZero++;
    }
  }
}",Double the first element and move zero to end.
121,"Rearrange positive and negative numbers with constant extra space | C ++ program to Rearrange positive and negative numbers in a array ; A utility function to print an array of size n ; Function to Rearrange positive and negative numbers in a array ; if current element is positive do nothing ; if current element is negative , shift positive elements of arr [ 0. . i - 1 ] , to one position to their right ; Put negative element at its right position ; Driver program to test above functions","#include <stdio.h>
void printArray(int arr[], int n) {
  for (int i = 0; i < n; i++)
    printf(""%d "", arr[i]);
  printf(""\n"");
}
void RearrangePosNeg(int arr[], int n) {
  int key, j;
  for (int i = 1; i < n; i++) {
    key = arr[i];
    if (key > 0)
      continue;
    j = i - 1;
    while (j >= 0 && arr[j] > 0) {
      arr[j + 1] = arr[j];
      j = j - 1;
    }
    arr[j + 1] = key;
  }
}
int main() {
  int arr[] = {-12, 11, -13, -5, 6, -7, 5, -3, -6};
  int n = sizeof(arr) / sizeof(arr[0]);
  RearrangePosNeg(arr, n);
  printArray(arr, n);
  return 0;
}",Rearrange positive and negative numbers with constant extra space.
122,"Rearrange positive and negative numbers with constant extra space | C ++ program to Rearrange positive and negative numbers in a array ; Function to print an array ; Function to reverse an array . An array can be reversed in O ( n ) time and O ( 1 ) space . ; Merges two subarrays of arr [ ] . First subarray is arr [ l . . m ] Second subarray is arr [ m + 1. . r ] ; Initial index of 1 st subarray ; Initial index of IInd ; arr [ i . . m ] is positive ; arr [ j . . r ] is positive reverse positive part of left sub - array ( arr [ i . . m ] ) ; reverse negative part of right sub - array ( arr [ m + 1. . j - 1 ] ) ; reverse arr [ i . . j - 1 ] ; Function to Rearrange positive and negative numbers in a array ; Same as ( l + r ) / 2 , but avoids overflow for large l and h ; Sort first and second halves ; Driver code","#include <bits/stdc++.h>
using namespace std;
void printArray(int A[], int size) {
  for (int i = 0; i < size; i++)
    cout << A[i] << "" "";
  cout << endl;
}
void reverse(int arr[], int l, int r) {
  if (l < r) {
    swap(arr[l], arr[r]);
    reverse(arr, ++l, --r);
  }
}
void merge(int arr[], int l, int m, int r) {
  int i = l;
  int j = m + 1;
  while (i <= m && arr[i] < 0)
    i++;
  while (j <= r && arr[j] < 0)
    j++;
  reverse(arr, i, m);
  reverse(arr, m + 1, j - 1);
  reverse(arr, i, j - 1);
}
void RearrangePosNeg(int arr[], int l, int r) {
  if (l < r) {
    int m = l + (r - l) / 2;
    RearrangePosNeg(arr, l, m);
    RearrangePosNeg(arr, m + 1, r);
    merge(arr, l, m, r);
  }
}
int main() {
  int arr[] = {-12, 11, -13, -5, 6, -7, 5, -3, -6};
  int arr_size = sizeof(arr) / sizeof(arr[0]);
  RearrangePosNeg(arr, 0, arr_size - 1);
  printArray(arr, arr_size);
  return 0;
}",Rearrange positive and negative numbers with constant extra space.
123,Rearrange positive and negative numbers with constant extra space | C ++ implementation of the above approach ; Loop until arr [ i ] < 0 and still inside the array ; Loop until arr [ j ] > 0 and still inside the array ; if i is less than j ; Driver Code,"#include <iostream>
using namespace std;
void RearrangePosNeg(int arr[], int n) {
  int i = 0;
  int j = n - 1;
  while (true) {
    while (arr[i] < 0 && i < n)
      i++;
    while (arr[j] > 0 && j >= 0)
      j--;
    if (i < j) {
      int temp = arr[i];
      arr[i] = arr[j];
      arr[j] = temp;
    } else
      break;
  }
}
int main() {
  int arr[] = {-12, 11, -13, -5, 6, -7, 5, -3, -6};
  int n = sizeof(arr) / sizeof(arr[0]);
  RearrangePosNeg(arr, n);
  for (int i = 0; i < n; i++)
    cout << arr[i] << "" "";
  return 0;
}",Rearrange positive and negative numbers with constant extra space.
124,"Find the player to be able to replace the last element that can be replaced by its divisors | C ++ program for the above approach ; Function to find the winner of the game played based on given conditions ; A wins if size of array is odd ; Otherwise , B wins ; Driver Code ; Input array ; Size of the array","#include <bits/stdc++.h>
using namespace std;
void winner(int arr[], int N) {
  if (N % 2 == 1) {
    cout << ""A"";
  } else {
    cout << ""B"";
  }
}
int main() {
  int arr[] = {24, 45, 45, 24};
  int N = sizeof(arr) / sizeof(arr[0]);
  winner(arr, N);
}",Find the player to be able to replace the last element that can be replaced by its divisors.
125,"Queries to calculate sum of array elements present at every Yth index starting from the index X | C ++ program for the above approach ; Function to sum of arr [ x ] + arr [ x + y ] + arr [ x + 2 * y ] + ... for all possible values of X and Y , where Y is less than or equal to sqrt ( N ) . ; Iterate over all possible values of X ; Precompute for all possible values of an expression such that y <= sqrt ( N ) ; If i + j less than N ; Update dp [ i ] [ j ] ; Update dp [ i ] [ j ] ; Function to Find the sum of arr [ x ] + arr [ x + y ] + arr [ x + 2 * y ] + ... for all queries ; dp [ x ] [ y ] : Stores sum of arr [ x ] + arr [ x + y ] + arr [ x + 2 * y ] + ... ; Traverse the query array , Q [ ] [ ] ; If y is less than or equal to sqrt ( N ) ; Stores the sum of arr [ x ] + arr [ x + y ] + arr [ x + 2 * y ] + ... ; Traverse the array , arr [ ] ; Update sum ; Update x ; Driver Code","#include <bits/stdc++.h>
using namespace std;
const int sz = 20;
const int sqr = int(sqrt(sz)) + 1;
void precomputeExpressionForAllVal(int arr[], int N, int dp[sz][sqr]) {
  for (int i = N - 1; i >= 0; i--) {
    for (int j = 1; j <= sqrt(N); j++) {
      if (i + j < N) {
        dp[i][j] = arr[i] + dp[i + j][j];
      } else {
        dp[i][j] = arr[i];
      }
    }
  }
}
int querySum(int arr[], int N, int Q[][2], int M) {
  int dp[sz][sqr];
  precomputeExpressionForAllVal(arr, N, dp);
  for (int i = 0; i < M; i++) {
    int x = Q[i][0];
    int y = Q[i][1];
    if (y <= sqrt(N)) {
      cout << dp[x][y] << "" "";
      continue;
    }
    int sum = 0;
    while (x < N) {
      sum += arr[x];
      x += y;
    }
    cout << sum << "" "";
  }
}
int main() {
  int arr[] = {1, 2, 7, 5, 4};
  int Q[][2] = {{2, 1}, {3, 2}};
  int N = sizeof(arr) / sizeof(arr[0]);
  int M = sizeof(Q) / sizeof(Q[0]);
  querySum(arr, N, Q, M);
  return 0;
}",Queries to calculate sum of array elements present at every Yth index starting from the index X.
126,"Find all elements in array which have at | Simple C ++ program to find all elements in array which have at - least two greater elements itself . ; Pick elements one by one and count greater elements . If count is more than 2 , print that element . ; Driver code","#include <bits/stdc++.h>
using namespace std;
void findElements(int arr[], int n) {
  for (int i = 0; i < n; i++) {
    int count = 0;
    for (int j = 0; j < n; j++)
      if (arr[j] > arr[i])
        count++;
    if (count >= 2)
      cout << arr[i] << "" "";
  }
}
int main() {
  int arr[] = {2, -6, 3, 5, 1};
  int n = sizeof(arr) / sizeof(arr[0]);
  findElements(arr, n);
  return 0;
}",Find all elements in array which have at.
127,Find all elements in array which have at | Sorting based C ++ program to find all elements in array which have atleast two greater elements itself . ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
void findElements(int arr[], int n) {
  sort(arr, arr + n);
  for (int i = 0; i < n - 2; i++)
    cout << arr[i] << "" "";
}
int main() {
  int arr[] = {2, -6, 3, 5, 1};
  int n = sizeof(arr) / sizeof(arr[0]);
  findElements(arr, n);
  return 0;
}",Find all elements in array which have at.
128,Find all elements in array which have at | C ++ program to find all elements in array which have atleast two greater elements itself . ; If current element is smaller than first then update both first and second ; If arr [ i ] is in between first and second then update second ; Driver code,"#include <bits/stdc++.h>
using namespace std;
void findElements(int arr[], int n) {
  int first = INT_MIN, second = INT_MIN;
  for (int i = 0; i < n; i++) {
    if (arr[i] > first) {
      second = first;
      first = arr[i];
    } else if (arr[i] > second)
      second = arr[i];
  }
  for (int i = 0; i < n; i++)
    if (arr[i] < second)
      cout << arr[i] << "" "";
}
int main() {
  int arr[] = {2, -6, 3, 5, 1};
  int n = sizeof(arr) / sizeof(arr[0]);
  findElements(arr, n);
  return 0;
}",Find all elements in array which have at.
129,"Minimize count of increments of each element of subarrays required to make Array non | C ++ Program to implement the above approach ; Function to find the minimum number of operations required to make the array non - increasing ; Stores the count of required operations ; If arr [ i ] > arr [ i + 1 ] , no increments required . Otherwise , add their difference to the answer ; Return the result res ; Driver Code","#include <bits/stdc++.h>
using namespace std;
int getMinOps(int arr[], int n) {
  int res = 0;
  for (int i = 0; i < n - 1; i++) {
    res += max(arr[i + 1] - arr[i], 0);
  }
  return res;
}
int main() {
  int arr[] = {1, 3, 4, 1, 2};
  int N = sizeof(arr) / sizeof(arr[0]);
  cout << getMinOps(arr, N);
}",Minimize count of increments of each element of subarrays required to make Array non.
130,Find the smallest missing number | C ++ program to find the smallest elements missing in a sorted array . ; function that returns smallest elements missing in a sorted array . ; Left half has all elements from 0 to mid ; Driver code,"#include <bits/stdc++.h>
using namespace std;
int findFirstMissing(int array[], int start, int end) {
  if (start > end)
    return end + 1;
  if (start != array[start])
    return start;
  int mid = (start + end) / 2;
  if (array[mid] == mid)
    return findFirstMissing(array, mid + 1, end);
  return findFirstMissing(array, start, mid);
}
int main() {
  int arr[] = {0, 1, 2, 3, 4, 5, 6, 7, 10};
  int n = sizeof(arr) / sizeof(arr[0]);
  cout << ""Smallest missing element is "" << findFirstMissing(arr, 0, n - 1)
       << endl;
}",Find the smallest missing number.
131,"Find the smallest missing number | C ++ program for the above approach ; Program to find Smallest Missing in Sorted Array ; Check if 0 is missing in the array ; Check is all numbers 0 to n - 1 are prsent in array ; Program to find missing element ; * Index matches with value at that index , means missing element cannot be upto that po ; Driver program to test the above function ; Function Call","#include <bits/stdc++.h>
using namespace std;
int findSmallestMissinginSortedArray(vector<int> arr) {
  if (arr[0] != 0)
    return 0;
  if (arr[arr.size() - 1] == arr.size() - 1)
    return arr.size();
  int first = arr[0];
  return findFirstMissing(arr, 0, arr.size() - 1, first);
}
int findFirstMissing(vector<int> arr, int start, int end, int first) {
  if (start < end) {
    int mid = (start + end) / 2;
    if (arr[mid] != mid + first)
      return findFirstMissing(arr, start, mid, first);
    else
      return findFirstMissing(arr, mid + 1, end, first);
  }
  return start + first;
}
int main() {
  vector<int> arr = {0, 1, 2, 3, 4, 5, 7};
  int n = arr.size();
  cout << ""First Missing element is : ""
       << findSmallestMissinginSortedArray(arr);
}",Find the smallest missing number.
132,Maximum sum such that no two elements are adjacent | c ++ program for the above approach ; Function to return max sum such that no two elements are adjacent ; current max excluding i ; current max including i ; return max of incl and excl ; Driver program to test above functions,"#include <bits/stdc++.h>
using namespace std;
int FindMaxSum(vector<int> arr, int n) {
  int incl = arr[0];
  int excl = 0;
  int excl_new;
  int i;
  for (i = 1; i < n; i++) {
    excl_new = (incl > excl) ? incl : excl;
    incl = excl + arr[i];
    excl = excl_new;
  }
  return ((incl > excl) ? incl : excl);
}
int main() {
  vector<int> arr = {5, 5, 10, 100, 10, 5};
  cout << FindMaxSum(arr, arr.size());
}",Maximum sum such that no two elements are adjacent.
133,"Minimum steps to convert all top left to bottom right paths in Matrix as palindrome | Set 2 | C ++ program for the above approach ; Function for counting minimum number of changes ; Distance of elements from ( 0 , 0 ) will is i range [ 0 , n + m - 2 ] ; Store frequencies of [ 0 , 9 ] at distance i ; Initialize frequencies as 0 ; Count frequencies of [ 0 , 9 ] ; Increment frequency of value matrix [ i ] [ j ] at distance i + j ; Find value with max frequency and count total cells at distance i from front end and rear end ; Change all values to the value with max frequency ; Return the answer ; Driver Code ; Given Matrix ; Function Call","#include <bits/stdc++.h>
using namespace std;
#defineN7 int countChanges(int matrix[][N], int n, int m) {
  int dist = n + m - 1;
  int freq[dist][10];
  for (int i = 0; i < dist; i++) {
    for (int j = 0; j < 10; j++)
      freq[i][j] = 0;
  }
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < m; j++) {
      freq[i + j][matrix[i][j]]++;
    }
  }
  int min_changes_sum = 0;
  for (int i = 0; i < dist / 2; i++) {
    int maximum = 0;
    int total_values = 0;
    for (int j = 0; j < 10; j++) {
      maximum = max(maximum, freq[i][j] + freq[n + m - 2 - i][j]);
      total_values += (freq[i][j] + freq[n + m - 2 - i][j]);
    }
    min_changes_sum += (total_values - maximum);
  }
  return min_changes_sum;
}
int main() {
  int mat[][N] = {{1, 2}, {3, 5}};
  cout << countChanges(mat, 2, 2);
  return 0;
}",Minimum steps to convert all top left to bottom right paths in Matrix as palindrome.
134,"Sparse Table | C ++ program to do range minimum query using sparse table ; lookup [ i ] [ j ] is going to store minimum value in arr [ i . . j ] . Ideally lookup table size should not be fixed and should be determined using n Log n . It is kept constant to keep code simple . ; Fills lookup array lookup [ ] [ ] in bottom up manner . ; Initialize M for the intervals with length 1 ; Compute values from smaller to bigger intervals ; Compute minimum value for all intervals with size 2 ^ j ; For arr [ 2 ] [ 10 ] , we compare arr [ lookup [ 0 ] [ 7 ] ] and arr [ lookup [ 3 ] [ 10 ] ] ; Returns minimum of arr [ L . . R ] ; Find highest power of 2 that is smaller than or equal to count of elements in given range . For [ 2 , 10 ] , j = 3 ; Compute minimum of last 2 ^ j elements with first 2 ^ j elements in range . For [ 2 , 10 ] , we compare arr [ lookup [ 0 ] [ 3 ] ] and arr [ lookup [ 3 ] [ 3 ] ] , ; Driver program","#include <bits/stdc++.h>
using namespace std;
#defineMAX500 int lookup[MAX][MAX];
void buildSparseTable(int arr[], int n) {
  for (int i = 0; i < n; i++)
    lookup[i][0] = arr[i];
  for (int j = 1; (1 << j) <= n; j++) {
    for (int i = 0; (i + (1 << j) - 1) < n; i++) {
      if (lookup[i][j - 1] < lookup[i + (1 << (j - 1))][j - 1])
        lookup[i][j] = lookup[i][j - 1];
      else
        lookup[i][j] = lookup[i + (1 << (j - 1))][j - 1];
    }
  }
}
int query(int L, int R) {
  int j = (int)log2(R - L + 1);
  if (lookup[L][j] <= lookup[R - (1 << j) + 1][j])
    return lookup[L][j];
  else
    return lookup[R - (1 << j) + 1][j];
}
int main() {
  int a[] = {7, 2, 3, 0, 5, 10, 3, 12, 18};
  int n = sizeof(a) / sizeof(a[0]);
  buildSparseTable(a, n);
  cout << query(0, 4) << endl;
  cout << query(4, 7) << endl;
  cout << query(7, 8) << endl;
  return 0;
}",Sparse Table.
135,"Sparse Table | C ++ program to do range minimum query using sparse table ; lookup [ i ] [ j ] is going to store GCD of arr [ i . . j ] . Ideally lookup table size should not be fixed and should be determined using n Log n . It is kept constant to keep code simple . ; it builds sparse table . ; GCD of single element is element itself ; Build sparse table ; Returns GCD of arr [ L . . R ] ; Find highest power of 2 that is smaller than or equal to count of elements in given range . For [ 2 , 10 ] , j = 3 ; Compute GCD of last 2 ^ j elements with first 2 ^ j elements in range . For [ 2 , 10 ] , we find GCD of arr [ lookup [ 0 ] [ 3 ] ] and arr [ lookup [ 3 ] [ 3 ] ] , ; Driver program","#include <bits/stdc++.h>
using namespace std;
#defineMAX500 int table[MAX][MAX];
void buildSparseTable(int arr[], int n) {
  for (int i = 0; i < n; i++)
    table[i][0] = arr[i];
  for (int j = 1; j <= n; j++)
    for (int i = 0; i <= n - (1 << j); i++)
      table[i][j] = __gcd(table[i][j - 1], table[i + (1 << (j - 1))][j - 1]);
}
int query(int L, int R) {
  int j = (int)log2(R - L + 1);
  return __gcd(table[L][j], table[R - (1 << j) + 1][j]);
}
int main() {
  int a[] = {7, 2, 3, 0, 5, 10, 3, 12, 18};
  int n = sizeof(a) / sizeof(a[0]);
  buildSparseTable(a, n);
  cout << query(0, 2) << endl;
  cout << query(1, 3) << endl;
  cout << query(4, 5) << endl;
  return 0;
}",Sparse Table.
136,Lexicographically smallest array after at | C ++ program to find lexicographically minimum value after k swaps . ; Modifies arr [ 0. . n - 1 ] to lexicographically smallest with k swaps . ; Set the position where we want to put the smallest integer ; If we exceed the Max swaps then terminate the loop ; Find the minimum value from i + 1 to max k or n ; Swap the elements from Minimum position we found till now to the i index ; Set the final value after swapping pos - i elements ; Driver code ; Function calling ; Print the final Array,"#include <bits/stdc++.h>
using namespace std;
void minimizeWithKSwaps(int arr[], int n, int k) {
  for (int i = 0; i < n - 1 && k > 0; ++i) {
    int pos = i;
    for (int j = i + 1; j < n; ++j) {
      if (j - i > k)
        break;
      if (arr[j] < arr[pos])
        pos = j;
    }
    for (int j = pos; j > i; --j)
      swap(arr[j], arr[j - 1]);
    k -= pos - i;
  }
}
int main() {
  int arr[] = {7, 6, 9, 2, 1};
  int n = sizeof(arr) / sizeof(arr[0]);
  int k = 3;
  minimizeWithKSwaps(arr, n, k);
  for (int i = 0; i < n; ++i)
    cout << arr[i] << "" "";
}",Lexicographically smallest array after at.
137,Find maximum average subarray of k length | C ++ program to find maximum average subarray of given length . ; Returns beginning index of maximum average subarray of length ' k ' ; Check if ' k ' is valid ; Create and fill array to store cumulative sum . csum [ i ] stores sum of arr [ 0 ] to arr [ i ] ; Initialize max_sm as sum of first subarray ; Find sum of other subarrays and update max_sum if required . ; To avoid memory leak ; Return starting index ; Driver program,"#include <bits/stdc++.h>
using namespace std;
int findMaxAverage(int arr[], int n, int k) {
  if (k > n)
    return -1;
  int *csum = new int[n];
  csum[0] = arr[0];
  for (int i = 1; i < n; i++)
    csum[i] = csum[i - 1] + arr[i];
  int max_sum = csum[k - 1], max_end = k - 1;
  for (int i = k; i < n; i++) {
    int curr_sum = csum[i] - csum[i - k];
    if (curr_sum > max_sum) {
      max_sum = curr_sum;
      max_end = i;
    }
  }
  delete[] csum;
  return max_end - k + 1;
}
int main() {
  int arr[] = {1, 12, -5, -6, 50, 3};
  int k = 4;
  int n = sizeof(arr) / sizeof(arr[0]);
  cout << ""The maximum average subarray of ""
          ""length ""
       << k << "" begins at index "" << findMaxAverage(arr, n, k);
  return 0;
}",Find maximum average subarray of k length.
138,Find maximum average subarray of k length | C ++ program to find maximum average subarray of given length . ; Returns beginning index of maximum average subarray of length ' k ' ; Check if ' k ' is valid ; Compute sum of first ' k ' elements ; Compute sum of remaining subarrays ; Return starting index ; Driver program,"#include <bits/stdc++.h>
using namespace std;
int findMaxAverage(int arr[], int n, int k) {
  if (k > n)
    return -1;
  int sum = arr[0];
  for (int i = 1; i < k; i++)
    sum += arr[i];
  int max_sum = sum, max_end = k - 1;
  for (int i = k; i < n; i++) {
    int sum = sum + arr[i] - arr[i - k];
    if (sum > max_sum) {
      max_sum = sum;
      max_end = i;
    }
  }
  return max_end - k + 1;
}
int main() {
  int arr[] = {1, 12, -5, -6, 50, 3};
  int k = 4;
  int n = sizeof(arr) / sizeof(arr[0]);
  cout << ""The maximum average subarray of ""
          ""length ""
       << k << "" begins at index "" << findMaxAverage(arr, n, k);
  return 0;
}",Find maximum average subarray of k length.
139,"Minimum score possible for a player by selecting one or two consecutive array elements from given binary array | C ++ program for the above approach ; Stores the minimum score for each states as map < pair < pos , myturn > , ans > ; Function to find the minimum score after choosing element from array ; Return the stored state ; Base Case ; Player A 's turn ; Find the minimum score ; Store the current state ; Return the result ; Player B 's turn ; Find minimum score ; Store the current state ; Return the result ; Function that finds the minimum penality after choosing element from the given binary array ; Starting position of choosing element from array ; 0 denotes player A turn 1 denotes player B turn ; Function Call ; Print the answer for player A and B ; Minimum penalty ; Calculate sum of all arr elements ; Print the minimum score ; Driver Code","#include <bits/stdc++.h>
using namespace std;
map<pair<int, int>, int> m;
int findMinimum(int a[], int n, int pos, int myturn) {
  if (m.find({pos, myturn}) != m.end()) {
    return m[{pos, myturn}];
  }
  if (pos >= n) {
    return 0;
  }
  if (!myturn) {
    int ans = min(findMinimum(a, n, pos + 1, !myturn) + a[pos],
                  findMinimum(a, n, pos + 2, !myturn) + a[pos] + a[pos + 1]);
    m[{pos, myturn}] = ans;
    return ans;
  }
  if (myturn) {
    int ans = min(findMinimum(a, n, pos + 1, !myturn),
                  findMinimum(a, n, pos + 2, !myturn));
    m[{pos, myturn}] = ans;
    return ans;
  }
  return 0;
}
int countPenality(int arr[], int N) {
  int pos = 0;
  int turn = 0;
  return findMinimum(arr, N, pos, turn);
}
void printAnswer(int *arr, int N) {
  int a = countPenality(arr, N);
  int sum = 0;
  for (int i = 0; i < N; i++) {
    sum += arr[i];
  }
  cout << a;
}
int main() {
  int arr[] = {1, 0, 1, 1, 0, 1, 1, 1};
  int N = sizeof(arr) / sizeof(arr[0]);
  printAnswer(arr, N);
  return 0;
}",Minimum score possible for a player by selecting one or two consecutive array elements from given binary array.
140,"Sum of prime numbers in range [ L , R ] from given Array for Q queries | C ++ program for the above approach ; Function to find the prime numbers ; Create a boolean array prime [ ] and initialize all entries it as true A value in prime [ i ] will finally be false if i is Not a prime ; Check if prime [ p ] is not changed , then it is a prime ; Update all multiples of p greater than or equal to the square of it numbers which are multiple of p and are less than p ^ 2 are already been marked ; Function to get the middle index from corner indexes ; Function to get the sum of values in the given range of the array ; If segment of this node is a part of given range , then return the sum of the segment ; If segment of this node is outside the given range ; If a part of this segment overlaps with the given range ; Function to update the nodes which have the given index in their range ; If the input index lies outside the range of this segment ; If the input index is in range of this node , then update the value of the node and its children ; Function to update a value in input array and segment tree ; Check for erroneous input index ; Get the difference between new value and old value ; Update the value in array ; Update the values of nodes in segment tree only if either previous value or new value or both are prime ; If only new value is prime ; If only new value is prime ; If both are prime ; Return sum of elements in range from index qs ( query start ) to qe ( query end ) . It mainly uses getSumUtil ( ) ; Check for erroneous input values ; Function that constructs Segment Tree ; If there is one element in array , store it in current node of segment tree and return ; Only add those elements in segment tree which are prime ; If there are more than one elements , then recur for left and right subtrees and store the sum of values in this node ; Function to construct segment tree from given array ; Height of segment tree ; Maximum size of segment tree ; Allocate memory ; Fill the allocated memory st ; Return the constructed segment tree ; Driver code ; Function call ; Build segment tree from given array ; Print sum of values in array from index 1 to 3 ; Update : set arr [ 1 ] = 10 and update corresponding segment tree nodes ; Find sum after the value is updated","#include <bits/stdc++.h>
using namespace std;
int const MAX = 1000001;
bool prime[MAX];
void SieveOfEratosthenes() {
  memset(prime, true, sizeof(prime));
  for (int p = 2; p * p <= MAX; p++) {
    if (prime[p] == true) {
      for (int i = p * p; i <= MAX; i += p)
        prime[i] = false;
    }
  }
}
int getMid(int s, int e) { return s + (e - s) / 2; }
int getSumUtil(int *st, int ss, int se, int qs, int qe, int si) {
  if (qs <= ss && qe >= se)
    return st[si];
  if (se<qs ss> qe)
    return 0;
  int mid = getMid(ss, se);
  return getSumUtil(st, ss, mid, qs, qe, 2 * si + 1) +
         getSumUtil(st, mid + 1, se, qs, qe, 2 * si + 2);
}
void updateValueUtil(int *st, int ss, int se, int i, int diff, int si) {
  if (i<ss i> se)
    return;
  st[si] = st[si] + diff;
  if (se != ss) {
    int mid = getMid(ss, se);
    updateValueUtil(st, ss, mid, i, diff, 2 * si + 1);
    updateValueUtil(st, mid + 1, se, i, diff, 2 * si + 2);
  }
}
void updateValue(int arr[], int *st, int n, int i, int new_val) {
  if (i<0 i> n - 1) {
    cout << ""-1"";
    return;
  }
  int diff = new_val - arr[i];
  int prev_val = arr[i];
  arr[i] = new_val;
  if (prime[new_val] prime[prev_val]) {
    if (!prime[prev_val])
      updateValueUtil(st, 0, n - 1, i, new_val, 0);
    else if (!prime[new_val])
      updateValueUtil(st, 0, n - 1, i, -prev_val, 0);
    else
      updateValueUtil(st, 0, n - 1, i, diff, 0);
  }
}
int getSum(int *st, int n, int qs, int qe) {
  if (qs<0 qe> n - 1 qs > qe) {
    cout << ""-1"";
    return -1;
  }
  return getSumUtil(st, 0, n - 1, qs, qe, 0);
}
int constructSTUtil(int arr[], int ss, int se, int *st, int si) {
  if (ss == se) {
    if (prime[arr[ss]])
      st[si] = arr[ss];
    else
      st[si] = 0;
    return st[si];
  }
  int mid = getMid(ss, se);
  st[si] = constructSTUtil(arr, ss, mid, st, si * 2 + 1) +
           constructSTUtil(arr, mid + 1, se, st, si * 2 + 2);
  return st[si];
}
int *constructST(int arr[], int n) {
  int x = (int)(ceil(log2(n)));
  int max_size = 2 * (int)pow(2, x) - 1;
  int *st = new int[max_size];
  constructSTUtil(arr, 0, n - 1, st, 0);
  return st;
}
int main() {
  int arr[] = {1, 3, 5, 7, 9, 11};
  int n = sizeof(arr) / sizeof(arr[0]);
  int Q[3][3] = {{1, 1, 3}, {2, 1, 10}, {1, 1, 3}};
  SieveOfEratosthenes();
  int *st = constructST(arr, n);
  cout << getSum(st, n, 1, 3) << endl;
  updateValue(arr, st, n, 1, 10);
  cout << getSum(st, n, 1, 3) << endl;
  return 0;
}","Sum of prime numbers in range [ L , R ] from given Array for Q queries."
141,"Count the number of ways to construct the target string | C ++ Program to Count the number of ways to construct the target string ; base case ; If current subproblem has been solved , use the value ; current character ; search through all the indiced at which the current character occurs . For each index greater than prev , take the index and move to the next position , and add to the answer . ; Store and return the solution for this subproblem ; preprocess the strings by storing for each character of every string , the index of their occurrence we will use a common list for all because of only the index matter in the string from which the character was picked ; we are storing j + 1 because the initial picked index in the recursive step will ne 0. This is just for ease of implementation ; initialise dp table . - 1 represents that the subproblem hasn 't been solved ; Driver Code","#include <bits/stdc++.h>
using namespace std;
int mod = 1000000007;
int dp[1000][1000];
int calculate(int pos, int prev, string s, vector<int> *index) {
  if (pos == s.length())
    return 1;
  if (dp[pos][prev] != -1)
    return dp[pos][prev];
  int c = s[pos] - 'a';
  int answer = 0;
  for (int i = 0; i < index.size(); i++) {
    if (index[i] > prev) {
      answer =
          (answer % mod + calculate(pos + 1, index[i], s, index) % mod) % mod;
    }
  }
  return dp[pos][prev] = answer;
}
int countWays(vector<string> &a, string s) {
  int n = a.size();
  vector<int> index[26];
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < a[i].length(); j++) {
      index[a[i][j] - 'a'].push_back(j + 1);
    }
  }
  memset(dp, -1, sizeof(dp));
  return calculate(0, 0, s, index);
}
int main() {
  vector<string> A;
  A.push_back(""adc"");
  A.push_back(""aec"");
  A.push_back(""erg"");
  string S = ""ac"";
  cout << countWays(A, S);
  return 0;
}",Count the number of ways to construct the target string.
142,"Count of integers from the range [ 0 , N ] whose digit sum is a multiple of K | C ++ implementation of the approach ; To store the states of the dp ; Function to return the count of numbers from the range [ 0 , n ] whose digit sum is a multiple of k using bottom - up dp ; The digit in this index can only be from [ 0 , num [ idx ] ] ; The digit in this index can be anything from [ 0 , 9 ] ; new_tight is the flag value for the next position ; res can 't be negative ; Function to process the string to a vector of digits from MSD to LSD ; Driver code ; For large input number n ; Total number of digits in n ; Clean dp table ; Process the string to a vector of digits from MSD to LSD","#include <bits/stdc++.h>
using namespace std;
#defineMAX100005
#defineMOD1000000007
    int dp[MAX][101][2];
int countNum(int idx, int sum, int tight, vector<int> num, int len, int k) {
  if (len == idx) {
    if (sum == 0)
      return 1;
    else
      return 0;
  }
  if (dp[idx][sum][tight] != -1)
    return dp[idx][sum][tight];
  int res = 0, limit;
  if (tight == 0) {
    limit = num[idx];
  } else {
    limit = 9;
  }
  for (int i = 0; i <= limit; i++) {
    int new_tight = tight;
    if (tight == 0 && i < limit)
      new_tight = 1;
    res += countNum(idx + 1, (sum + i) % k, new_tight, num, len, k);
    res %= MOD;
  }
  if (res < 0)
    res += MOD;
  return dp[idx][sum][tight] = res;
}
vector<int> process(string s) {
  vector<int> num;
  for (int i = 0; i < s.length(); i++) {
    num.push_back(s[i] - '0');
  }
  return num;
}
int main() {
  string n = ""98765432109876543210"";
  int len = n.length();
  int k = 58;
  memset(dp, -1, sizeof(dp));
  vector<int> num = process(n);
  cout << countNum(0, 0, 0, num, len, k);
  return 0;
}","Count of integers from the range [ 0 , N ] whose digit sum is a multiple of K."
143,Double Knapsack | Dynamic Programming | C ++ implementation of the above approach ; 3D array to store states of DP ; w1_r represents remaining capacity of 1 st knapsack w2_r represents remaining capacity of 2 nd knapsack i represents index of the array arr we are working on ; Base case ; Variables to store the result of three parts of recurrence relation ; Store the state in the 3D array ; Driver code ; Input array ; Initializing the array with - 1 ; Number of elements in the array ; Capacity of knapsacks ; Function to be called,"#include <bits/stdc++.h>
#definemaxN31
#definemaxW31
using namespace std;
int dp[maxN][maxW][maxW];
int maxWeight(int *arr, int n, int w1_r, int w2_r, int i) {
  if (i == n)
    return 0;
  if (dp[i][w1_r][w2_r] != -1)
    return dp[i][w1_r][w2_r];
  int fill_w1 = 0, fill_w2 = 0, fill_none = 0;
  if (w1_r >= arr[i])
    fill_w1 = arr[i] + maxWeight(arr, n, w1_r - arr[i], w2_r, i + 1);
  if (w2_r >= arr[i])
    fill_w2 = arr[i] + maxWeight(arr, n, w1_r, w2_r - arr[i], i + 1);
  fill_none = maxWeight(arr, n, w1_r, w2_r, i + 1);
  dp[i][w1_r][w2_r] = max(fill_none, max(fill_w1, fill_w2));
  return dp[i][w1_r][w2_r];
}
int main() {
  int arr[] = {8, 2, 3};
  memset(dp, -1, sizeof(dp));
  int n = sizeof(arr) / sizeof(arr[0]);
  int w1 = 10, w2 = 3;
  cout << maxWeight(arr, n, w1, w2, 0);
  return 0;
}",Double Knapsack.
144,"Sum of bitwise AND of all submatrices | C ++ program to find sum of Bit - wise AND of all submatrices ; Function to find prefix - count for each row from right to left ; Function to find the number of submatrices with all 1 s ; Array to store required prefix count of 1 s from right to left for boolean array ; Variable to store the final answer ; For each index of a column , determine the number of sub - matrices starting from that index and has all 1 s ; Stack to store elements and the count of the numbers they popped First part of pair is value of inserted element Second part is count of the number of elements pushed before with a greater value ; variable to store the number of submatrices with all 1 s ; Function to find the sum of Bitwise - AND of all submatrices ; matrix to store the status of ith bit of each element of matrix arr ; Driver Code","#include <iostream>
#include <stack>
using namespace std;
#definen3 void findPrefixCount(int p_arr[][n], bool set_bit[][n]) {
  for (int i = 0; i < n; i++) {
    for (int j = n - 1; j >= 0; j--) {
      if (!set_bit[i][j])
        continue;
      if (j != n - 1)
        p_arr[i][j] += p_arr[i][j + 1];
      p_arr[i][j] += (int)set_bit[i][j];
    }
  }
}
int matrixAllOne(bool set_bit[][n]) {
  int p_arr[n][n] = {0};
  findPrefixCount(p_arr, set_bit);
  int ans = 0;
  for (int j = 0; j < n; j++) {
    int i = n - 1;
    stack<pair<int, int>> q;
    int to_sum = 0;
    while (i >= 0) {
      int c = 0;
      while (q.size() != 0 and q.top().first > p_arr[i][j]) {
        to_sum -= (q.top().second + 1) * (q.top().first - p_arr[i][j]);
        c += q.top().second + 1;
        q.pop();
      }
      to_sum += p_arr[i][j];
      ans += to_sum;
      q.push({p_arr[i][j], c});
      i--;
    }
  }
  return ans;
}
int sumAndMatrix(int arr[][n]) {
  int sum = 0;
  int mul = 1;
  for (int i = 0; i < 30; i++) {
    bool set_bit[n][n];
    for (int R = 0; R < n; R++)
      for (int C = 0; C < n; C++)
        set_bit[R][C] = ((arr[R][C] & (1 << i)) != 0);
    sum += (mul * matrixAllOne(set_bit));
    mul *= 2;
  }
  return sum;
}
int main() {
  int arr[][n] = {{9, 7, 4}, {8, 9, 2}, {11, 11, 5}};
  cout << sumAndMatrix(arr);
  return 0;
}",Sum of bitwise AND of all submatrices.
145,"Count ways to reach a score using 1 and 2 with no consecutive 2 s | Bottom up approach for counting ways to reach a score using 1 and 2 with consecutive 2 allowed ; noOfWays [ i ] will store count for last 3 values before i . ; Loop till "" n + 1"" to compute value for "" n "" ; number of ways if first run is 1 ; number of ways if first run is 2 and second run is 1 ; Remember last 3 values ; Driver code","#include <iostream>
using namespace std;
int CountWays(int n) {
  int noOfWays[3];
  noOfWays[0] = 1;
  noOfWays[1] = 1;
  noOfWays[2] = 1 + 1;
  for (int i = 3; i < n + 1; i++) {
    noOfWays[i] = noOfWays[3 - 1] + noOfWays[3 - 3];
    noOfWays[0] = noOfWays[1];
    noOfWays[1] = noOfWays[2];
    noOfWays[2] = noOfWays[i];
  }
  return noOfWays[n];
}
int main() {
  int n = 5;
  cout << CountWays(n);
  return 0;
}",Count ways to reach a score using 1 and 2 with no consecutive 2 s.
146,"Lexicographically largest prime path from top | C ++ implementation of above approach ; Depth First Search ; Return if cell contain non prime number or obstacle , or going out of matrix or already visited the cell or already found the lexicographical largest path ; marking cell is already visited ; storing the lexicographical largest path index ; if reached the end of the matrix ; updating the final number of steps in lexicographical largest path ; moving diagonal ( trying lexicographical largest path ) ; moving cell right to current cell ; moving cell down to current cell . ; Print lexicographical largest prime path ; to count the number of step in lexicographical largest prime path ; to store the lexicographical largest prime path index ; to mark if the cell is already traversed or not ; traversing by DFS ; printing the lexicographical largest prime path ; Return the number of prime path in ther matrix . ; for each cell ; If on the top row or leftmost column , there is no path there . ; If non prime number ; Finding the matrix mapping by considering non prime number as obstacle and prime number be valid path . ; Sieve ; If prime ; if non prime ; Driver code","#include <bits/stdc++.h>
using namespace std;
#defineMAX105 void sieve(int prime[]) {
  for (int i = 2; i * i <= MAX; i++) {
    if (prime[i] == 0) {
      for (int j = i * i; j <= MAX; j += i)
        prime[j] = 1;
    }
  }
}
void dfs(int i, int j, int k, int *q, int n, int m, int mappedMatrix[][MAX],
         int mark[][MAX], pair<int, int> ans[]) {
  if (mappedMatrix[i][j] == 0 || i > n || j > m || mark[i][j] || (*q))
    return;
  mark[i][j] = 1;
  ans[k] = make_pair(i, j);
  if (i == n && j == m) {
    (*q) = k;
    return;
  }
  dfs(i + 1, j + 1, k + 1, q, n, m, mappedMatrix, mark, ans);
  dfs(i + 1, j, k + 1, q, n, m, mappedMatrix, mark, ans);
  dfs(i, j + 1, k + 1, q, n, m, mappedMatrix, mark, ans);
}
void lexicographicalPath(int n, int m, int mappedMatrix[][MAX]) {
  int q = 0;
  pair<int, int> ans[MAX];
  int mark[MAX][MAX];
  dfs(1, 1, 1, &q, n, m, mappedMatrix, mark, ans);
  for (int i = 1; i <= q; i++)
    cout << ans[i].first << "" "" << ans[i].second << ""\n"";
}
void countPrimePath(int mappedMatrix[][MAX], int n, int m) {
  int dp[MAX][MAX] = {0};
  dp[1][1] = 1;
  for (int i = 1; i <= n; i++) {
    for (int j = 1; j <= m; j++) {
      if (i == 1 && j == 1)
        continue;
      dp[i][j] = (dp[i - 1][j] + dp[i][j - 1] + dp[i - 1][j - 1]);
      if (mappedMatrix[i][j] == 0)
        dp[i][j] = 0;
    }
  }
  cout << dp[n][m] << ""\n"";
}
void preprocessMatrix(int mappedMatrix[][MAX], int a[][MAX], int n, int m) {
  int prime[MAX];
  sieve(prime);
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < m; j++) {
      if (prime[a[i][j]] == 0)
        mappedMatrix[i + 1][j + 1] = 1;
      else
        mappedMatrix[i + 1][j + 1] = 0;
    }
  }
}
int main() {
  int n = 3;
  int m = 3;
  int a[MAX][MAX] = {{2, 3, 7}, {5, 4, 2}, {3, 7, 11}};
  int mappedMatrix[MAX][MAX] = {0};
  preprocessMatrix(mappedMatrix, a, n, m);
  countPrimePath(mappedMatrix, n, m);
  lexicographicalPath(n, m, mappedMatrix);
  return 0;
}",Lexicographically largest prime path from top.
147,"Maximum size subset with given sum | A Dynamic Programming solution for subset sum problem + maximal subset value . ; Returns size of maximum sized subset if there is a subset of set [ ] with sun equal to given sum . It returns - 1 if there is no subset with given sum . ; The value of subset [ i ] [ j ] will be true if there is a subset of set [ 0. . j - 1 ] with sum equal to i ; If sum is 0 , then answer is true ; If sum is not 0 and set is empty , then answer is false ; Fill the subset table in bottom up manner ; Driver code","#include <bits/stdc++.h>
using namespace std;
int isSubsetSum(int set[], int n, int sum) {
  bool subset[sum + 1][n + 1];
  int count[sum + 1][n + 1];
  for (int i = 0; i <= n; i++) {
    subset[0][i] = true;
    count[0][i] = 0;
  }
  for (int i = 1; i <= sum; i++) {
    subset[i][0] = false;
    count[i][0] = -1;
  }
  for (int i = 1; i <= sum; i++) {
    for (int j = 1; j <= n; j++) {
      subset[i][j] = subset[i][j - 1];
      count[i][j] = count[i][j - 1];
      if (i >= set[j - 1]) {
        subset[i][j] = subset[i][j] || subset[i - set[j - 1]][j - 1];
        if (subset[i][j])
          count[i][j] = max(count[i][j - 1], count[i - set[j - 1]][j - 1] + 1);
      }
    }
  }
  return count[sum][n];
}
int main() {
  int set[] = {2, 3, 5, 10};
  int sum = 20;
  int n = 4;
  cout << isSubsetSum(set, n, sum);
}",Maximum size subset with given sum.
148,"Print all longest common sub | C ++ program to find all LCS of two strings in sorted order . ; length of lcs ; dp matrix to store result of sub calls for lcs ; A memoization based function that returns LCS of str1 [ i . . len1 - 1 ] and str2 [ j . . len2 - 1 ] ; base condition ; if lcs has been computed ; if characters are same return previous + 1 else max of two sequences after removing i ' th ▁ and ▁ j ' th char one by one ; Function to print all routes common sub - sequences of length lcslen ; if currlcs is equal to lcslen then print it ; if we are done with all the characters of both string ; here we have to print all sub - sequences lexicographically , that ' s ▁ why ▁ we ▁ start ▁ from ▁ ' a ' to ' z ' if this character is  present in both of them then append it in data[] and same  remaining part ; done is a flag to tell that we have printed all the subsequences corresponding to current character ; if character ch is present in str1 then check if it is present in str2 ; if ch is present in both of them and remaining length is equal to remaining lcs length then add ch in sub - sequenece ; If we found LCS beginning with current character . ; This function prints all LCS of str1 and str2 in lexicographic order . ; Find lengths of both strings ; Find length of LCS ; Print all LCS using recursive backtracking data [ ] is used to store individual LCS . ; Driver program to run the case","#include <bits/stdc++.h>
#defineMAX100
using namespace std;
int lcslen = 0;
int dp[MAX][MAX];
int lcs(string str1, string str2, int len1, int len2, int i, int j) {
  int &ret = dp[i][j];
  if (i == len1 j == len2)
    return ret = 0;
  if (ret != -1)
    return ret;
  ret = 0;
  if (str1[i] == str2[j])
    ret = 1 + lcs(str1, str2, len1, len2, i + 1, j + 1);
  else
    ret = max(lcs(str1, str2, len1, len2, i + 1, j),
              lcs(str1, str2, len1, len2, i, j + 1));
  return ret;
}
void printAll(string str1, string str2, int len1, int len2, char data[],
              int indx1, int indx2, int currlcs) {
  if (currlcs == lcslen) {
    data[currlcs] = '\0';
    puts(data);
    return;
  }
  if (indx1 == len1 indx2 == len2)
    return;
  for (char ch = 'a'; ch <= 'z'; ch++) {
    bool done = false;
    for (int i = indx1; i < len1; i++) {
      if (ch == str1[i]) {
        for (int j = indx2; j < len2; j++) {
          if (ch == str2[j] && dp[i][j] == lcslen - currlcs) {
            data[currlcs] = ch;
            printAll(str1, str2, len1, len2, data, i + 1, j + 1, currlcs + 1);
            done = true;
            break;
          }
        }
      }
      if (done)
        break;
    }
  }
}
void prinlAllLCSSorted(string str1, string str2) {
  int len1 = str1.length(), len2 = str2.length();
  memset(dp, -1, sizeof(dp));
  lcslen = lcs(str1, str2, len1, len2, 0, 0);
  char data[MAX];
  printAll(str1, str2, len1, len2, data, 0, 0, 0);
}
int main() {
  string str1 = ""abcabcaa"", str2 = ""acbacba"";
  prinlAllLCSSorted(str1, str2);
  return 0;
}",Print all longest common sub.
149,Check for Majority Element in a sorted array | C ++ Program to check for majority element in a sorted array ; get last index according to n ( even or odd ) ; search for first occurrence of x in arr [ ] ; check if x is present and is present more than n / 2 times ; Driver code,"#include <bits/stdc++.h>
using namespace std;
bool isMajority(int arr[], int n, int x) {
  int i;
  int last_index = n % 2 ? (n / 2 + 1) : (n / 2);
  for (i = 0; i < last_index; i++) {
    if (arr[i] == x && arr[i + n / 2] == x)
      return 1;
  }
  return 0;
}
int main() {
  int arr[] = {1, 2, 3, 4, 4, 4, 4};
  int n = sizeof(arr) / sizeof(arr[0]);
  int x = 4;
  if (isMajority(arr, n, x))
    cout << x << "" appears more than "" << n / 2 << "" times in arr[]"" << endl;
  else
    cout << x << "" does not appear more than"" << n / 2 << "" times in arr[]""
         << endl;
  return 0;
}",Check for Majority Element in a sorted array.
150,"Check for Majority Element in a sorted array | C ++ program to check for majority element in a sorted array ; If x is present in arr [ low ... high ] then returns the index of first occurrence of x , otherwise returns - 1 ; Check if arr [ mid ] is the first occurrence of x . arr [ mid ] is first occurrence if x is one of the following is true : ( i ) mid == 0 and arr [ mid ] = = x ( ii ) arr [ mid - 1 ] < x and arr [ mid ] == x ; This function returns true if the x is present more than n / 2 times in arr [ ] of size n ; Find the index of first occurrence of x in arr [ ] ; If element is not present at all , return false ; Check if the element is present more than n / 2 times ; Driver code","#include <bits/stdc++.h>
using namespace std;
int _binarySearch(int arr[], int low, int high, int x) {
  if (high >= low) {
    int mid = (low + high) / 2;
    if ((mid == 0 x > arr[mid - 1]) && (arr[mid] == x))
      return mid;
    else if (x > arr[mid])
      return _binarySearch(arr, (mid + 1), high, x);
    else
      return _binarySearch(arr, low, (mid - 1), x);
  }
  return -1;
}
bool isMajority(int arr[], int n, int x) {
  int i = _binarySearch(arr, 0, n - 1, x);
  if (i == -1)
    return false;
  if (((i + n / 2) <= (n - 1)) && arr[i + n / 2] == x)
    return true;
  else
    return false;
}
int main() {
  int arr[] = {1, 2, 3, 3, 3, 3, 10};
  int n = sizeof(arr) / sizeof(arr[0]);
  int x = 3;
  if (isMajority(arr, n, x))
    cout << x << "" appears more than "" << n / 2 << "" times in arr[]"" << endl;
  else
    cout << x << "" does not appear more than"" << n / 2 << "" times in arr[]""
         << endl;
  return 0;
}",Check for Majority Element in a sorted array.
151,Check for Majority Element in a sorted array |  ;,"#include <iostream>
using namespace std;
bool isMajorityElement(int arr[], int n, int key) {
  if (arr[n / 2] == key)
    return true;
  else
    return false;
}
int main() {
  int arr[] = {1, 2, 3, 3, 3, 3, 10};
  int n = sizeof(arr) / sizeof(arr[0]);
  int x = 3;
  if (isMajorityElement(arr, n, x))
    cout << x << "" appears more than "" << n / 2 << "" times in arr[]"" << endl;
  else
    cout << x << "" does not appear more than"" << n / 2 << "" times in arr[]""
         << endl;
  return 0;
}",Check for Majority Element in a sorted array.
152,Cutting a Rod | DP | A Dynamic Programming solution for Rod cutting problem ; A utility function to get the maximum of two integers ; Returns the best obtainable price for a rod of length n and price [ ] as prices of different pieces ; Build the table val [ ] in bottom up manner and return the last entry from the table ; Driver program to test above functions,"#include <bits/stdc++.h>
#include <iostream>
#include <math.h>
using namespace std;
int max(int a, int b) { return (a > b) ? a : b; }
int cutRod(int price[], int n) {
  int val[n + 1];
  val[0] = 0;
  int i, j;
  for (i = 1; i <= n; i++) {
    int max_val = INT_MIN;
    for (j = 0; j < i; j++)
      max_val = max(max_val, price[j] + val[i - j - 1]);
    val[i] = max_val;
  }
  return val[n];
}
int main() {
  int arr[] = {1, 5, 8, 9, 10, 17, 17, 20};
  int size = sizeof(arr) / sizeof(arr[0]);
  cout << ""Maximum Obtainable Value is "" << cutRod(arr, size);
  getchar();
  return 0;
}",Cutting a Rod.
153,"Cutting a Rod | DP | CPP program for above approach ; Global Array for the purpose of memoization . ; A recursive program , using , memoization , to implement the rod cutting problem ( Top - Down ) . ; The maximum price will be zero , when either the length of the rod is zero or price is zero . ; If the length of the rod is less than the maximum length , Max_lene will consider it . Now depending upon the profit , either Max_lene we will take it or discard it . ; If the length of the rod is greater than the permitted size , Max_len we will not consider it . ; Max_lene Max_lenill return the maximum value obtained , Max_lenhich is present at the nth roMax_len and Max_lenth column . ; Driver program to test above functions ; Function Call","#include <iostream>
using namespace std;
int t[9][9];
int un_kp(int price[], int length[], int Max_len, int n) {
  if (n == 0 Max_len == 0) {
    return 0;
  }
  if (length[n - 1] <= Max_len) {
    t[n][Max_len] =
        max(price[n - 1] + un_kp(price, length, Max_len - length[n - 1], n),
            un_kp(price, length, Max_len, n - 1));
  } else {
    t[n][Max_len] = un_kp(price, length, Max_len, n - 1);
  }
  return t[n][Max_len];
}
int main() {
  int price[] = {1, 5, 8, 9, 10, 17, 17, 20};
  int n = sizeof(price) / sizeof(price[0]);
  int length[n];
  for (int i = 0; i < n; i++) {
    length[i] = i + 1;
  }
  int Max_len = n;
  cout << ""Maximum obtained value is "" << un_kp(price, length, n, Max_len)
       << endl;
}",Cutting a Rod.
154,"Modify array to another given array by replacing array elements with the sum of the array | CPP program to implement the above approach ; Function to check if the arr [ ] can be converted to target [ ] by replacing any element in arr [ ] by the sum of arr [ ] ; Store the maximum element ; Store the index of the maximum element ; Traverse the array target [ ] ; If current element is greater than max ; If max element is 1 ; Traverse the array , target [ ] ; If current index is not equal to maximum element index ; Update max ; If max is less than or equal to 0 , ; Update the maximum element ; Recursively call the function ; Driver Code ; Size of the array","#include <bits/stdc++.h>
using namespace std;
bool isPossible(int target[], int n) {
  int max = 0;
  int index = 0;
  for (int i = 0; i < n; i++) {
    if (max < target[i]) {
      max = target[i];
      index = i;
    }
  }
  if (max == 1)
    return true;
  for (int i = 0; i < n; i++) {
    if (i != index) {
      max -= target[i];
      if (max <= 0)
        return false;
    }
  }
  target[index] = max;
  return isPossible(target, n);
}
int main() {
  int target[] = {9, 3, 5};
  int n = sizeof(target) / sizeof(target[0]);
  bool res = isPossible(target, n);
  if (res) {
    cout << ""YES"";
  } else {
    cout << ""NO"";
  }
  return 0;
}",Modify array to another given array by replacing array elements with the sum of the array.
155,"Sum of all products of the Binomial Coefficients of two numbers up to K | C ++ implementation of the above approach ; Function returns nCr i . e . Binomial Coefficient ; Initialize res with 1 ; Since C ( n , r ) = C ( n , n - r ) ; Evaluating expression ; Driver Code","#include <bits/stdc++.h>
using namespace std;
int nCr(int n, int r) {
  int res = 1;
  if (r > n - r)
    r = n - r;
  for (int i = 0; i < r; ++i) {
    res *= (n - i);
    res /= (i + 1);
  }
  return res;
}
int main() {
  int n = 3, m = 2, k = 2;
  cout << nCr(n + m, k);
  return 0;
}",Sum of all products of the Binomial Coefficients of two numbers up to K.
156,Check if N can be obtained from 1 by repetitively multiplying by 10 or 20 | C ++ program to check if N can be obtained from 1 by repetitive multiplication by 10 or 20 ; Function to check if N can be obtained or not ; Count and remove trailing zeroes ; Check if remaining N is a power of 2 ; To check the condition to print YES or NO ; Driver code,"#include <bits/stdc++.h>
using namespace std;
void Is_possible(long long int N) {
  int C = 0;
  int D = 0;
  while (N % 10 == 0) {
    N = N / 10;
    C += 1;
  }
  if (pow(2, (int)log2(N)) == N) {
    D = (int)log2(N);
    if (C >= D)
      cout << ""YES"";
    else
      cout << ""NO"";
  } else
    cout << ""NO"";
}
int main() {
  long long int N = 2000000000000;
  Is_possible(N);
}",Check if N can be obtained from 1 by repetitively multiplying by 10 or 20.
157,Central polygonal numbers | C ++ program to find N - th term in the series ; Function to find N - th term in the series ; Driver code,"#include <iostream>
#include <math.h>
using namespace std;
void findNthTerm(int n) { cout << n * n - n + 1 << endl; }
int main() {
  int N = 4;
  findNthTerm(N);
  return 0;
}",Central polygonal numbers.
158,Anti | C ++ program for the above approach ; Iterative function to reverse digits of num ; Return the reversed num ; Function to calculate sum of reverse all proper divisors ; Final result of summation of divisors ; Find all divisors of num ; If ' i ' is divisor of ' num ' ; If both divisors are same then add it only once else add both ; Add 1 to the result as 1 is also a divisor ; Function to check if N is anti - perfect or not ; Driver Code ; Given Number N ; Function Call,"#include <bits/stdc++.h>
using namespace std;
int rev(int num) {
  int rev_num = 0;
  while (num > 0) {
    rev_num = rev_num * 10 + num % 10;
    num = num / 10;
  }
  return rev_num;
}
int divSum(int num) {
  int result = 0;
  for (int i = 2; i <= sqrt(num); i++) {
    if (num % i == 0) {
      if (i == (num / i))
        result += rev(i);
      else
        result += (rev(i) + rev(num / i));
    }
  }
  return (result + 1);
}
bool isAntiPerfect(int n) { return divSum(n) == n; }
int main() {
  int N = 244;
  if (isAntiPerfect(N))
    cout << ""Yes"";
  else
    cout << ""No"";
  return 0;
}",Anti.
159,"Program to print the series 1 , 3 , 4 , 8 , 15 , 27 , 50 â €¦ till N terms | C ++ implementation to print the N terms of the series whose three terms are given ; Function to print the series ; Generate the ith term and print it ; Driver Code ; Function Call","#include ""bits/stdc++.h""
using namespace std;
void printSeries(int n, int a, int b, int c) {
  int d;
  if (n == 1) {
    cout << a << "" "";
    return;
  }
  if (n == 2) {
    cout << a << "" "" << b << "" "";
    return;
  }
  cout << a << "" "" << b << "" "" << c << "" "";
  for (int i = 4; i <= n; i++) {
    d = a + b + c;
    cout << d << "" "";
    a = b;
    b = c;
    c = d;
  }
}
int main() {
  int N = 7, a = 1, b = 3;
  int c = 4;
  printSeries(N, a, b, c);
  return 0;
}","Program to print the series 1 , 3 , 4 , 8 , 15 , 27 , 50 â €¦ till N terms."
160,Diameter of a Binary Indexed Tree with N nodes |  ; Function to find diameter of BIT with N + 1 nodes ; L is size of subtree just before subtree in which N lies ; H is the height of subtree just before subtree in which N lies ; Base Cases ; Size of subtree are power of 2 ; 3 Cases as explained in Approach ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
int diameter(int n) {
  int L, H, templen;
  L = 1;
  H = 0;
  if (n == 1) {
    return 1;
  }
  if (n == 2) {
    return 2;
  }
  if (n == 3) {
    return 3;
  }
  while (L * 2 <= n) {
    L *= 2;
    H++;
  }
  if (n >= L * 2 - 1)
    return 2 * H + 1;
  else if (n >= L + (L / 2) - 1)
    return 2 * H;
  return 2 * H - 1;
}
int main() {
  int n = 15;
  cout << diameter(n) << endl;
}",Diameter of a Binary Indexed Tree with N nodes.
161,Find the larger exponential among two exponentials | C ++ implementation of the approach ; Function to find whether a ^ b is greater or c ^ d ; Find b * log ( a ) ; Find d * log ( c ) ; Compare both values ; Driver code,"#include <bits/stdc++.h>
using namespace std;
void compareValues(int a, int b, int c, int d) {
  double log1 = log10(a);
  double num1 = log1 * b;
  double log2 = log10(c);
  double num2 = log2 * d;
  if (num1 > num2)
    cout << a << ""^"" << b;
  else
    cout << c << ""^"" << d;
}
int main() {
  int a = 8, b = 29, c = 60, d = 59;
  compareValues(a, b, c, d);
}",Find the larger exponential among two exponentials.
162,Sum of prime numbers without odd prime digits |  ; Find all prime numbers ; Store all prime numbers ; Function to check if a digit is odd prime or not ; Function to find sum ; To store required answer ; Get all prime numbers ; Traverse through all the prime numbers ; Flag stores 1 if a number does not contain any odd primes ; Find all digits of a number ; If number does not contain any odd primes ; Return the required answer ; Driver code ; Function call,"#include <bits/stdc++.h>
using namespace std;
#defineMAX100005 vector < int> addPrimes() {
  int n = MAX;
  bool prime[n + 1];
  memset(prime, true, sizeof(prime));
  for (int p = 2; p * p <= n; p++) {
    if (prime[p] == true) {
      for (int i = p * p; i <= n; i += p)
        prime[i] = false;
    }
  }
  vector<int> ans;
  for (int p = 2; p <= n; p++)
    if (prime[p])
      ans.push_back(p);
  return ans;
}
bool is_prime(int n) { return (n == 3 n == 5 n == 7); }
int find_Sum(int n) {
  int sum = 0;
  vector<int> v = addPrimes();
  for (int i = 0; i < v.size() and n; i++) {
    int flag = 1;
    int a = v[i];
    while (a != 0) {
      int d = a % 10;
      a = a / 10;
      if (is_prime(d)) {
        flag = 0;
        break;
      }
    }
    if (flag == 1) {
      n--;
      sum = sum + v[i];
    }
  }
  return sum;
}
int main() {
  int n = 7;
  cout << find_Sum(n);
  return 0;
}",Sum of prime numbers without odd prime digits.
163,"Count the number of primes in the prefix sum array of the given array | C ++ implementation of the approach ; Function to return the count of primes in the given array ; Find maximum value in the array ; USE SIEVE TO FIND ALL PRIME NUMBERS LESS THAN OR EQUAL TO max_val Create a boolean array "" prime [ 0 . . n ] "" . A value in prime [ i ] will finally be false if i is Not a prime , else true . ; Remaining part of SIEVE ; If prime [ p ] is not changed , then it is a prime ; Update all multiples of p ; Find all primes in arr [ ] ; Function to generate the prefix array ; Fill the prefix array ; Driver code ; Prefix array of arr [ ] ; Count of primes in the prefix array","#include <bits/stdc++.h>
using namespace std;
int primeCount(int arr[], int n) {
  int max_val = *max_element(arr, arr + n);
  vector<bool> prime(max_val + 1, true);
  prime[0] = false;
  prime[1] = false;
  for (int p = 2; p * p <= max_val; p++) {
    if (prime[p] == true) {
      for (int i = p * 2; i <= max_val; i += p)
        prime[i] = false;
    }
  }
  int count = 0;
  for (int i = 0; i < n; i++)
    if (prime[arr[i]])
      count++;
  return count;
}
void getPrefixArray(int arr[], int n, int pre[]) {
  pre[0] = arr[0];
  for (int i = 1; i < n; i++) {
    pre[i] = pre[i - 1] + arr[i];
  }
}
int main() {
  int arr[] = {1, 4, 8, 4};
  int n = sizeof(arr) / sizeof(arr[0]);
  int pre[n];
  getPrefixArray(arr, n, pre);
  cout << primeCount(pre, n);
  return 0;
}",Count the number of primes in the prefix sum array of the given array.
164,Minimum value to be added to X such that it is at least Y percent of N | C ++ implementation of the approach ; Function to return the required value that must be added to x so that it is at least y percent of n ; Required value ; If x is already >= y percent of n ; Driver code,"#include <bits/stdc++.h>
using namespace std;
int minValue(int n, int x, int y) {
  float val = (y * n) / 100;
  if (x >= val)
    return 0;
  else
    return (ceil(val) - x);
}
int main() {
  int n = 10, x = 2, y = 40;
  cout << minValue(n, x, y);
}",Minimum value to be added to X such that it is at least Y percent of N.
165,Check if N is a Factorial Prime | C ++ program to check if given number is a factorial prime ; Utility function to check if a number is prime or not ; Corner cases ; This is checked so that we can skip middle five numbers in below loop ; Function that returns true if n is a factorial prime ; If n is not prime then return false ; Calculate factorial ; If n is a factorial prime ; n is not a factorial prime ; Driver code,"#include <bits/stdc++.h>
using namespace std;
bool isPrime(int n) {
  if (n <= 1)
    return false;
  if (n <= 3)
    return true;
  if (n % 2 == 0 n % 3 == 0)
    return false;
  for (int i = 5; i * i <= n; i = i + 6)
    if (n % i == 0 || n % (i + 2) == 0)
      return false;
  return true;
}
bool isFactorialPrime(long n) {
  if (!isPrime(n))
    return false;
  long fact = 1;
  int i = 1;
  while (fact <= n + 1) {
    fact = fact * i;
    if (n + 1 == fact n - 1 == fact)
      return true;
    i++;
  }
  return false;
}
int main() {
  int n = 23;
  if (isFactorialPrime(n))
    cout << ""Yes"";
  else
    cout << ""No"";
  return 0;
}",Check if N is a Factorial Prime.
166,Seating arrangement of n boys and girls alternatively around a round table | C ++ program to find number of ways in which n boys and n girls can sit alternatively sound a round table . ; Driver Code ; Get n ; find fac1 = ( n - 1 ) ! ; Find fac2 = n ! ; Find total number of ways ; Print the total number of ways,"#include <bits/stdc++.h>
using namespace std;
#definelllongint int main() {
  ll n = 5;
  ll fac1 = 1;
  for (int i = 2; i <= n - 1; i++)
    fac1 = fac1 * i;
  ll fac2 = fac1 * n;
  ll totalWays = fac1 * fac2;
  cout << totalWays << endl;
  return 0;
}",Seating arrangement of n boys and girls alternatively around a round table.
167,"Check whether the given number is Euclid Number or not | CPP program to check Euclid Number ; Function to generate prime numbers ; Create a boolean array "" prime [ 0 . . n ] "" and initialize all entries it as true . A value in prime [ i ] will finally be false if i is Not a prime , else true . ; If prime [ p ] is not changed , then it is a prime ; Update all multiples of p ; store all prime numbers to vector ' arr ' ; Function to check the number for Euclid Number ; Multiply next prime number and check if product + 1 = n holds or not ; Driver code ; Get the prime numbers ; Get n ; Check if n is Euclid Number ; Get n ; Check if n is Euclid Number","#include <bits/stdc++.h>
using namespace std;
#defineMAX10000 vector < int> arr;
void SieveOfEratosthenes() {
  bool prime[MAX];
  memset(prime, true, sizeof(prime));
  for (int p = 2; p * p < MAX; p++) {
    if (prime[p] == true) {
      for (int i = p * 2; i < MAX; i += p)
        prime[i] = false;
    }
  }
  for (int p = 2; p < MAX; p++)
    if (prime[p])
      arr.push_back(p);
}
bool isEuclid(long n) {
  long long product = 1;
  int i = 0;
  while (product < n) {
    product = product * arr[i];
    if (product + 1 == n)
      return true;
    i++;
  }
  return false;
}
int main() {
  SieveOfEratosthenes();
  long n = 31;
  if (isEuclid(n))
    cout << ""YES\n"";
  else
    cout << ""NO\n"";
  n = 42;
  if (isEuclid(n))
    cout << ""YES\n"";
  else
    cout << ""NO\n"";
  return 0;
}",Check whether the given number is Euclid Number or not.
168,Perfect cube greater than a given number | C ++ implementation of above approach ; Function to find the next perfect cube ; Driver Code,"#include <cmath>
#include <iostream>
using namespace std;
int nextPerfectCube(int N) {
  int nextN = floor(cbrt(N)) + 1;
  return nextN * nextN * nextN;
}
int main() {
  int n = 35;
  cout << nextPerfectCube(n);
  return 0;
}",Perfect cube greater than a given number.
169,Sum of all the prime divisors of a number | C ++ program to find sum of prime divisors of N ; Function to check if the number is prime or not . ; Corner cases ; This is checked so that we can skip middle five numbers in below loop ; function to find sum of prime divisors of N ; return type of sqrt function if float ; both factors are same ; both factors are not same ( i and n / i ) ; Driver code,"#include <bits/stdc++.h>
using namespace std;
bool isPrime(int n) {
  if (n <= 1)
    return false;
  if (n <= 3)
    return true;
  if (n % 2 == 0 n % 3 == 0)
    return false;
  for (int i = 5; i * i <= n; i = i + 6)
    if (n % i == 0 || n % (i + 2) == 0)
      return false;
  return true;
}
int SumOfPrimeDivisors(int n) {
  int sum = 0;
  int root_n = (int)sqrt(n);
  for (int i = 1; i <= root_n; i++) {
    if (n % i == 0) {
      if (i == n / i && isPrime(i)) {
        sum += i;
      } else {
        if (isPrime(i)) {
          sum += i;
        }
        if (isPrime(n / i)) {
          sum += (n / i);
        }
      }
    }
  }
  return sum;
}
int main() {
  int n = 60;
  cout << ""Sum of prime divisors of 60 is "" << SumOfPrimeDivisors(n) << endl;
}",Sum of all the prime divisors of a number.
170,"Position of n among the numbers made of 2 , 3 , 5 & 7 |  ; If number is 2 then it is on the position pos * 2 + 1 ; If number is 3 then it is on the position pos * 2 + 2 ; If number is 5 then it is on the position pos * 2 + 3 ; If number is 7 then it is on the position pos * 2 + 4 ; Driver code","#include <algorithm>
#include <iostream>
using namespace std;
int findpos(string n) {
  int pos = 0;
  for (int i = 0; n[i] != '\0'; i++) {
    switch (n[i]) {
    case '2':
      pos = pos * 4 + 1;
      break;
    case '3':
      pos = pos * 4 + 2;
      break;
    case '5':
      pos = pos * 4 + 3;
      break;
    case '7':
      pos = pos * 4 + 4;
      break;
    }
  }
  return pos;
}
int main() {
  string n = ""777"";
  cout << findpos(n);
}","Position of n among the numbers made of 2 , 3 , 5 & 7."
171,"Finding a Non Transitive Co | C ++ program to find a non transitive co - prime triplets between L and R ; Checks if any possible triplet ( a , b , c ) satisfying the condition that ( a , b ) is coprime , ( b , c ) is coprime but ( a , c ) isnt ; Case 1 : Less than 3 numbers between L and R ; Case 2 : More than 3 numbers between L and R ; triplets should always be of form ( 2 k , 2 k + 1 , 2 k + 2 ) ; Case 3.1 : Exactly 3 numbers in range of form ( 2 k , 2 k + 1 , 2 k + 2 ) ; Case 3.2 : Exactly 3 numbers in range of form ( 2 k - 1 , 2 k , 2 k + 1 ) ; flag = True indicates that a pair exists between L and R ; Driver code ; finding possible Triplet between 2 and 10 ; finding possible Triplet between 23 and 46","#include <bits/stdc++.h>
using namespace std;
void possibleTripletInRange(int L, int R) {
  bool flag = false;
  int possibleA, possibleB, possibleC;
  int numbersInRange = (R - L + 1);
  if (numbersInRange < 3) {
    flag = false;
  } else if (numbersInRange > 3) {
    flag = true;
    if (L % 2) {
      L++;
    }
    possibleA = L;
    possibleB = L + 1;
    possibleC = L + 2;
  } else {
    if (!(L % 2)) {
      flag = true;
      possibleA = L;
      possibleB = L + 1;
      possibleC = L + 2;
    } else {
      flag = false;
    }
  }
  if (flag == true) {
    cout << ""("" << possibleA << "", "" << possibleB << "", "" << possibleC << "")""
         << "" is one such possible triplet between "" << L << "" and "" << R
         << ""\n"";
  } else {
    cout << ""No Such Triplet exists between "" << L << "" and "" << R << ""\n"";
  }
}
int main() {
  int L, R;
  L = 2;
  R = 10;
  possibleTripletInRange(L, R);
  L = 23;
  R = 46;
  possibleTripletInRange(L, R);
  return 0;
}",Finding a Non Transitive Co.
172,Count n digit numbers not having a particular digit | C ++ Implementation of above method ; Finding number of possible number with n digits excluding a particular digit ; Checking if number of digits is zero ; Checking if number of digits is one ; Checking if number of digits is odd ; Calling digitNumber function with ( digit - 1 ) / 2 digits ; Calling digitNumber function with n / 2 digits ; Calling digitNumber function Checking if excluding digit is zero or non - zero ; Driver function to run above program ; Initializing variables,"#include <bits/stdc++.h>
#definemod1000000007
using namespace std;
long long digitNumber(long long n) {
  if (n == 0)
    return 1;
  if (n == 1)
    return 9;
  if (n % 2) {
    long long temp = digitNumber((n - 1) / 2) % mod;
    return (9 * (temp * temp) % mod) % mod;
  } else {
    long long temp = digitNumber(n / 2) % mod;
    return (temp * temp) % mod;
  }
}
int countExcluding(int n, int d) {
  if (d == 0)
    return (9 * digitNumber(n - 1)) % mod;
  else
    return (8 * digitNumber(n - 1)) % mod;
}
int main() {
  long long d = 9;
  int n = 3;
  cout << countExcluding(n, d) << endl;
  return 0;
}",Count n digit numbers not having a particular digit.
173,"Check if given number is Emirp Number or not | C ++ program to check if given number is Emirp or not . ; Returns true if n is prime . Else false . ; Corner case ; Check from 2 to n - 1 ; Function will check whether number is Emirp or not ; Check if n is prime ; Find reverse of n ; If both Original and Reverse are Prime , then it is an Emirp number ; Driver code ; Input number","#include <iostream>
using namespace std;
bool isPrime(int n) {
  if (n <= 1)
    return false;
  for (int i = 2; i < n; i++)
    if (n % i == 0)
      return false;
  return true;
}
bool isEmirp(int n) {
  if (isPrime(n) == false)
    return false;
  int rev = 0;
  while (n != 0) {
    int d = n % 10;
    rev = rev * 10 + d;
    n /= 10;
  }
  return isPrime(rev);
}
int main() {
  int n = 13;
  if (isEmirp(n) == true)
    cout << ""Yes"";
  else
    cout << ""No"";
}",Check if given number is Emirp Number or not.
174,Program to Convert Radian to Degree | C ++ code to convert radian to degree ; Function for convertion ; Driver code,"#include <iostream>
using namespace std;
double Convert(double radian) {
  double pi = 3.14159;
  return (radian * (180 / pi));
}
int main() {
  double radian = 5.0;
  double degree = Convert(radian);
  cout << degree;
  return 0;
}",Program to Convert Radian to Degree.
175,Find trace of matrix formed by adding Row | C ++ program to find trace of matrix formed by adding Row - major and Column - major order of same matrix ; Return sum of first n integers of an AP ; Return the trace of sum of row - major matrix and column - major matrix ; Finding nth element in AP in case of Row major matrix . ; Finding sum of first n integers of AP in case of Row major matrix ; Finding nth element in AP in case of Row major matrix ; Finding sum of first n integers of AP in case of Column major matrix ; Driven Program,"#include <bits/stdc++.h>
using namespace std;
int sn(int n, int an) { return (n * (1 + an)) / 2; }
int trace(int n, int m) {
  int an = 1 + (n - 1) * (m + 1);
  int rowmajorSum = sn(n, an);
  an = 1 + (n - 1) * (n + 1);
  int colmajorSum = sn(n, an);
  return rowmajorSum + colmajorSum;
}
int main() {
  int N = 3, M = 3;
  cout << trace(N, M) << endl;
  return 0;
}",Find trace of matrix formed by adding Row.
176,Maximum of smallest possible area that can get with exactly k cut of given rectangular | C ++ code for Maximum of smallest possible area that can get with exactly k cut of given rectangular ; Utility Function ; for the 1 st case ; for the second case ; print final result ; driver code,"#include <bits/stdc++.h>
using namespace std;
void max_area(int n, int m, int k) {
  if (k > (n + m - 2))
    cout << ""Not possible"" << endl;
  else {
    int result;
    if (k < max(m, n) - 1) {
      result = max(m * (n / (k + 1)), n * (m / (k + 1)));
    } else {
      result = max(m / (k - n + 2), n / (k - m + 2));
    }
    cout << result << endl;
  }
}
int main() {
  int n = 3, m = 4, k = 1;
  max_area(n, m, k);
}",Maximum of smallest possible area that can get with exactly k cut of given rectangular.
177,Program to find the area of a Square | CPP program to find the area of a square ; function to find the area ; Driver program,"#include <iostream>
using namespace std;
int area_fun(int side) {
  int area = side * side;
  return area;
}
int main() {
  int side = 4;
  int area = area_fun(side);
  cout << area;
  return 0;
}",Program to find the area of a Square.
178,Count ways to express a number as sum of consecutive numbers | C ++ program to count number of ways to express N as sum of consecutive numbers . ; Utility method to compute number of ways in which N can be represented as sum of consecutive number ; constraint on values of L gives us the time Complexity as O ( N ^ 0.5 ) ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
long int countConsecutive(long int N) {
  long int count = 0;
  for (long int L = 1; L * (L + 1) < 2 * N; L++) {
    double a = (1.0 * N - (L * (L + 1)) / 2) / (L + 1);
    if (a - (int)a == 0.0)
      count++;
  }
  return count;
}
int main() {
  long int N = 15;
  cout << countConsecutive(N) << endl;
  N = 10;
  cout << countConsecutive(N) << endl;
  return 0;
}",Count ways to express a number as sum of consecutive numbers.
179,"Automorphic Number | C ++ program to check if a number is Authomorphic ; Function to check Automorphic number ; Store the square ; Start Comparing digits ; Return false , if any digit of N doesn ' t ▁ ▁ match ▁ with ▁ its ▁ square ' s digits from last ; Reduce N and square ; Driver code","#include <iostream>
using namespace std;
bool isAutomorphic(int N) {
  int sq = N * N;
  while (N > 0) {
    if (N % 10 != sq % 10)
      return false;
    N /= 10;
    sq /= 10;
  }
  return true;
}
int main() {
  int N = 5;
  isAutomorphic(N) ? cout << ""Automorphic"" : cout << ""Not Automorphic"";
  return 0;
}",Automorphic Number.
180,Number with maximum number of prime factors | C ++ program to find integer having maximum number of prime factor in first N natural numbers ; Return smallest number having maximum prime factors . ; default value of boolean is false ; Sieve of eratosthenes ; Storing prime numbers . ; Generating number having maximum prime factors . ; Driven Program,"#include <bits/stdc++.h>
using namespace std;
int maxPrimefactorNum(int N) {
  bool arr[N + 5];
  memset(arr, true, sizeof(arr));
  for (int i = 3; i * i <= N; i += 2) {
    if (arr[i])
      for (int j = i * i; j <= N; j += i)
        arr[j] = false;
  }
  vector<int> prime;
  prime.push_back(2);
  for (int i = 3; i <= N; i += 2)
    if (arr[i])
      prime.push_back(i);
  int i = 0, ans = 1;
  while (ans * prime[i] <= N && i < prime.size()) {
    ans *= prime[i];
    i++;
  }
  return ans;
}
int main() {
  int N = 40;
  cout << maxPrimefactorNum(N) << endl;
  return 0;
}",Number with maximum number of prime factors.
181,"Highest power of 2 less than or equal to given number | C ++ program to find highest power of 2 smaller than or equal to n . ; check for the set bits ; Then we remove all but the top bit by xor ' ing ▁ the ▁ ▁ string ▁ of ▁ 1' s with that string of 1 ' s ▁ shifted ▁ one ▁ to ▁ ▁ the ▁ left , ▁ and ▁ we ▁ end ▁ up ▁ with ▁ just ▁ the ▁ one ▁ top ▁ bit ▁ ▁ followed ▁ by ▁ 0' s . ; Driver code","#include <iostream>
using namespace std;
unsigned highestPowerof2(unsigned x) {
  x |= x >> 1;
  x |= x >> 2;
  x |= x >> 4;
  x |= x >> 8;
  x |= x >> 16;
  return x ^ (x >> 1);
}
int main() {
  int n = 10;
  cout << highestPowerof2(n) << ""\n"";
  return 0;
}",Highest power of 2 less than or equal to given number.
182,Sum of all proper divisors of a natural number | C ++ program to find sum of all divisors of a natural number ; Function to calculate sum of all proper divisors num -- > given natural number ; Final result of summation of divisors ; there will be no proper divisor ; find all divisors which divides ' num ' ; if ' i ' is divisor of ' num ' ; if both divisors are same then add it only once else add both ; Add 1 to the result as 1 is also a divisor ; Driver program to run the case,"#include <bits/stdc++.h>
using namespace std;
int divSum(int num) {
  int result = 0;
  if (num == 1)
    return result;
  for (int i = 2; i <= sqrt(num); i++) {
    if (num % i == 0) {
      if (i == (num / i))
        result += i;
      else
        result += (i + num / i);
    }
  }
  return (result + 1);
}
int main() {
  int num = 36;
  cout << divSum(num);
  return 0;
}",Sum of all proper divisors of a natural number.
183,"Find Square Root under Modulo p | Set 1 ( When p is in form of 4 * i + 3 ) | An efficient C ++ program to find square root under modulo p when p is 7 , 11 , 19 , 23 , 31 , ... etc . ; Utility function to do modular exponentiation . It returns ( x ^ y ) % p . ; int res = 1 ; Initialize result x = x % p ; Update x if it is more than or equal to p ; If y is odd , multiply x with result ; y must be even now y = y >> 1 ; y = y / 2 ; Returns true if square root of n under modulo p exists Assumption : p is of the form 3 * i + 4 where i >= 1 ; Try "" + ( n ^ ( ( p ▁ + ▁ 1 ) / 4 ) ) "" ; Try "" - ( n ▁ ^ ▁ ( ( p ▁ + ▁ 1 ) / 4 ) ) "" ; If none of the above two work , then square root doesn 't exist ; Driver program to test","#include <iostream>
using namespace std;
int power(int x, int y, int p) {
  while (y > 0) {
    if (y & 1)
      res = (res * x) % p;
    x = (x * x) % p;
  }
  return res;
}
void squareRoot(int n, int p) {
  if (p % 4 != 3) {
    cout << ""Invalid Input"";
    return;
  }
  n = n % p;
  int x = power(n, (p + 1) / 4, p);
  if ((x * x) % p == n) {
    cout << ""Square root is "" << x;
    return;
  }
  x = p - x;
  if ((x * x) % p == n) {
    cout << ""Square root is "" << x;
    return;
  }
  cout << ""Square root doesn't exist "";
}
int main() {
  int p = 7;
  int n = 2;
  squareRoot(n, p);
  return 0;
}",Find Square Root under Modulo p.
184,"Primality Test | Set 3 ( Millerâ €“ Rabin ) | C ++ program Miller - Rabin primality test ; Utility function to do modular exponentiation . It returns ( x ^ y ) % p ; Initialize result ; Update x if it is more than or equal to p ; If y is odd , multiply x with result ; y must be even now y = y >> 1 ; y = y / 2 ; This function is called for all k trials . It returns false if n is composite and returns true if n is probably prime . d is an odd number such that d * 2 < sup > r < / sup > = n - 1 for some r >= 1 ; Pick a random number in [ 2. . n - 2 ] Corner cases make sure that n > 4 ; Compute a ^ d % n ; Keep squaring x while one of the following doesn 't  happen  (i) d does not reach n-1  (ii) (x^2) % n is not 1  (iii) (x^2) % n is not n-1 ; Return composite ; It returns false if n is composite and returns true if n is probably prime . k is an input parameter that determines accuracy level . Higher value of k indicates more accuracy . ; Corner cases ; Find r such that n = 2 ^ d * r + 1 for some r >= 1 ; Iterate given nber of ' k ' times ; Driver program","#include <bits/stdc++.h>
using namespace std;
int power(int x, unsigned int y, int p) {
  int res = 1;
  x = x % p;
  while (y > 0) {
    if (y & 1)
      res = (res * x) % p;
    x = (x * x) % p;
  }
  return res;
}
bool miillerTest(int d, int n) {
  int a = 2 + rand() % (n - 4);
  int x = power(a, d, n);
  if (x == 1 x == n - 1)
    return true;
  while (d != n - 1) {
    x = (x * x) % n;
    d *= 2;
    if (x == 1)
      return false;
    if (x == n - 1)
      return true;
  }
  return false;
}
bool isPrime(int n, int k) {
  if (n <= 1 n == 4)
    return false;
  if (n <= 3)
    return true;
  int d = n - 1;
  while (d % 2 == 0)
    d /= 2;
  for (int i = 0; i < k; i++)
    if (!miillerTest(d, n))
      return false;
  return true;
}
int main() {
  int k = 4;
  cout << ""All primes smaller than 100: \n"";
  for (int n = 1; n < 100; n++)
    if (isPrime(n, k))
      cout << n << "" "";
  return 0;
}",Primality Test.
185,Length of the Longest Consecutive 1 s in Binary Representation | C ++ program to find length of the longest consecutive 1 s in binary representation of a number . ; Function to find length of the longest consecutive 1 s in binary representation of a number ; Initialize result ; Count the number of iterations to reach x = 0. ; This operation reduces length of every sequence of 1 s by one . ; Driver code,"#include <bits/stdc++.h>
using namespace std;
int maxConsecutiveOnes(int x) {
  int count = 0;
  while (x != 0) {
    x = (x & (x << 1));
    count++;
  }
  return count;
}
int main() {
  cout << maxConsecutiveOnes(14) << endl;
  cout << maxConsecutiveOnes(222) << endl;
  return 0;
}",Length of the Longest Consecutive 1 s in Binary Representation.
186,Subtract two numbers without using arithmetic operators | C ++ program to Subtract two numbers without using arithmetic operators ; Iterate till there is no carry ; borrow contains common set bits of y and unset bits of x ; Subtraction of bits of x and y where at least one of the bits is not set ; Borrow is shifted by one so that subtracting it from x gives the required sum ; Driver Code,"#include <iostream>
using namespace std;
int subtract(int x, int y) {
  while (y != 0) {
    int borrow = (~x) & y;
    x = x ^ y;
    y = borrow << 1;
  }
  return x;
}
int main() {
  int x = 29, y = 13;
  cout << ""x - y is "" << subtract(x, y);
  return 0;
}",Subtract two numbers without using arithmetic operators.
187,Subtract two numbers without using arithmetic operators | CPP Program to subtract two Number without using arithmetic operator Recursive implementation . ; Driver program,"#include <iostream>
using namespace std;
int subtract(int x, int y) {
  if (y == 0)
    return x;
  return subtract(x ^ y, (~x & y) << 1);
}
int main() {
  int x = 29, y = 13;
  cout << ""x - y is "" << subtract(x, y);
  return 0;
}",Subtract two numbers without using arithmetic operators.
188,Kth ancestor of all nodes in an N | C ++ implementation of the above approach ; Function to add an edge in the tree ; DFS to find the Kth ancestor of every node ; Pushing current node in the vector ; Traverse its neighbors ; If K ancestors are not found for current node ; Add the Kth ancestor for the node ; Function to find Kth ancestor of each node ; Building the tree ; Stores all parents of a node ; Store Kth ancestor of all nodes ; Print the ancestors ; Driver Code ; Given N and K ; Given edges of n - ary tree ; Function Call,"#include <bits/stdc++.h>
using namespace std;
void addEdge(vector<int> v[], int x, int y) {
  v[x].push_back(y);
  v[y].push_back(x);
}
void dfs(vector<int> tree[], vector<int> &temp, int ancestor[], int u,
         int parent, int k) {
  temp.push_back(u);
  for (auto i : tree[u]) {
    if (i == parent)
      continue;
    dfs(tree, temp, ancestor, i, u, k);
  }
  temp.pop_back();
  if (temp.size() < k) {
    ancestor[u] = -1;
  } else {
    ancestor[u] = temp[temp.size() - k];
  }
}
void KthAncestor(int N, int K, int E, int edges[][2]) {
  vector<int> tree[N + 1];
  for (int i = 0; i < E; i++) {
    addEdge(tree, edges[i][0], edges[i][1]);
  }
  vector<int> temp;
  int ancestor[N + 1];
  dfs(tree, temp, ancestor, 1, 0, K);
  for (int i = 1; i <= N; i++) {
    cout << ancestor[i] << "" "";
  }
}
int main() {
  int N = 9;
  int K = 2;
  int E = 8;
  int edges[8][2] = {{1, 2}, {1, 3}, {2, 4}, {2, 5},
                     {2, 6}, {3, 7}, {3, 8}, {3, 9}};
  KthAncestor(N, K, E, edges);
  return 0;
}",Kth ancestor of all nodes in an N.
189,Queries to count array elements greater than or equal to a given number with updates | C ++ program for the above approach ; Function to build a segment tree ; Check for base case ; Find mid point ; Recursively build the segment tree ; Function for push down operation on the segment tree ; Function to update the segment tree ; Complete overlap ; Find mid ; Perform push down operation on segment tree ; Recursively update the segment tree ; Function to process the query ; Base case ; Find mid ; Perform push down operation on segment tree ; Recursively calculate the result of the query ; Return the result ; Function to count the numbers which are greater than the given query ; Sort the input array ; Create segment tree of size 4 * n ; Build the segment tree ; Iterate over the queries ; Store result in array ; Update the elements in the given range ; Print the result of queries ; Driver Code ; Function Call,"#include <bits/stdc++.h>
using namespace std;
void build(vector<int> &sum, vector<int> &a, int l, int r, int rt) {
  if (l == r) {
    sum[rt] = a[l - 1];
    return;
  }
  int m = (l + r) >> 1;
  build(sum, a, l, m, rt << 1);
  build(sum, a, m + 1, r, rt << 1 1);
}
void pushDown(vector<int> &sum, vector<int> &add, int rt, int ln, int rn) {
  if (add[rt]) {
    add[rt << 1] += add[rt];
    add[rt << 1 1] += add[rt];
    sum[rt << 1] += add[rt] * ln;
    sum[rt << 1 1] += add[rt] * rn;
    add[rt] = 0;
  }
}
void update(vector<int> &sum, vector<int> &add, int L, int R, int C, int l,
            int r, int rt) {
  if (L <= l && r <= R) {
    sum[rt] += C * (r - l + 1);
    add[rt] += C;
    return;
  }
  int m = (l + r) >> 1;
  pushDown(sum, add, rt, m - l + 1, r - m);
  if (L <= m)
    update(sum, add, L, R, C, l, m, rt << 1);
  if (R > m)
    update(sum, add, L, R, C, m + 1, r, rt << 1 1);
}
int query(vector<int> &sum, vector<int> &add, int L, int R, int l, int r,
          int rt) {
  if (L <= l && r <= R) {
    return sum[rt];
  }
  int m = (l + r) >> 1;
  pushDown(sum, add, rt, m - l + 1, r - m);
  int ans = 0;
  if (L <= m)
    ans += query(sum, add, L, R, l, m, rt << 1);
  if (R > m)
    ans += query(sum, add, L, R, m + 1, r, rt << 1 1);
  return ans;
}
void sequenceMaintenance(int n, int q, vector<int> &a, vector<int> &b, int m) {
  sort(a.begin(), a.end());
  vector<int> sum, add, ans;
  sum.assign(n << 2, 0);
  add.assign(n << 2, 0);
  build(sum, a, 1, n, 1);
  for (int i = 0; i < q; i++) {
    int l = 1, r = n, pos = -1;
    while (l <= r) {
      int m = (l + r) >> 1;
      if (query(sum, add, m, m, 1, n, 1) >= b[i]) {
        r = m - 1;
        pos = m;
      } else {
        l = m + 1;
      }
    }
    if (pos == -1)
      ans.push_back(0);
    else {
      ans.push_back(n - pos + 1);
      update(sum, add, pos, n, -m, 1, n, 1);
    }
  }
  for (int i = 0; i < ans.size(); i++) {
    cout << ans[i] << "" "";
  }
}
int main() {
  int N = 4;
  int Q = 3;
  int M = 1;
  vector<int> arr = {1, 2, 3, 4};
  vector<int> query = {4, 3, 1};
  sequenceMaintenance(N, Q, arr, query, M);
  return 0;
}",Queries to count array elements greater than or equal to a given number with updates.
190,Minimize Array length by repeatedly replacing co | C ++ Program for the above approach ; Function to find the final array length by replacing coprime pair with 1 ; Iterate over all pairs of element ; Check if gcd is 1 ; If no coprime pair found return false ; Driver code ; Check if atleast one coprime pair exists in the array ; If no such pair exists,"#include <bits/stdc++.h>
using namespace std;
bool hasCoprimePair(vector<int> &arr, int n) {
  for (int i = 0; i < n - 1; i++) {
    for (int j = i + 1; j < n; j++) {
      if (__gcd(arr[i], arr[j]) == 1) {
        return true;
      }
    }
  }
  return false;
}
int main() {
  int n = 3;
  vector<int> arr = {6, 9, 15};
  if (hasCoprimePair(arr, n)) {
    cout << 1 << endl;
  } else {
    cout << n << endl;
  }
}",Minimize Array length by repeatedly replacing co.
191,"Count of ways to split N into Triplets forming a Triangle | C ++ Program to implement the above approach ; Function to return the required number of ways ; Check if a , b and c can form a triangle ; Return number of ways ; Driver Code","#include <bits/stdc++.h>
using namespace std;
int Numberofways(int n) {
  int count = 0;
  for (int a = 1; a < n; a++) {
    for (int b = 1; b < n; b++) {
      int c = n - (a + b);
      if (a + b > c && a + c > b && b + c > a) {
        count++;
      }
    }
  }
  return count;
}
int main() {
  int n = 15;
  cout << Numberofways(n) << endl;
  return 0;
}",Count of ways to split N into Triplets forming a Triangle.
192,Count of pairs having each element equal to index of the other from an Array | C ++ program to implement the above approach ; Function to print the count of pair ; Iterate over all the elements of the array ; Increment the count ; Print the result ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
void countPairs(int N, int arr[]) {
  int count = 0;
  for (int i = 0; i < N; i++) {
    if (i == arr[arr[i] - 1] - 1) {
      count++;
    }
  }
  cout << (count / 2) << endl;
}
int main() {
  int arr[] = {2, 1, 4, 3};
  int N = sizeof(arr) / sizeof(arr[0]);
  countPairs(N, arr);
}",Count of pairs having each element equal to index of the other from an Array.
193,Find length of longest Fibonacci like subsequence | CPP implementation of above approach ; Function to return the max Length of Fibonacci subsequence ; Store all array elements in a hash table ; check until next fib element is found ; next element of fib subseq ; Driver program,"#include <bits/stdc++.h>
using namespace std;
int LongestFibSubseq(int A[], int n) {
  unordered_set<int> S(A, A + n);
  int maxLen = 0, x, y;
  for (int i = 0; i < n; ++i) {
    for (int j = i + 1; j < n; ++j) {
      x = A[j];
      y = A[i] + A[j];
      int length = 2;
      while (S.find(y) != S.end()) {
        int z = x + y;
        x = y;
        y = z;
        maxLen = max(maxLen, ++length);
      }
    }
  }
  return maxLen >= 3 ? maxLen : 0;
}
int main() {
  int A[] = {1, 2, 3, 4, 5, 6, 7, 8};
  int n = sizeof(A) / sizeof(A[0]);
  cout << LongestFibSubseq(A, n);
  return 0;
}",Find length of longest Fibonacci like subsequence.
194,Maximize count of elements that can be selected having minimum difference between their sum and K | C ++ implementation of the above approach ; Function to count maximum number of elements that can be selected ; Sort he array ; Traverse the array ; Add current element to the sum ; IF sum exceeds k ; Increment count ; Return the count ; Driver Code ; Function call,"#include <bits/stdc++.h>
using namespace std;
int CountMaximum(int arr[], int n, int k) {
  sort(arr, arr + n);
  int sum = 0, count = 0;
  for (int i = 0; i < n; i++) {
    sum += arr[i];
    if (sum > k)
      break;
    count++;
  }
  return count;
}
int main() {
  int arr[] = {30, 30, 10, 10};
  int n = sizeof(arr) / sizeof(arr[0]);
  int k = 50;
  cout << CountMaximum(arr, n, k);
  return 0;
}",Maximize count of elements that can be selected having minimum difference between their sum and K.
195,Maximum types of candies a person can eat if only N / 2 of them can be eaten | C ++ program for the above approach ; Function to find number of candy types ; Declare a hashset to store candies ; Traverse the given array and inserts element into set ; Return the result ; Function to find maximum number of types of candies a person can eat ; Store the number of candies allowed to eat ; Store the number of candy types ; Return the result ; Driver Code ; Given Input ; Function Call,"#include <bits/stdc++.h>
using namespace std;
int num_candyTypes(vector<int> &candies) {
  unordered_set<int> s;
  for (int i = 0; i < candies.size(); i++) {
    s.insert(candies[i]);
  }
  return s.size();
}
void distribute_candies(vector<int> &candies) {
  int allowed = candies.size() / 2;
  int types = num_candyTypes(candies);
  if (types < allowed)
    cout << types;
  else
    cout << allowed;
}
int main() {
  vector<int> candies = {4, 4, 5, 5, 3, 3};
  distribute_candies(candies);
  return 0;
}",Maximum types of candies a person can eat if only N / 2 of them can be eaten.
196,Length of diagonals of a Rhombus using length of Side and vertex Angle | C ++ program to implement the above approach ; Function to calculate the length of diagonals of a rhombus using length of sides and vertex angle ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
double Length_Diagonals(int a, double theta) {
  double p = a * sqrt(2 + (2 * cos(theta * (3.141 / 180))));
  double q = a * sqrt(2 - (2 * cos(theta * (3.141 / 180))));
  cout << fixed << setprecision(2) << p << "" "" << q;
}
int main() {
  int a = 6;
  int theta = 45;
  Length_Diagonals(a, theta);
  return 0;
}",Length of diagonals of a Rhombus using length of Side and vertex Angle.
197,"Count of even and odd set bit with array element after XOR with K | C ++ program to count the set bits after taking XOR with a number K ; Function to store EVEN and odd variable ; Store the count of even and odd set bit ; Count the set bit using in built function ; Count of set - bit of K ; If y is odd then , count of even and odd set bit will be interchanged ; Else it will remain same as the original array ; Driver 's Code ; Function call to count even and odd","#include <bits/stdc++.h>
using namespace std;
void countEvenOdd(int arr[], int n, int K) {
  int even = 0, odd = 0;
  for (int i = 0; i < n; i++) {
    int x = __builtin_popcount(arr[i]);
    if (x % 2 == 0)
      even++;
    else
      odd++;
  }
  int y;
  y = __builtin_popcount(K);
  if (y & 1) {
    cout << ""Even = "" << odd << "", Odd = "" << even;
  } else {
    cout << ""Even = "" << even << "", Odd = "" << odd;
  }
}
int main(void) {
  int arr[] = {4, 2, 15, 9, 8, 8};
  int K = 3;
  int n = sizeof(arr) / sizeof(arr[0]);
  countEvenOdd(arr, n, K);
  return 0;
}",Count of even and odd set bit with array element after XOR with K.
198,Number of ways to choose a pair containing an even and an odd number from 1 to N | C ++ implementation of the above approach ; Driver code,"#include <iostream>
using namespace std;
int main() {
  int N = 6;
  int Even = N / 2;
  int Odd = N - Even;
  cout << Even * Odd;
  return 0;
}",Number of ways to choose a pair containing an even and an odd number from 1 to N.
199,Longest subsequence from an array of pairs having first element increasing and second element decreasing . | C ++ program for the above approach ; Recursive function to find the length of the longest subsequence of pairs whose first element is increasing and second is decreasing ; Base case ; Not include the current pair in the longest subsequence ; Including the current pair in the longest subsequence ; Driver Code ; Given Input ; Function Call,"#include <bits/stdc++.h>
using namespace std;
int longestSubSequence(pair<int, int> A[], int N, int ind = 0,
                       int lastf = INT_MIN, int lasts = INT_MAX) {
  if (ind == N)
    return 0;
  int ans = longestSubSequence(A, N, ind + 1, lastf, lasts);
  if (A[ind].first > lastf && A[ind].second < lasts)
    ans =
        max(ans,
            longestSubSequence(A, N, ind + 1, A[ind].first, A[ind].second) + 1);
  return ans;
}
int main() {
  pair<int, int> A[] = {{1, 2}, {2, 2}, {3, 1}};
  int N = sizeof(A) / sizeof(A[0]);
  cout << longestSubSequence(A, N) << ""\n"";
  return 0;
}",Longest subsequence from an array of pairs having first element increasing and second element decreasing ..
200,"Count triples with Bitwise AND equal to Zero | C ++ program for the above approach ; Function to find the number of triplets whose Bitwise AND is 0. ; Stores the count of triplets having bitwise AND equal to 0 ; Stores frequencies of all possible A [ i ] & A [ j ] ; Traverse the array ; Update frequency of Bitwise AND of all array elements with a ; Traverse the array ; Iterate the map ; If bitwise AND of triplet is zero , increment cnt ; Return the number of triplets whose Bitwise AND is 0. ; Driver Code ; Input Array ; Function Call","#include <bits/stdc++.h>
#include <iostream>
using namespace std;
int countTriplets(vector<int> &A) {
  int cnt = 0;
  unordered_map<int, int> tuples;
  for (auto a : A)
    for (auto b : A)
      ++tuples[a & b];
  for (auto a : A)
    for (auto t : tuples)
      if ((t.first & a) == 0)
        cnt += t.second;
  return cnt;
}
int main() {
  vector<int> A = {2, 1, 3};
  cout << countTriplets(A);
  return 0;
}",Count triples with Bitwise AND equal to Zero.
201,"Count ways to reach a score using 1 and 2 with no consecutive 2 s | Bottom up approach for counting ways to reach a score using 1 and 2 with consecutive 2 allowed ; noOfWays [ i ] will store count for value i . 3 extra values are to take care of corner case n = 0 ; Loop till "" n + 1"" to compute value for "" n "" ; number of ways if first run is 1 ; Driver code","#include <iostream>
using namespace std;
int CountWays(int n) {
  int noOfWays[n + 3];
  noOfWays[0] = 1;
  noOfWays[1] = 1;
  noOfWays[2] = 1 + 1;
  for (int i = 3; i < n + 1; i++) {
    noOfWays[i] = noOfWays[i - 1] + noOfWays[i - 3];
  }
  return noOfWays[n];
}
int main() {
  int n = 0;
  cout << CountWays(n);
  return 0;
}",Count ways to reach a score using 1 and 2 with no consecutive 2 s.
202,"Program to print Spiral Pattern |  ; Create row and col to traverse rows and columns ; Variable to determine the movement r = right , l = left , d = down , u = upper ; Array for matrix ; Assign the value ; switch - case to determine the next index ; If right , go right ; if left , go left ; if up , go up ; if down , go down ; Check if the matrix has reached array boundary ; Add the left size for the next boundary ; If 2 rotations has been made , decrease the size left by 1 ; switch - case to rotate the movement ; if right , rotate to down ; if down , rotate to left ; if left , rotate to up ; if up , rotate to right ; Print the matrix ; Driver Code ; Get the size of size ; Print the Spiral Pattern","#include <iostream>
using namespace std;
void printSpiral(int size) {
  int row = 0, col = 0;
  int boundary = size - 1;
  int sizeLeft = size - 1;
  int flag = 1;
  char move = 'r';
  int matrix[size][size] = {0};
  for (int i = 1; i < size * size + 1; i++) {
    matrix[row][col] = i;
    switch (move) {
    case 'r':
      col += 1;
      break;
    case 'l':
      col -= 1;
      break;
    case 'u':
      row -= 1;
      break;
    case 'd':
      row += 1;
      break;
    }
    if (i == boundary) {
      boundary += sizeLeft;
      if (flag != 2) {
        flag = 2;
      } else {
        flag = 1;
        sizeLeft -= 1;
      }
      switch (move) {
      case 'r':
        move = 'd';
        break;
      case 'd':
        move = 'l';
        break;
      case 'l':
        move = 'u';
        break;
      case 'u':
        move = 'r';
        break;
      }
    }
  }
  for (row = 0; row < size; row++) {
    for (col = 0; col < size; col++) {
      int n = matrix[row][col];
      if (n < 10)
        cout << n << "" "";
      else
        cout << n << "" "";
    }
    cout << endl;
  }
}
int main() {
  int size = 5;
  printSpiral(size);
  return 0;
}",Program to print Spiral Pattern.
203,"Find the last player to be able to flip a character in a Binary String | C ++ program for the above approach ; Function to check if player A wins the game or not ; Stores size of the groups of 0 s ; Stores size of the group of 0 s ; Traverse the array ; Increment c by 1 if a [ i ] is 0 ; Otherwise , push the size in array and reset c to 0 ; If there is no substring of odd length consisting only of 0 s ; If there is only 1 substring of odd length consisting only of 0 s ; Otherwise ; Stores the size of the largest and second largest substrings of 0 s ; Traverse the array v [ ] ; If current element is greater than first , then update both first and second ; If arr [ i ] is in between first and second , then update second ; If the condition is satisfied ; Driver Code","#include <bits/stdc++.h>
using namespace std;
void findWinner(string a, int n) {
  vector<int> v;
  int c = 0;
  for (int i = 0; i < n; i++) {
    if (a[i] == '0') {
      c++;
    } else {
      if (c != 0)
        v.push_back(c);
      c = 0;
    }
  }
  if (c != 0)
    v.push_back(c);
  if (v.size() == 0) {
    cout << ""Player B"";
    return;
  }
  if (v.size() == 1) {
    if (v[0] & 1)
      cout << ""Player A"";
    else
      cout << ""Player B"";
    return;
  }
  int first = INT_MIN;
  int second = INT_MIN;
  for (int i = 0; i < v.size(); i++) {
    if (a[i] > first) {
      second = first;
      first = a[i];
    } else if (a[i] > second && a[i] != first)
      second = a[i];
  }
  if ((first & 1) && (first + 1) / 2 > second)
    cout << ""Player A"";
  else
    cout << ""Player B"";
}
int main() {
  string S = ""1100011"";
  int N = S.length();
  findWinner(S, N);
  return 0;
}",Find the last player to be able to flip a character in a Binary String.
204,Check if K palindromic strings can be formed from a given string | C ++ program to check whether the string is K palindrome or not ; function to check whether the string is K palindrome or not ; map to frequency of character ; Check when k is given as same as length of string ; iterator for map ; storing the frequency of every character in map ; if K is greater than size of string then return false ; check that number of character having the odd frequency ; if k is less than number of odd frequency character then it is again false other wise true ; Driver code,"#include <iostream>
#include <map>
using namespace std;
bool can_Construct(string S, int K) {
  map<int, int> m;
  int i = 0, j = 0, p = 0;
  if (S.length() == K) {
    return true;
  }
  map<int, int>::iterator h;
  for (i = 0; i < S.length(); i++) {
    m[S[i]] = m[S[i]] + 1;
  }
  if (K > S.length()) {
    return false;
  } else {
    for (h = m.begin(); h != m.end(); h++) {
      if (m[h->first] % 2 != 0) {
        p = p + 1;
      }
    }
  }
  if (K < p) {
    return false;
  }
  return true;
}
int main() {
  string S = ""annabelle"";
  int K = 4;
  if (can_Construct(S, K)) {
    cout << ""Yes"";
  } else {
    cout << ""No"";
  }
}",Check if K palindromic strings can be formed from a given string.
205,"Check if two strings are same ignoring their cases |  ; Function to compare two strings ignoring their cases ; Convert to lowercase using transform ( ) function and :: tolower in STL ; Comparing both using inbuilt function ; if strings are equal , return true otherwise false ; Function to print the same or not same if strings are equal or not equal ; Driver Code","#include <bits/stdc++.h>
using namespace std;
bool equalIgnoreCase(string str1, string str2) {
  int i = 0;
  transform(str1.begin(), str1.end(), str1.begin(), ::tolower);
  transform(str2.begin(), str2.end(), str2.begin(), ::tolower);
  int x = str1.compare(str2);
  if (x != 0)
    return false;
  else
    return true;
}
void equalIgnoreCaseUtil(string str1, string str2) {
  bool res = equalIgnoreCase(str1, str2);
  if (res == true)
    cout << ""Same"" << endl;
  else
    cout << ""Not Same"" << endl;
}
int main() {
  string str1, str2;
  str1 = ""Geeks"";
  str2 = ""geeks"";
  equalIgnoreCaseUtil(str1, str2);
  str1 = ""Geek"";
  str2 = ""geeksforgeeks"";
  equalIgnoreCaseUtil(str1, str2);
  return 0;
}",Check if two strings are same ignoring their cases.
206,Program to print Step Pattern | C ++ program to print Step Pattern ; function to print the steps ; declare a flag ; traverse through all the characters in the string ; if the x value is 0. . then we must increment till n ... set flag to true ; if the x value is n - 1 then we must decrement till 0 ... set flag as false ; print x * s ; checking whether to increment or decrement x ; Driver code ; Get the String and the number n ; calling the function,"#include <iostream>
using namespace std;
void steps(string str, int n) {
  bool flag;
  int x = 0;
  for (int i = 0; i < str.length(); i++) {
    if (x == 0)
      flag = true;
    if (x == n - 1)
      flag = false;
    for (int j = 0; j < x; j++)
      cout << ""*"";
    cout << str[i] << ""\n"";
    if (flag == true)
      x++;
    else
      x--;
  }
}
int main() {
  int n = 4;
  string str = ""GeeksForGeeks"";
  cout << ""String: "" << str << endl;
  cout << ""Max Length of Steps: "" << n << endl;
  steps(str, n);
  return 0;
}",Program to print Step Pattern.
207,Frequency Measuring Techniques for Competitive Programming | C ++ program to count frequencies of array items ; Mark all array elements as not visited ; Traverse through array elements and count frequencies ; Skip this element if already processed ; Count frequency ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
void countFreq(int arr[], int n) {
  vector<int> visited(n, false);
  for (int i = 0; i < n; i++) {
    if (visited[i] == true)
      continue;
    int count = 1;
    for (int j = i + 1; j < n; j++) {
      if (arr[i] == arr[j]) {
        visited[j] = true;
        count++;
      }
    }
    cout << arr[i] << "" "" << count << endl;
  }
}
int main() {
  int arr[] = {10, 20, 20, 10, 10, 20, 5, 20};
  int n = sizeof(arr) / sizeof(arr[0]);
  countFreq(arr, n);
  return 0;
}",Frequency Measuring Techniques for Competitive Programming.
208,"Check divisibility of binary string by 2 ^ k | C ++ implementation to check whether given binary number is evenly divisible by 2 ^ k or not ; function to check whether given binary number is evenly divisible by 2 ^ k or not ; count of number of 0 from last ; if count = k , number is evenly divisible , so returns true else false ; Driver program to test above ; first example ; Second example","#include <bits/stdc++.h>
using namespace std;
bool isDivisible(char str[], int k) {
  int n = strlen(str);
  int c = 0;
  for (int i = 0; i < k; i++)
    if (str[n - i - 1] == '0')
      c++;
  return (c == k);
}
int main() {
  char str1[] = ""10101100"";
  int k = 2;
  if (isDivisible(str1, k))
    cout << ""Yes"" << endl;
  else
    cout << ""No""
         << ""\n"";
  char str2[] = ""111010100"";
  k = 2;
  if (isDivisible(str2, k))
    cout << ""Yes"" << endl;
  else
    cout << ""No"" << endl;
  return 0;
}",Check divisibility of binary string by 2 ^ k.
209,"Check if any anagram of a string is palindrome or not |  ; function to check whether characters of a string can form a palindrome ; Create a count array and initialize all values as 0 ; For each character in input strings , increment count in the corresponding count array ; Count odd occurring characters ; Return true if odd count is 0 or 1 , ; Driver program to test to print printDups","#include <iostream>
using namespace std;
#defineNO_OF_CHARS256 bool canFormPalindrome(string str) {
  int count[NO_OF_CHARS] = {0};
  for (int i = 0; str[i]; i++)
    count[str[i]]++;
  int odd = 0;
  for (int i = 0; i < NO_OF_CHARS; i++) {
    if (count[i] & 1)
      odd++;
    if (odd > 1)
      return false;
  }
  return true;
}
int main() {
  canFormPalindrome(""geeksforgeeks"") ? cout << ""Yes\n"" : cout << ""No\n"";
  canFormPalindrome(""geeksogeeks"") ? cout << ""Yes\n"" : cout << ""No\n"";
  return 0;
}",Check if any anagram of a string is palindrome or not.
210,Program to check if input is an integer or a string | CPP program to check if a given string is a valid integer ; Returns true if s is a number else false ; Driver code ; Saving the input in a string ; Function returns 1 if all elements are in range '0-9' ; Function returns 0 if the input is not an integer,"#include <iostream>
using namespace std;
bool isNumber(string s) {
  for (int i = 0; i < s.length(); i++)
    if (isdigit(s[i]) == false)
      return false;
  return true;
}
int main() {
  string str = ""6790"";
  if (isNumber(str))
    cout << ""Integer"";
  else
    cout << ""String"";
}",Program to check if input is an integer or a string.
211,Print reverse of a string using recursion | C ++ program to reverse a string using recursion ; Function to print reverse of the passed string ; Driver program to test above function,"#include <bits/stdc++.h>
using namespace std;
void reverse(string str) {
  if (str.size() == 0) {
    return;
  }
  reverse(str.substr(1));
  cout << str[0];
}
int main() {
  string a = ""Geeks for Geeks"";
  reverse(a);
  return 0;
}",Print reverse of a string using recursion.
212,"Probability of distributing given balls into two halves having equal count of distinct colors | C ++ program for the above approach ; Stores the count of distinct colors in box1 ; Stores the count of distinct colors in box2 ; Function to calculate the required probability ; Calculate factorial from [ 1 , 10 ] ; Assign all distinct balls to second box ; Total number of balls ; Calculate total number of balls ; If K is an odd number ; Total ways of distributing the balls in two equal halves ; Required number of ways ; Return the required probability ; Function to calculate total number of possible distributions which satisfies the given conditions ; If used balls is equal to K / 2 ; If box1 is equal to box2 ; Base condition ; Stores the number of ways of distributing remaining balls without including the current balls in box1 ; Increment box1 by one ; Iterate over the range [ 1 , balls [ i ] ] ; If all the balls goes to box1 , then decrease box2 by one ; Total number of ways of selecting j balls ; Increment res by total number of valid ways of distributing the remaining balls ; Decrement box1 by one ; Increment box2 by 1 ; Function to calculate factorial of N ; Base Case ; Iterate over the range [ 1 , N ] ; Function to calculate NcR ; Driver Code ; Print the result","#include <bits/stdc++.h>
using namespace std;
static int box1 = 0;
static int box2 = 0;
static int fact[11];
double getProbability(int balls[], int M) {
  factorial(10);
  box2 = M;
  int K = 0;
  for (int i = 0; i < M; i++)
    K += balls[i];
  if (K % 2 == 1)
    return 0;
  long all = comb(K, K / 2);
  long validPermutation = validPermutations(K / 2, balls, 0, 0, M);
  return (double)validPermutation / all;
}
long validPermutations(int n, int balls[], int usedBalls, int i, int M) {
  if (usedBalls == n) {
    return box1 == box2 ? 1 : 0;
  }
  if (i >= M)
    return 0;
  long res = validPermutations(n, balls, usedBalls, i + 1, M);
  box1++;
  for (int j = 1; j <= balls[i]; j++) {
    if (j == balls[i])
      box2--;
    long combinations = comb(balls[i], j);
    res += combinations * validPermutations(n, balls, usedBalls + j, i + 1, M);
  }
  box1--;
  box2++;
  return res;
}
void factorial(int N) {
  fact[0] = 1;
  for (int i = 1; i <= N; i++)
    fact[i] = fact[i - 1] * i;
}
long comb(int n, int r) {
  long res = fact[n] / fact[r];
  res /= fact[n - r];
  return res;
}
int main() {
  int arr[] = {2, 1, 1};
  int N = 4;
  int M = sizeof(arr) / sizeof(arr[0]);
  cout << (getProbability(arr, M));
  return 0;
}",Probability of distributing given balls into two halves having equal count of distinct colors.
213,Area of a n | C ++ Program to find the area of a regular polygon with given radius ; Function to find the area of a regular polygon ; Side and radius cannot be negative ; Area degree converted to radians ; Driver code,"#include <bits/stdc++.h>
using namespace std;
float polyarea(float n, float r) {
  if (r < 0 && n < 0)
    return -1;
  float A = ((r * r * n) * sin((360 / n) * 3.14159 / 180)) / 2;
  return A;
}
int main() {
  float r = 9, n = 6;
  cout << polyarea(n, r) << endl;
  return 0;
}",Area of a n.
214,"Check if a line at 45 degree can divide the plane into two equal weight parts |  ; Checking if a plane can be divide by a line at 45 degrees such that weight sum is equal ; Rotating each point by 45 degrees and calculating prefix sum . Also , finding maximum and minimum x coordinates ; storing weight sum upto x - y point ; Finding prefix sum ; Line passes through i , so it neither falls left nor right . ; Driven Program","#include <bits/stdc++.h>
using namespace std;
void is_partition_possible(int n, int x[], int y[], int w[]) {
  map<int, int> weight_at_x;
  int max_x = -2e3, min_x = 2e3;
  for (int i = 0; i < n; i++) {
    int new_x = x[i] - y[i];
    max_x = max(max_x, new_x);
    min_x = min(min_x, new_x);
    weight_at_x[new_x] += w[i];
  }
  vector<int> sum_till;
  sum_till.push_back(0);
  for (int x = min_x; x <= max_x; x++) {
    sum_till.push_back(sum_till.back() + weight_at_x[x]);
  }
  int total_sum = sum_till.back();
  int partition_possible = false;
  for (int i = 1; i < sum_till.size(); i++) {
    if (sum_till[i] == total_sum - sum_till[i])
      partition_possible = true;
    if (sum_till[i - 1] == total_sum - sum_till[i])
      partition_possible = true;
  }
  printf(partition_possible ? ""YES\n"" : ""NO\n"");
}
int main() {
  int n = 3;
  int x[] = {-1, -2, 1};
  int y[] = {1, 1, -1};
  int w[] = {3, 1, 4};
  is_partition_possible(n, x, y, w);
  return 0;
}",Check if a line at 45 degree can divide the plane into two equal weight parts.
215,Slope of perpendicular to line | C ++ program find slope of perpendicular line ; Function to find the Slope of other line ; Driver code,"#include <bits/stdc++.h>
using namespace std;
double findPCSlope(double m) { return -1.0 / m; }
int main() {
  double m = 2.0;
  cout << findPCSlope(m);
  return 0;
}",Slope of perpendicular to line.
216,Program to find area of a Circular Segment | C ++ Program to find area of segment of a circle ; Function to find area of segment ; Calculating area of sector ; Calculating area of triangle ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
float pi = 3.14159;
float area_of_segment(float radius, float angle) {
  float area_of_sector = pi * (radius * radius) * (angle / 360);
  float area_of_triangle =
      (float)1 / 2 * (radius * radius) * sin((angle * pi) / 180);
  return area_of_sector - area_of_triangle;
}
int main() {
  float radius = 10.0, angle = 90.0;
  cout << ""Area of minor segment = "" << area_of_segment(radius, angle) << endl;
  cout << ""Area of major segment = "" << area_of_segment(radius, (360 - angle));
}",Program to find area of a Circular Segment.
217,Area of a Circular Sector | C ++ program to find Area of a Sector ; Calculating area of the sector ; Driver code,"#include <iostream>
using namespace std;
void SectorArea(double radius, double angle) {
  if (angle >= 360)
    cout << ""Angle not possible"";
  else {
    double sector = ((22 * radius * radius) / 7) * (angle / 360);
    cout << sector;
  }
}
int main() {
  double radius = 9;
  double angle = 60;
  SectorArea(radius, angle);
  return 0;
}",Area of a Circular Sector.
218,Make two numbers equal by multiplying with their prime factors minimum number of times | C ++ program for the above approach ; Function to calculate total number of prime factor with their prime factor ; Iterate while the number is even ; Reduce to half ; Iterate up to sqrt ( N ) ; Iterate while N has factors of i ; Removing one factor of i ; Function to count the number of factors ; Find the GCD ; Find multiples left in X and Y ; Find prime factor of multiple left in X and Y ; Initialize ans ; Check if it possible to obtain X or not ; Check if it possible to obtain Y or not ; return main ans ; Driver code ; Given Input ; Function Call,"#include <bits/stdc++.h>
using namespace std;
unordered_map<int, int> PrimeFactor(int N) {
  unordered_map<int, int> primef;
  while (N % 2 == 0) {
    if (primef.count(2)) {
      primef[2] += 1;
    } else {
      primef[2] = 1;
    }
    N /= 2;
  }
  for (int i = 3; i <= sqrt(N); i++) {
    while (N % i == 0) {
      if (primef.count(i)) {
        primef[i] += 1;
      } else {
        primef[i] = 1;
      }
      N /= 2;
    }
  }
  if (N > 2) {
    primef[N] = 1;
  }
  return primef;
}
int CountToMakeEqual(int X, int Y) {
  int gcdofXY = __gcd(X, Y);
  int newX = Y / gcdofXY;
  int newY = X / gcdofXY;
  unordered_map<int, int> primeX;
  unordered_map<int, int> primeY;
  primeX = PrimeFactor(newX);
  primeY = PrimeFactor(newY);
  int ans = 0;
  for (auto c : primeX) {
    if (X % c.first != 0) {
      return -1;
    }
    ans += primeX[c.first];
  }
  for (auto c : primeY) {
    if (Y % c.first != 0) {
      return -1;
    }
    ans += primeY[c.first];
  }
  return ans;
}
int main() {
  int X = 36;
  int Y = 48;
  int ans = CountToMakeEqual(X, Y);
  cout << ans << endl;
  return 0;
}",Make two numbers equal by multiplying with their prime factors minimum number of times.
219,"Make given segments non | C ++ program for the above approach ; Stores the details of the Segment ; Function to check whether the graph is bipartite or not ; Mark source node as visited ; Push the source vertex in queue ; Get the front of the queue ; Assign the color to the popped node ; Traverse the adjacency list of the node u ; If any node is visited & a different colors has been assigned , then return false ; Set visited [ x ] ; Push the node x into the queue ; Update color of node ; If the graph is bipartite ; Function to add an edge between the nodes u and v ; Function to check if the assignment of direction can be possible to all the segments , such that they do not intersect after a long period of time ; Stores the adjacency list of the created graph ; Generate all possible pairs ; If segments do not overlap ; Otherwise , the segments overlap ; If both segments have same speed , then add an edge ; Keep the track of visited nodes ; Iterate for all possible nodes ; Check whether graph is bipartite or not ; If the graph is bipartite ; Driver Code","#include <bits/stdc++.h>
using namespace std;
struct Node {
  int L, R, V;
};
bool check(vector<int> Adj[], int Src, int N, bool visited[]) {
  int color[N] = {0};
  visited[Src] = true;
  queue<int> q;
  q.push(Src);
  while (!q.empty()) {
    int u = q.front();
    q.pop();
    int Col = color[u];
    for (int x : Adj[u]) {
      if (visited[x] == true && color[x] == Col) {
        return false;
      } else if (visited[x] == false) {
        visited[x] = true;
        q.push(x);
        color[x] = 1 - Col;
      }
    }
  }
  return true;
}
void addEdge(vector<int> Adj[], int u, int v) {
  Adj[u].push_back(v);
  Adj[v].push_back(u);
}
void isPossible(struct Node Arr[], int N) {
  vector<int> Adj[N];
  for (int i = 0; i < N - 1; i++) {
    for (int j = i + 1; j < N; j++) {
      if (Arr[i].R<Arr[j].L Arr[i].L> Arr[j].R) {
        continue;
      } else {
        if (Arr[i].V == Arr[j].V) {
          addEdge(Adj, i, j);
        }
      }
    }
  }
  bool visited[N] = {false};
  for (int i = 0; i < N; i++) {
    if (visited[i] == false && Adj[i].size() > 0) {
      if (check(Adj, i, N, visited) == false) {
        cout << ""No"";
        return;
      }
    }
  }
  cout << ""Yes"";
}
int main() {
  struct Node arr[] = {{5, 7, 2}, {4, 6, 1}, {1, 5, 2}, {6, 5, 1}};
  int N = sizeof(arr) / sizeof(arr[0]);
  isPossible(arr, N);
  return 0;
}",Make given segments non.
220,Generate all numbers up to N in Lexicographical Order | C ++ program for the above approach ; Driver code,"#include <bits/stdc++.h>
using namespace std;
void dfs(int temp, int n, vector<int> &sol);
void lexNumbers(int n) {
  vector<int> sol;
  dfs(1, n, sol);
  cout << ""["" << sol[0];
  for (int i = 1; i < sol.size(); i++)
    cout << "", "" << sol[i];
  cout << ""]"";
}
void dfs(int temp, int n, vector<int> &sol) {
  if (temp > n)
    return;
  sol.push_back(temp);
  dfs(temp * 10, n, sol);
  if (temp % 10 != 9)
    dfs(temp + 1, n, sol);
}
int main() {
  int n = 15;
  lexNumbers(n);
  return 0;
}",Generate all numbers up to N in Lexicographical Order.
221,Minimum number of swaps required to sort an array of first N number | Function to find minimum swaps ; Initialise count variable ; If current element is not at the right position ; Swap current element with correct position of that element ; Increment for next index when current element is at correct position ; Driver code ; Function to find minimum swaps,"#include <iostream>
using namespace std;
int minimumSwaps(int arr[], int n) {
  int count = 0;
  int i = 0;
  while (i < n) {
    if (arr[i] != i + 1) {
      while (arr[i] != i + 1) {
        int temp = 0;
        temp = arr[arr[i] - 1];
        arr[arr[i] - 1] = arr[i];
        arr[i] = temp;
        count++;
      }
    }
    i++;
  }
  return count;
}
int main() {
  int arr[] = {2, 3, 4, 1, 5};
  int n = sizeof(arr) / sizeof(arr[0]);
  cout << minimumSwaps(arr, n);
}",Minimum number of swaps required to sort an array of first N number.
222,"Merge K sorted Doubly Linked List in Sorted Order | C ++ program to merge K sorted doubly linked list in sorted order ; A linked list node ; Given a reference ( pointer to pointer ) to the head Of a DLL and an int , appends a new node at the end ; Allocate node ; Put in the data ; This new node is going to be the last node , so make next of it as NULL ; If the Linked List is empty , then make the new node as head ; Else traverse till the last node ; Change the next of last node ; Make last node as previous of new node ; Function to print the list ; Run while loop unless node becomes null ; Function to merge two sorted doubly linked lists ; If any of the list is empty ; Comparison the data of two linked list ; Store head pointer before merge the list ; Changing of pointer between Two list for merging ; Changing of pointer between Two list for merging ; Condition to check if any anyone list not end ; Return head pointer of merged list ; Function to merge all sorted linked list in sorted order ; Function call to merge two sorted doubly linked list at a time ; Return final sorted doubly linked list ; Driver code ; Loop to initialize all the lists to empty ; Create first doubly linked List List1 -> 1 <= > 5 <= > 9 ; Create second doubly linked List List2 -> 2 <= > 3 <= > 7 <= > 12 ; Create third doubly linked List List3 -> 8 <= > 11 <= > 13 <= > 18 ; Function call to merge all sorted doubly linked lists in sorted order ; Print final sorted list","#include <bits/stdc++.h>
using namespace std;
struct Node {
  int data;
  Node *next;
  Node *prev;
};
void append(struct Node **head_ref, int new_data) {
  struct Node *new_node = (struct Node *)malloc(sizeof(struct Node));
  struct Node *last = *head_ref;
  new_node->data = new_data;
  new_node->next = NULL;
  if (*head_ref == NULL) {
    new_node->prev = NULL;
    *head_ref = new_node;
    return;
  }
  while (last->next != NULL)
    last = last->next;
  last->next = new_node;
  new_node->prev = last;
  return;
}
void printList(Node *node) {
  Node *last;
  while (node != NULL) {
    cout << node->data << "" "";
    last = node;
    node = node->next;
  }
}
Node *mergeList(Node *p, Node *q) {
  Node *s = NULL;
  if (p == NULL q == NULL) {
    return (p == NULL ? q : p);
  }
  if (p->data < q->data) {
    p->prev = s;
    s = p;
    p = p->next;
  } else {
    q->prev = s;
    s = q;
    q = q->next;
  }
  Node *head = s;
  while (p != NULL && q != NULL) {
    if (p->data < q->data) {
      s->next = p;
      p->prev = s;
      s = s->next;
      p = p->next;
    } else {
      s->next = q;
      q->prev = s;
      s = s->next;
      q = q->next;
    }
  }
  if (p == NULL) {
    s->next = q;
    q->prev = s;
  }
  if (q == NULL) {
    s->next = p;
    p->prev = s;
  }
  return head;
}
Node *mergeAllList(Node *head[], int k) {
  Node *finalList = NULL;
  for (int i = 0; i < k; i++) {
    finalList = mergeList(finalList, head[i]);
  }
  return finalList;
}
int main() {
  int k = 3;
  Node *head[k];
  for (int i = 0; i < k; i++) {
    head[i] = NULL;
  }
  append(&head[0], 1);
  append(&head[0], 5);
  append(&head[0], 9);
  append(&head[1], 2);
  append(&head[1], 3);
  append(&head[1], 7);
  append(&head[1], 12);
  append(&head[2], 8);
  append(&head[2], 11);
  append(&head[2], 13);
  append(&head[2], 18);
  Node *finalList = mergeAllList(head, k);
  printList(finalList);
  return 0;
}",Merge K sorted Doubly Linked List in Sorted Order.
223,Recursive Selection Sort | Recursive C ++ program to sort an array using selection sort ; Return minimum index ; Find minimum of remaining elements ; Return minimum of current and remaining . ; Recursive selection sort . n is size of a [ ] and index is index of starting element . ; Return when starting and size are same ; calling minimum index function for minimum index ; Swapping when index nd minimum index are not same ; swap ; Recursively calling selection sort function ; Driver code ; Calling function ; printing sorted array,"#include <iostream>
using namespace std;
int minIndex(int a[], int i, int j) {
  if (i == j)
    return i;
  int k = minIndex(a, i + 1, j);
  return (a[i] < a[k]) ? i : k;
}
void recurSelectionSort(int a[], int n, int index = 0) {
  if (index == n)
    return;
  int k = minIndex(a, index, n - 1);
  if (k != index)
    swap(a[k], a[index]);
  recurSelectionSort(a, n, index + 1);
}
int main() {
  int arr[] = {3, 1, 5, 2, 7, 0};
  int n = sizeof(arr) / sizeof(arr[0]);
  recurSelectionSort(arr, n);
  for (int i = 0; i < n; i++)
    cout << arr[i] << "" "";
  cout << endl;
  return 0;
}",Recursive Selection Sort.
224,"Recursive Insertion Sort | Recursive C ++ program for insertion sort ; Recursive function to sort an array using insertion sort ; Base case ; Sort first n - 1 elements ; Insert last element at its correct position in sorted array . ; Move elements of arr [ 0. . i - 1 ] , that are greater than key , to one position ahead of their current position ; A utility function to print an array of size n ; Driver program to test insertion sort","#include <iostream>
using namespace std;
void insertionSortRecursive(int arr[], int n) {
  if (n <= 1)
    return;
  insertionSortRecursive(arr, n - 1);
  int last = arr[n - 1];
  int j = n - 2;
  while (j >= 0 && arr[j] > last) {
    arr[j + 1] = arr[j];
    j--;
  }
  arr[j + 1] = last;
}
void printArray(int arr[], int n) {
  for (int i = 0; i < n; i++)
    cout << arr[i] << "" "";
}
int main() {
  int arr[] = {12, 11, 13, 5, 6};
  int n = sizeof(arr) / sizeof(arr[0]);
  insertionSortRecursive(arr, n);
  printArray(arr, n);
  return 0;
}",Recursive Insertion Sort.
225,"Recursive Bubble Sort | C / C ++ program for recursive implementation of Bubble sort ; A function to implement bubble sort ; Base case ; One pass of bubble sort . After this pass , the largest element is moved ( or bubbled ) to end . ; swap arr [ i ] , arr [ i + 1 ] ; Largest element is fixed , recur for remaining array ; Function to print an array ; Driver program to test above functions","#include <bits/stdc++.h>
using namespace std;
void bubbleSort(int arr[], int n) {
  if (n == 1)
    return;
  for (int i = 0; i < n - 1; i++)
    if (arr[i] > arr[i + 1])
      swap(arr[i], arr[i + 1]);
  bubbleSort(arr, n - 1);
}
void printArray(int arr[], int n) {
  for (int i = 0; i < n; i++)
    printf(""%d "", arr[i]);
  printf(""\n"");
}
int main() {
  int arr[] = {64, 34, 25, 12, 22, 11, 90};
  int n = sizeof(arr) / sizeof(arr[0]);
  bubbleSort(arr, n);
  printf(""Sorted array : \n"");
  printArray(arr, n);
  return 0;
}",Recursive Bubble Sort.
226,Maximum possible difference of sum of two subsets of an array | Set 2 | C ++ Program for the above approach ; Stores the positive elements ; Stores the negative elements ; Stores the count of 0 s ; Sum of all positive numbers ; Sum of all negative numbers ; Iterate over the array ; Stores the difference ; Sort the positive numbers in ascending order ; Sort the negative numbers in decreasing order ; Case 1 : Include both positive and negative numbers ; Put all numbers in subset A and one 0 in subset B ; Put all numbers in subset A except the smallest positive number which is put in B ; Put all numbers in subset B and one 0 in subset A ; Place the largest negative number in subset A and remaining in B ; Driver code,"#include <bits/stdc++.h>
using namespace std;
int maxSumAfterPartition(int arr[], int n) {
  vector<int> pos;
  vector<int> neg;
  int zero = 0;
  int pos_sum = 0;
  int neg_sum = 0;
  for (int i = 0; i < n; i++) {
    if (arr[i] > 0) {
      pos.push_back(arr[i]);
      pos_sum += arr[i];
    } else if (arr[i] < 0) {
      neg.push_back(arr[i]);
      neg_sum += arr[i];
    } else {
      zero++;
    }
  }
  int ans = 0;
  sort(pos.begin(), pos.end());
  sort(neg.begin(), neg.end(), greater<int>());
  if (pos.size() > 0 && neg.size() > 0) {
    ans = (pos_sum - neg_sum);
  } else if (pos.size() > 0) {
    if (zero > 0) {
      ans = (pos_sum);
    } else {
      ans = (pos_sum - 2 * pos[0]);
    }
  } else {
    if (zero > 0) {
      ans = (-1 * neg_sum);
    } else {
      ans = (neg[0] - (neg_sum - neg[0]));
    }
  }
  return ans;
}
int main() {
  int arr[] = {1, 2, 3, -5, -7};
  int n = sizeof(arr) / sizeof(arr[0]);
  cout << maxSumAfterPartition(arr, n);
  return 0;
}",Maximum possible difference of sum of two subsets of an array.
227,Split an array into subarrays with maximum Bitwise XOR of their respective Bitwise OR values | C ++ program for the above approach ; Function to find the bitwise OR of array elements ; Stores the resultant maximum value of Bitwise XOR ; Traverse the array arr [ ] ; Return the maximum value res ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
int MaxXOR(int arr[], int N) {
  int res = 0;
  for (int i = 0; i < N; i++) {
    res |= arr[i];
  }
  return res;
}
int main() {
  int arr[] = {1, 5, 7};
  int N = sizeof(arr) / sizeof(arr[0]);
  cout << MaxXOR(arr, N);
  return 0;
}",Split an array into subarrays with maximum Bitwise XOR of their respective Bitwise OR values.
228,Count number of common elements between a sorted array and a reverse sorted array | C ++ program for the above approach ; Function to count the number of elements common in both the arrays ; Used to traverse array A [ ] and B [ ] from the front and the back ; Stores the count of numbers common in both array ; If A [ first ] is less than B [ second ] ; Increment the value of first ; IF B [ second ] is less than A [ first ] ; Decrement the value of second ; A [ first ] is equal to B [ second ] ; Increment the value of count ; Increment the value of first ; Decrement the value of second ; Return the value of count ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
int countEqual(int A[], int B[], int N) {
  int first = 0;
  int second = N - 1;
  int count = 0;
  while (first < N && second >= 0) {
    if (A[first] < B[second]) {
      first++;
    } else if (B[second] < A[first]) {
      second--;
    } else {
      count++;
      first++;
      second--;
    }
  }
  return count;
}
int main() {
  int A[] = {2, 4, 5, 8, 12, 13, 17, 18, 20, 22, 309, 999};
  int B[] = {109, 99, 68, 54, 22, 19, 17, 13, 11, 5, 3, 1};
  int N = sizeof(A) / sizeof(int);
  cout << countEqual(A, B, N);
  return 0;
}",Count number of common elements between a sorted array and a reverse sorted array.
229,"Queries to count Palindrome Numbers from a range whose sum of digits is a Prime Number | C ++ program for the above approach ; Function to check if the number N is palindrome or not ; Store the value of N ; Store the reverse of number N ; Reverse temp and store in res ; If N is the same as res , then return true ; Function to find the sum of the digits of the number N ; Stores the sum of the digits ; Add the last digit of the number N to the sum ; Remove the last digit from N ; Return the resultant sum ; Function to check if N is prime or not ; If i is 1 or 0 , then return false ; Check if i is divisible by any number in the range [ 2 , n / 2 ] ; If n is divisible by i ; Function to precompute all the numbers till 10 ^ 5 that are palindromic and whose sum of digits is prime numbers ; Iterate over the range 1 to 10 ^ 5 ; If i is a palindrome number ; Stores the sum of the digits in i ; If the sum of digits in i is a prime number ; Find the prefix sum of arr [ ] ; Function to count all the numbers in the given ranges that are palindromic and the sum of digits is prime numbers ; Function Call to precompute all the numbers till 10 ^ 5 ; Traverse the given queries Q [ ] ; Print the result for each query ; Driver Code ; Function Call","#include <bits/stdc++.h>
using namespace std;
int arr[100005];
bool isPalindrome(int N) {
  int temp = N;
  int res = 0;
  while (temp != 0) {
    int rem = temp % 10;
    res = res * 10 + rem;
    temp /= 10;
  }
  if (res == N) {
    return true;
  } else {
    return false;
  }
}
int sumOfDigits(int N) {
  int sum = 0;
  while (N != 0) {
    sum += N % 10;
    N /= 10;
  }
  return sum;
}
bool isPrime(int n) {
  if (n <= 1) {
    return false;
  }
  for (int i = 2; i <= n / 2; ++i) {
    if (n % i == 0)
      return false;
  }
  return true;
}
void precompute() {
  for (int i = 1; i <= 100000; i++) {
    if (isPalindrome(i)) {
      int sum = sumOfDigits(i);
      if (isPrime(sum))
        arr[i] = 1;
      else
        arr[i] = 0;
    } else
      arr[i] = 0;
  }
  for (int i = 1; i <= 100000; i++) {
    arr[i] = arr[i] + arr[i - 1];
  }
}
void countNumbers(int Q[][2], int N) {
  precompute();
  for (int i = 0; i < N; i++) {
    cout << (arr[Q[i][1]] - arr[Q[i][0] - 1]);
    cout << endl;
  }
}
int main() {
  int Q[][2] = {{5, 9}, {1, 101}};
  int N = sizeof(Q) / sizeof(Q[0]);
  countNumbers(Q, N);
}",Queries to count Palindrome Numbers from a range whose sum of digits is a Prime Number.
230,Smallest number greater than or equal to N having sum of digits not exceeding S | C ++ program for the above approach ; Function to calculate sum digits of n ; Function to find the smallest possible integer satisfying the given condition ; If the sum of digits is already smaller than S ; Initialize variables ; Finding last kth digit ; Add remaining to make digit 0 ; If sum of digits does not exceed S ; Update k ; Driver Code ; Given N and S ; Function call,"#include <bits/stdc++.h>
using namespace std;
int sum(int n) {
  int res = 0;
  while (n > 0) {
    res += n % 10;
    n /= 10;
  }
  return res;
}
int smallestNumber(int n, int s) {
  if (sum(n) <= s) {
    return n;
  }
  int ans = n, k = 1;
  for (int i = 0; i < 9; ++i) {
    int digit = (ans / k) % 10;
    int add = k * ((10 - digit) % 10);
    ans += add;
    if (sum(ans) <= s) {
      break;
    }
    k *= 10;
  }
  return ans;
}
int main() {
  int N = 3, S = 2;
  cout << smallestNumber(N, S) << endl;
  return 0;
}",Smallest number greater than or equal to N having sum of digits not exceeding S.
231,Maximize count of Decreasing Consecutive Subsequences from an Array | C ++ program to implement the above approach ; Function to find the maximum number number of required subsequences ; HashMap to store number of arrows available with height of arrow as key ; Stores the maximum count of possible subsequences ; Stores the count of possible subsequences ; Check if i - th element can be part of any of the previous subsequence ; Count of subsequences possible with arr [ i ] as the next element ; If more than one such subsequence exists ; Include arr [ i ] in a subsequence ; Otherwise ; Increase count of subsequence possible with arr [ i ] - 1 as the next element ; Start a new subsequence ; Increase count of subsequence possible with arr [ i ] - 1 as the next element ; Return the answer ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
int maxSubsequences(int arr[], int n) {
  unordered_map<int, int> m;
  int maxCount = 0;
  int count;
  for (int i = 0; i < n; i++) {
    if (m.find(arr[i]) != m.end()) {
      count = m[arr[i]];
      if (count > 1) {
        m[arr[i]] = count - 1;
      } else
        m.erase(arr[i]);
      if (arr[i] - 1 > 0)
        m[arr[i] - 1] += 1;
    } else {
      maxCount++;
      if (arr[i] - 1 > 0)
        m[arr[i] - 1] += 1;
    }
  }
  return maxCount;
}
int main() {
  int n = 5;
  int arr[] = {4, 5, 2, 1, 4};
  cout << maxSubsequences(arr, n) << endl;
}",Maximize count of Decreasing Consecutive Subsequences from an Array.
232,Remove the first and last occurrence of a given Character from a String | C ++ Program to implement the above approach ; Function to remove first and last occurrence of a given character from the given string ; Traverse the given string from the beginning ; If ch is found ; Traverse the given string from the end ; If ch is found ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
string removeOcc(string &s, char ch) {
  for (int i = 0; s[i]; i++) {
    if (s[i] == ch) {
      s.erase(s.begin() + i);
      break;
    }
  }
  for (int i = s.length() - 1; i > -1; i--) {
    if (s[i] == ch) {
      s.erase(s.begin() + i);
      break;
    }
  }
  return s;
}
int main() {
  string s = ""hello world"";
  char ch = 'l';
  cout << removeOcc(s, ch);
  return 0;
}",Remove the first and last occurrence of a given Character from a String.
233,Minimum steps for increasing and decreasing Array to reach either 0 or N | C ++ program for the above approach ; Function that finds the minimum steps to reach either 0 or N for given increasing and decreasing arrays ; Initialize variable to find the minimum element ; Find minimum element in increasing [ ] array ; Initialize variable to find the maximum element ; Find maximum element in decreasing [ ] array ; Find the minimum steps ; Print the minimum steps ; Driver code ; Given N ; Given increasing and decreasing array ; Find length of arrays increasing and decreasing ; Function call,"#include <bits/stdc++.h>
using namespace std;
void minSteps(int N, int increasing[], int decreasing[], int m1, int m2) {
  int mini = INT_MAX;
  for (int i = 0; i < m1; i++) {
    if (mini > increasing[i])
      mini = increasing[i];
  }
  int maxi = INT_MIN;
  for (int i = 0; i < m2; i++) {
    if (maxi < decreasing[i])
      maxi = decreasing[i];
  }
  int minSteps = max(maxi, N - mini);
  cout << minSteps << endl;
}
int main() {
  int N = 7;
  int increasing[] = {3, 5};
  int decreasing[] = {6};
  int m1 = sizeof(increasing) / sizeof(increasing[0]);
  int m2 = sizeof(decreasing) / sizeof(decreasing[0]);
  minSteps(N, increasing, decreasing, m1, m2);
}",Minimum steps for increasing and decreasing Array to reach either 0 or N.
234,Minimum number of adjacent swaps required to convert a permutation to another permutation by given condition | C ++ program for the above approach ; Function to find the minimum number of swaps ; New array to convert to 1 - based indexing ; Keeps count of swaps ; Check if it is an ' X ' position ; Corner Case ; Swap ; Print the minimum swaps ; Driver Code ; Given Number N ; Given Permutation of N numbers ; Function Call,"#include <bits/stdc++.h>
using namespace std;
void solve(vector<int> &P, int n) {
  vector<int> arr;
  arr.push_back(0);
  for (auto x : P)
    arr.push_back(x);
  int cnt = 0;
  for (int i = 1; i < n; i++) {
    if (arr[i] == i) {
      swap(arr[i], arr[i + 1]);
      cnt++;
    }
  }
  if (arr[n] == n) {
    swap(arr[n - 1], arr[n]);
    cnt++;
  }
  cout << cnt << endl;
}
signed main() {
  int N = 9;
  vector<int> P = {1, 2, 4, 9, 5, 8, 7, 3, 6};
  solve(P, N);
  return 0;
}",Minimum number of adjacent swaps required to convert a permutation to another permutation by given condition.
235,"Count of interesting primes upto N | C ++ program to find the number of interesting primes up to N . ; Function to find all prime numbers ; Create a boolean array "" prime [ 0 . . n ] "" and initialize all entries as true . A value in prime [ i ] will finally be false if i is Not a prime . ; If prime [ p ] is not changed , then it is a prime ; Update all multiples of p greater than or equal to the square of it ; Store all prime numbers ; Function to check if a number is perfect square or not ; To store all primes ; To store all interseting primes ; Store all perfect squares ; Store all perfect quadruples ; Store all interseting primes ; Return count of interseting primes ; Driver code","#include <bits/stdc++.h>
using namespace std;
void SieveOfEratosthenes(int n, unordered_set<int> &allPrimes) {
  bool prime[n + 1];
  memset(prime, true, sizeof(prime));
  for (int p = 2; p * p <= n; p++) {
    if (prime[p] == true) {
      for (int i = p * p; i <= n; i += p)
        prime[i] = false;
    }
  }
  for (int p = 2; p <= n; p++)
    if (prime[p])
      allPrimes.insert(p);
}
int countInterestingPrimes(int n) {
  unordered_set<int> allPrimes;
  SieveOfEratosthenes(n, allPrimes);
  unordered_set<int> intersetingPrimes;
  vector<int> squares, quadruples;
  for (int i = 1; i * i <= n; i++) {
    squares.push_back(i * i);
  }
  for (int i = 1; i * i * i * i <= n; i++) {
    quadruples.push_back(i * i * i * i);
  }
  for (auto a : squares) {
    for (auto b : quadruples) {
      if (allPrimes.count(a + b))
        intersetingPrimes.insert(a + b);
    }
  }
  return intersetingPrimes.size();
}
int main() {
  int N = 10;
  cout << countInterestingPrimes(N);
  return 0;
}",Count of interesting primes upto N.
236,"Check if an array is Wave Array | CPP code to check if the array is wave array ; Function to check if array is wave array arr : input array n : size of array ; Check the wave form * If arr [ 1 ] is greater than left and right * Same pattern will be followed by whole * elements , else reverse pattern * will be followed by array elements ; Check for last element ; Check for last element ; Driver Code ; Array","#include <iostream>
using namespace std;
bool isWaveArray(int arr[], int n) {
  bool result = true;
  if (arr[1] > arr[0] && arr[1] > arr[2]) {
    for (int i = 1; i < n - 1; i += 2) {
      if (arr[i] > arr[i - 1] && arr[i] > arr[i + 1]) {
        result = true;
      } else {
        result = false;
        break;
      }
    }
    if (result == true && n % 2 == 0) {
      if (arr[n - 1] <= arr[n - 2]) {
        result = false;
      }
    }
  } else if (arr[1] < arr[0] && arr[1] < arr[2]) {
    for (int i = 1; i < n - 1; i += 2) {
      if (arr[i] < arr[i - 1] && arr[i] < arr[i + 1]) {
        result = true;
      } else {
        result = false;
        break;
      }
    }
    if (result == true && n % 2 == 0) {
      if (arr[n - 1] >= arr[n - 2]) {
        result = false;
      }
    }
  }
  return result;
}
int main() {
  int arr[] = {1, 3, 2, 4};
  int n = sizeof(arr) / sizeof(int);
  if (isWaveArray(arr, n)) {
    cout << ""YES"" << endl;
  } else {
    cout << ""NO"" << endl;
  }
  return 0;
}",Check if an array is Wave Array.
237,"Count distinct sequences obtained by replacing all elements of subarrays having equal first and last elements with the first element any number of times | C ++ program for the above approach ; Function to count number of sequences satisfying the given criteria ; Stores the index of the last occurrence of the element ; Initialize an array to store the number of different sequences that are possible of length i ; Base Case ; If no operation is applied on ith element ; If operation is applied on ith element ; Update the last occurrence of curEle ; Finally , print the answer ; Driver Code","#include <bits/stdc++.h>
using namespace std;
void countPossiblities(int arr[], int n) {
  int lastOccur[100000];
  for (int i = 0; i < n; i++) {
    lastOccur[i] = -1;
  }
  int dp[n + 1];
  dp[0] = 1;
  for (int i = 1; i <= n; i++) {
    int curEle = arr[i - 1];
    dp[i] = dp[i - 1];
    if (lastOccur[curEle] != -1 & lastOccur[curEle] < i - 1) {
      dp[i] += dp[lastOccur[curEle]];
    }
    lastOccur[curEle] = i;
  }
  cout << dp[n] << endl;
}
int main() {
  int arr[] = {1, 2, 1, 2, 2};
  int N = sizeof(arr) / sizeof(arr[0]);
  countPossiblities(arr, N);
  return 0;
}",Count distinct sequences obtained by replacing all elements of subarrays having equal first and last elements with the first element any number of times.
238,Maximum sum possible from given Matrix by performing given operations | C ++ program for the above approach ; Function to print the maximum sum ; Dp table ; Initializing dp array with 0 s ; Base case ; Traverse each column ; Update answer for both rows ; Print the maximum sum ; Driver Code ; Given array ; Number of Columns ; Function calls,"#include <iostream>
#include <vector>
using namespace std;
void maxSum(vector<vector<int>> arr, int n, int m) {
  vector<vector<int>> dp(n);
  for (int i = 0; i < 2; i++) {
    dp[i] = vector<int>(m);
    for (int j = 0; j < m; j++) {
      dp[i][j] = 0;
    }
  }
  dp[0][m - 1] = arr[0][m - 1];
  dp[1][m - 1] = arr[1][m - 1];
  for (int j = m - 2; j >= 0; j--) {
    for (int i = 0; i < 2; i++) {
      if (i == 1) {
        dp[i][j] = max(arr[i][j] + dp[0][j + 1], arr[i][j] + dp[0][j + 2]);
      } else {
        dp[i][j] = max(arr[i][j] + dp[1][j + 1], arr[i][j] + dp[1][j + 2]);
      }
    }
  }
  cout << max(dp[0][0], dp[1][0]);
}
int main() {
  vector<vector<int>> arr = {{1, 50, 21, 5}, {2, 10, 10, 5}};
  int N = arr[0].size();
  maxSum(arr, 2, N);
  return 0;
}",Maximum sum possible from given Matrix by performing given operations.
239,Maximum sum possible from given Matrix by performing given operations | C ++ code for the above approach ; Function to print the maximum sum possible by selecting at most one element from each column such that no consecutive pairs are selected from a single row ; Initialize variables ; Traverse each column ; Print answer ; Driver Code ; Numberof columns,"#include <bits/stdc++.h>
using namespace std;
void maxSum(vector<vector<int>> arr, int n) {
  int r1 = 0, r2 = 0;
  for (int i = 0; i < n; i++) {
    int temp = r1;
    r1 = max(r1, r2 + arr[0][i]);
    r2 = max(r2, temp + arr[1][i]);
  }
  cout << max(r1, r2);
}
int main() {
  vector<vector<int>> arr = {{1, 50, 21, 5}, {2, 10, 10, 5}};
  int n = arr[0].size();
  maxSum(arr, n);
  return 0;
}",Maximum sum possible from given Matrix by performing given operations.
240,"Count unimodal and non | C ++ program for the above approach ; Function to calculate the factorials up to a number ; Calculate the factorial ; Function to find power ( a , b ) ; Iterate until b exists ; If b is divisible by 2 ; Decrease the value of b ; Return the answer ; Function that counts the unimodal and non - unimodal permutations of a given integer N ; Function Call for finding factorials up to N ; Function to count unimodal permutations ; Non - unimodal permutation is N ! - unimodal permutations ; Driver Code ; Given Number N ; Function Call","#include <bits/stdc++.h>
using namespace std;
int mod = 1e9 + 7;
const int mx = 1e6;
int fact[mx + 1];
void Calculate_factorial() {
  fact[0] = 1;
  for (int i = 1; i <= mx; i++) {
    fact[i] = i * fact[i - 1];
    fact[i] %= mod;
  }
}
int UniModal_per(int a, int b) {
  long long int res = 1;
  while (b) {
    if (b % 2)
      res = res * a;
    res %= mod;
    a = a * a;
    a %= mod;
    b /= 2;
  }
  return res;
}
void countPermutations(int n) {
  Calculate_factorial();
  int uni_modal = UniModal_per(2, n - 1);
  int nonuni_modal = fact[n] - uni_modal;
  cout << uni_modal << "" "" << nonuni_modal;
  return;
}
int main() {
  int N = 4;
  countPermutations(N);
  return 0;
}",Count unimodal and non.
241,Longest subsequence possible that starts and ends with 1 and filled with 0 in the middle | C ++ Program to find the longest subsequence possible that starts and ends with 1 and filled with 0 in the middle ; Prefix array to store the occurences of '1' and '0' ; Initialise prefix arrays with 0 ; Iterate over the length of the string ; If current character is '1' ; If current character is '0' ; Add '1' available for the first string ; Add '0' available for the second string ; Add '1' available for the third string ; Update answer ; Print the final result ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
int longestSubseq(string s, int length) {
  int ones[length + 1], zeroes[length + 1];
  memset(ones, 0, sizeof(ones));
  memset(zeroes, 0, sizeof(zeroes));
  for (int i = 0; i < length; i++) {
    if (s[i] == '1') {
      ones[i + 1] = ones[i] + 1;
      zeroes[i + 1] = zeroes[i];
    } else {
      zeroes[i + 1] = zeroes[i] + 1;
      ones[i + 1] = ones[i];
    }
  }
  int answer = INT_MIN;
  int x = 0;
  for (int i = 0; i <= length; i++) {
    for (int j = i; j <= length; j++) {
      x += ones[i];
      x += (zeroes[j] - zeroes[i]);
      x += (ones[length] - ones[j]);
      answer = max(answer, x);
      x = 0;
    }
  }
  cout << answer << endl;
}
int main() {
  string s = ""10010010111100101"";
  int length = s.length();
  longestSubseq(s, length);
  return 0;
}",Longest subsequence possible that starts and ends with 1 and filled with 0 in the middle.
242,Largest Square in a Binary Matrix with at most K 1 s for multiple Queries | C ++ implementation to find the largest square in the matrix such that it contains atmost K 1 's ; Function to calculate the largest square with atmost K 1 s for Q queries ; Loop to solve for each query ; Traversing the each sub square and counting total ; Breaks when exceeds the maximum count ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
const int MAX = 100;
void largestSquare(int matrix[][MAX], int R, int C, int q_i[], int q_j[], int K,
                   int Q) {
  for (int q = 0; q < Q; q++) {
    int i = q_i[q];
    int j = q_j[q];
    int min_dist = min(min(i, j), min(R - i - 1, C - j - 1));
    int ans = -1;
    for (int k = 0; k <= min_dist; k++) {
      int count = 0;
      for (int row = i - k; row <= i + k; row++)
        for (int col = j - k; col <= j + k; col++)
          count += matrix[row][col];
      if (count > K)
        break;
      ans = 2 * k + 1;
    }
    cout << ans << ""\n"";
  }
}
int main() {
  int matrix[][MAX] = {
      {1, 0, 1, 0, 0}, {1, 0, 1, 1, 1}, {1, 1, 1, 1, 1}, {1, 0, 0, 1, 0}};
  int K = 9, Q = 1;
  int q_i[] = {1};
  int q_j[] = {2};
  largestSquare(matrix, 4, 5, q_i, q_j, K, Q);
  return 0;
}",Largest Square in a Binary Matrix with at most K 1 s for multiple Queries.
243,Largest Square in a Binary Matrix with at most K 1 s for multiple Queries | C ++ implementation to find the largest square in the matrix such that it contains atmost K 1 's ; Function to find the largest square in the matrix such that it contains atmost K 1 's ; Precomputing the countDP prefix sum of the matrix ; Loop to solve Queries ; Calculating the maximum possible distance of the centre from edge ; Calculating the number of 1 s in the submatrix ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
const int MAX = 100;
void largestSquare(int matrix[][MAX], int R, int C, int q_i[], int q_j[], int K,
                   int Q) {
  int countDP[R][C];
  memset(countDP, 0, sizeof(countDP));
  countDP[0][0] = matrix[0][0];
  for (int i = 1; i < R; i++)
    countDP[i][0] = countDP[i - 1][0] + matrix[i][0];
  for (int j = 1; j < C; j++)
    countDP[0][j] = countDP[0][j - 1] + matrix[0][j];
  for (int i = 1; i < R; i++)
    for (int j = 1; j < C; j++)
      countDP[i][j] = matrix[i][j] + countDP[i - 1][j] + countDP[i][j - 1] -
                      countDP[i - 1][j - 1];
  for (int q = 0; q < Q; q++) {
    int i = q_i[q];
    int j = q_j[q];
    int min_dist = min(min(i, j), min(R - i - 1, C - j - 1));
    int ans = -1;
    for (int k = 0; k <= min_dist; k++) {
      int x1 = i - k, x2 = i + k;
      int y1 = j - k, y2 = j + k;
      int count = countDP[x2][y2];
      if (x1 > 0)
        count -= countDP[x1 - 1][y2];
      if (y1 > 0)
        count -= countDP[x2][y1 - 1];
      if (x1 > 0 && y1 > 0)
        count += countDP[x1 - 1][y1 - 1];
      if (count > K)
        break;
      ans = 2 * k + 1;
    }
    cout << ans << ""\n"";
  }
}
int main() {
  int matrix[][MAX] = {
      {1, 0, 1, 0, 0}, {1, 0, 1, 1, 1}, {1, 1, 1, 1, 1}, {1, 0, 0, 1, 0}};
  int K = 9, Q = 1;
  int q_i[] = {1};
  int q_j[] = {2};
  largestSquare(matrix, 4, 5, q_i, q_j, K, Q);
  return 0;
}",Largest Square in a Binary Matrix with at most K 1 s for multiple Queries.
244,"N consecutive ropes problem | C ++ implementation of the approach ; Function to return the minimum cost to connect the given ropes ; dp [ i ] [ j ] = minimum cost in range ( i , j ) sum [ i ] [ j ] = sum of range ( i , j ) ; Initializing the sum table ; Computing minimum cost for all the possible interval ( i , j ) Left range ; Right range ; No cost for a single rope ; Driver code","#include <bits/stdc++.h>
using namespace std;
int MinCost(int arr[], int n) {
  int dp[n + 5][n + 5], sum[n + 5][n + 5];
  memset(sum, 0, sizeof(0));
  for (int i = 0; i < n; i++) {
    int k = arr[i];
    for (int j = i; j < n; j++) {
      if (i == j)
        sum[i][j] = k;
      else {
        k += arr[j];
        sum[i][j] = k;
      }
    }
  }
  for (int i = n - 1; i >= 0; i--) {
    for (int j = i; j < n; j++) {
      dp[i][j] = INT_MAX;
      if (i == j)
        dp[i][j] = 0;
      else {
        for (int k = i; k < j; k++) {
          dp[i][j] = min(dp[i][j], dp[i][k] + dp[k + 1][j] + sum[i][j]);
        }
      }
    }
  }
  return dp[0][n - 1];
}
int main() {
  int arr[] = {7, 6, 8, 6, 1, 1};
  int n = sizeof(arr) / sizeof(arr[0]);
  cout << MinCost(arr, n);
  return 0;
}",N consecutive ropes problem.
245,"Length of the longest subsegment which is UpDown after inserting atmost one integer | C ++ implementation of the approach ; Function to recursively fill the dp array ; If f ( i , state ) is already calculated then return the value ; Calculate f ( i , state ) according to the recurrence relation and store in dp [ ] [ ] ; Function that calls the resucrsive function to fill the dp array and then returns the result ; dp [ ] [ ] array for storing result of f ( i , 1 ) and f ( 1 , 2 ) ; Populating the array dp [ ] with - 1 ; Make sure that longest UD and DU sequence starting at each index is calculated ; Assume the answer to be - 1 This value will only increase ; y is the length of the longest UD sequence starting at i ; If length is even then add an integer and then a DU sequence starting at i + y ; If length is odd then add an integer and then a UD sequence starting at i + y ; Driver code","#include <bits/stdc++.h>
using namespace std;
int f(int i, int state, int A[], int dp[][3], int N) {
  if (i >= N)
    return 0;
  else if (dp[i][state] != -1) {
    return dp[i][state];
  } else {
    if (i == N - 1)
      dp[i][state] = 1;
    else if (state == 1 && A[i] > A[i + 1])
      dp[i][state] = 1;
    else if (state == 2 && A[i] < A[i + 1])
      dp[i][state] = 1;
    else if (state == 1 && A[i] <= A[i + 1])
      dp[i][state] = 1 + f(i + 1, 2, A, dp, N);
    else if (state == 2 && A[i] >= A[i + 1])
      dp[i][state] = 1 + f(i + 1, 1, A, dp, N);
    return dp[i][state];
  }
}
int maxLenSeq(int A[], int N) {
  int i, tmp, y, ans;
  int dp[1000][3];
  memset(dp, -1, sizeof dp);
  for (i = 0; i < N; i++) {
    tmp = f(i, 1, A, dp, N);
    tmp = f(i, 2, A, dp, N);
  }
  ans = -1;
  for (i = 0; i < N; i++) {
    y = dp[i][1];
    if (i + y >= N)
      ans = max(ans, dp[i][1] + 1);
    else if (y % 2 == 0) {
      ans = max(ans, dp[i][1] + 1 + dp[i + y][2]);
    } else if (y % 2 == 1) {
      ans = max(ans, dp[i][1] + 1 + dp[i + y][1]);
    }
  }
  return ans;
}
int main() {
  int A[] = {1, 10, 3, 20, 25, 24};
  int n = sizeof(A) / sizeof(int);
  cout << maxLenSeq(A, n);
  return 0;
}",Length of the longest subsegment which is UpDown after inserting atmost one integer.
246,Remove an element to maximize the GCD of the given array | C ++ implementation of the above approach ; Function to return the maximized gcd after removing a single element from the given array ; Prefix and Suffix arrays ; Single state dynamic programming relation for storing gcd of first i elements from the left in Prefix [ i ] ; Initializing Suffix array ; Single state dynamic programming relation for storing gcd of all the elements having greater than or equal to i in Suffix [ i ] ; If first or last element of the array has to be removed ; If any other element is replaced ; Return the maximized gcd ; Driver code,"#include <bits/stdc++.h>
using namespace std;
int MaxGCD(int a[], int n) {
  int Prefix[n + 2];
  int Suffix[n + 2];
  Prefix[1] = a[0];
  for (int i = 2; i <= n; i += 1) {
    Prefix[i] = __gcd(Prefix[i - 1], a[i - 1]);
  }
  Suffix[n] = a[n - 1];
  for (int i = n - 1; i >= 1; i -= 1) {
    Suffix[i] = __gcd(Suffix[i + 1], a[i - 1]);
  }
  int ans = max(Suffix[2], Prefix[n - 1]);
  for (int i = 2; i < n; i += 1) {
    ans = max(ans, __gcd(Prefix[i - 1], Suffix[i + 1]));
  }
  return ans;
}
int main() {
  int a[] = {14, 17, 28, 70};
  int n = sizeof(a) / sizeof(a[0]);
  cout << MaxGCD(a, n);
  return 0;
}",Remove an element to maximize the GCD of the given array.
247,Maximum subarray sum by flipping signs of at most K array elements | C ++ implementation of the approach ; Function to find the maximum subarray sum with flips starting from index i ; If the number of flips have exceeded ; Complete traversal ; If the state has previously been visited ; Initially ; Use Kadane 's algorithm and call two states ; Memoize the answer and return it ; Utility function to call flips from index and return the answer ; Create DP array int dp [ n ] [ k + 1 ] ; ; Iterate and call recursive function from every index to get the maximum subarray sum ; corner case ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
#defineright2
#defineleft4
    int dp[left][right];
int findSubarraySum(int ind, int flips, int n, int a[], int k) {
  if (flips > k)
    return -1e9;
  if (ind == n)
    return 0;
  if (dp[ind][flips] != -1)
    return dp[ind][flips];
  int ans = 0;
  ans = max(0, a[ind] + findSubarraySum(ind + 1, flips, n, a, k));
  ans = max(ans, -a[ind] + findSubarraySum(ind + 1, flips + 1, n, a, k));
  return dp[ind][flips] = ans;
}
int findMaxSubarraySum(int a[], int n, int k) {
  memset(dp, -1, sizeof(dp));
  int ans = -1e9;
  for (int i = 0; i < n; i++)
    ans = max(ans, findSubarraySum(i, 0, n, a, k));
  if (ans == 0 && k == 0)
    return *max_element(a, a + n);
  return ans;
}
int main() {
  int a[] = {-1, -2, -100, -10};
  int n = sizeof(a) / sizeof(a[0]);
  int k = 1;
  cout << findMaxSubarraySum(a, n, k);
  return 0;
}",Maximum subarray sum by flipping signs of at most K array elements.
248,Find the sum of first N odd Fibonacci numbers | CPP program to Find the sum of first N odd Fibonacci numbers ; Function to calculate sum of first N odd Fibonacci numbers ; base values ; Driver code,"#include <bits/stdc++.h>
using namespace std;
#definemod1000000007 long long sumOddFibonacci(int n) {
  long long Sum[n + 1];
  Sum[0] = 0;
  Sum[1] = 1;
  Sum[2] = 2;
  Sum[3] = 5;
  Sum[4] = 10;
  Sum[5] = 23;
  for (int i = 6; i <= n; i++) {
    Sum[i] =
        ((Sum[i - 1] + (4 * Sum[i - 2]) % mod - (4 * Sum[i - 3]) % mod + mod) %
             mod +
         (Sum[i - 4] - Sum[i - 5] + mod) % mod) %
        mod;
  }
  return Sum[n];
}
int main() {
  long long n = 6;
  cout << sumOddFibonacci(n);
  return 0;
}",Find the sum of first N odd Fibonacci numbers.
249,Minimize the total number of teddies to be distributed | C ++ implementation of the above approach ; Initializing one tablet for each student ; if left adjacent is having higher marks review and change all the dp values assigned before until assigned dp values are found wrong according to given constrains ; if right adjacent is having higher marks add one in dp of left adjacent and assign to right one ; Driver Code ; n number of students ; marks of students ; solution of problem,"#include <bits/stdc++.h>
using namespace std;
long long fun(int marks[], int n) {
  long long dp[n], temp;
  fill(dp, dp + n, 1);
  for (int i = 0; i < n - 1; i++) {
    if (marks[i] > marks[i + 1]) {
      temp = i;
      while (true) {
        if ((marks[temp] > marks[temp + 1]) && temp >= 0) {
          if (dp[temp] > dp[temp + 1]) {
            temp -= 1;
            continue;
          } else {
            dp[temp] = dp[temp + 1] + 1;
            temp -= 1;
          }
        } else
          break;
      }
    } else if (marks[i] < marks[i + 1])
      dp[i + 1] = dp[i] + 1;
  }
  int sum = 0;
  for (int i = 0; i < n; i++)
    sum += dp[i];
  return sum;
}
int main() {
  int n = 6;
  int marks[6] = {1, 4, 5, 2, 2, 1};
  cout << fun(marks, n);
  return 0;
}",Minimize the total number of teddies to be distributed.
250,Number of ways to reach Nth floor by taking at | C ++ program to reach N - th stair by taking a maximum of K leap ; elements of combo [ ] stores the no of possible ways to reach it by all combinations of k leaps or less ; assuming leap 0 exist and assigning its value to 1 for calculation ; loop to iterate over all possible leaps upto k ; ; in this loop we count all possible leaps to reach the jth stair with the help of ith leap or less ; if the leap is not more than the i - j ; calculate the value and store in combo [ j ] to reuse it for next leap calculation for the jth stair ; returns the no of possible number of leaps to reach the top of building of n stairs ; Driver Code ; N i the no of total stairs K is the value of the greatest leap,"#include <bits/stdc++.h>
using namespace std;
int solve(int N, int K) {
  int combo[N + 1] = {0};
  combo[0] = 1;
  for (int i = 1; i <= K; i++) {
    for (int j = 0; j <= N; j++) {
      if (j >= i) {
        combo[j] += combo[j - i];
      }
    }
  }
  return combo[N];
}
int main() {
  int N = 29;
  int K = 5;
  cout << solve(N, K);
  solve(N, K);
  return 0;
}",Number of ways to reach Nth floor by taking at.
251,Find the Longest Increasing Subsequence in Circular manner | C ++ implementation to find LIS in circular way ; Utility function to find LIS using Dynamic programming ; Initialize LIS values for all indexes ; Compute optimized LIS values in bottom up manner ; Set j on the basis of current window i . e . first element of the current window ; Pick maximum of all LIS values ; Function to find Longest Increasing subsequence in Circular manner ; Make a copy of given array by appending same array elements to itself ; Perform LIS for each window of size n ; Driver program to test above function,"#include <bits/stdc++.h>
using namespace std;
int computeLIS(int circBuff[], int start, int end, int n) {
  int LIS[end - start];
  for (int i = start; i < end; i++)
    LIS[i] = 1;
  for (int i = start + 1; i < end; i++)
    for (int j = start; j < i; j++)
      if (circBuff[i] > circBuff[j] && LIS[i] < LIS[j] + 1)
        LIS[i] = LIS[j] + 1;
  int res = INT_MIN;
  for (int i = start; i < end; i++)
    res = max(res, LIS[i]);
  return res;
}
int LICS(int arr[], int n) {
  int circBuff[2 * n];
  for (int i = 0; i < n; i++)
    circBuff[i] = arr[i];
  for (int i = n; i < 2 * n; i++)
    circBuff[i] = arr[i - n];
  int res = INT_MIN;
  for (int i = 0; i < n; i++)
    res = max(computeLIS(circBuff, i, i + n, n), res);
  return res;
}
int main() {
  int arr[] = {1, 4, 6, 2, 3};
  int n = sizeof(arr) / sizeof(arr[0]);
  cout << ""Length of LICS is "" << LICS(arr, n);
  return 0;
}",Find the Longest Increasing Subsequence in Circular manner.
252,Counts paths from a point to reach Origin | C ++ Program for above approach ; Function to find binomial Coefficient ; Constructing Pascal 's Triangle ; Driver Code,"#include <bits/stdc++.h>
#include <iostream>
using namespace std;
int binomialCoeff(int n, int k) {
  int C[k + 1];
  memset(C, 0, sizeof(C));
  C[0] = 1;
  for (int i = 1; i <= n; i++) {
    for (int j = min(i, k); j > 0; j--)
      C[j] = C[j] + C[j - 1];
  }
  return C[k];
}
int main() {
  int n = 3, m = 2;
  cout << ""Number of Paths: "" << binomialCoeff(n + m, n) << endl;
  return 0;
}",Counts paths from a point to reach Origin.
253,"Longest Common Increasing Subsequence ( LCS + LIS ) | A C ++ Program to find length of the Longest Common Increasing Subsequence ( LCIS ) ; Returns the length and the LCIS of two arrays arr1 [ 0. . n - 1 ] and arr2 [ 0. . m - 1 ] ; table [ j ] is going to store length of LCIS ending with arr2 [ j ] . We initialize it as 0 , ; Traverse all elements of arr1 [ ] ; Initialize current length of LCIS ; For each element of arr1 [ ] , traverse all elements of arr2 [ ] . ; If both the array have same elements . Note that we don 't break the loop here. ; Now seek for previous smaller common element for current element of arr1 ; The maximum value in table [ ] is out result ; Driver program to test above function","#include <bits/stdc++.h>
using namespace std;
int LCIS(int arr1[], int n, int arr2[], int m) {
  int table[m];
  for (int j = 0; j < m; j++)
    table[j] = 0;
  for (int i = 0; i < n; i++) {
    int current = 0;
    for (int j = 0; j < m; j++) {
      if (arr1[i] == arr2[j])
        if (current + 1 > table[j])
          table[j] = current + 1;
      if (arr1[i] > arr2[j])
        if (table[j] > current)
          current = table[j];
    }
  }
  int result = 0;
  for (int i = 0; i < m; i++)
    if (table[i] > result)
      result = table[i];
  return result;
}
int main() {
  int arr1[] = {3, 4, 9, 1};
  int arr2[] = {5, 3, 8, 9, 10, 2, 1};
  int n = sizeof(arr1) / sizeof(arr1[0]);
  int m = sizeof(arr2) / sizeof(arr2[0]);
  cout << ""Length of LCIS is "" << LCIS(arr1, n, arr2, m);
  return (0);
}",Longest Common Increasing Subsequence ( LCS + LIS ).
254,Length of longest common prefix possible by rearranging strings in a given array | C ++ program to implement the above approach ; Function to get the length of the longest common prefix by rearranging the strings ; freq [ i ] [ j ] : stores the frequency of a character ( = j ) in a string arr [ i ] ; Traverse the given array ; Stores length of current string ; Traverse current string of the given array ; Update the value of freq [ i ] [ arr [ i ] [ j ] ] ; Stores the length of longest common prefix ; Count the minimum frequency of each character in in all the strings of arr [ ] ; Stores minimum value in each row of freq [ ] [ ] ; Calculate minimum frequency of current character in all the strings . ; Update minRowVal ; Update maxLen ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
int longComPre(string arr[], int N) {
  int freq[N][256];
  for (let String of DistString) {
    for (int i = 0; i < N; i++) {
      int M = arr[i].length();
      for (int j = 0; j < M; j++) {
        freq[i][arr[i][j]]++;
      }
    }
    int maxLen = 0;
    for (int j = 0; j < 256; j++) {
      int minRowVal = INT_MAX;
      for (int i = 0; i < N; i++) {
        minRowVal = min(minRowVal, freq[i][j]);
      }
      maxLen += minRowVal;
    }
    return maxLen;
  }
}
int main() {
  string arr[] = {""aabdc"", ""abcd"", ""aacd""};
  int N = 3;
  cout << longComPre(arr, N);
}",Length of longest common prefix possible by rearranging strings in a given array.
255,Remove characters from a String that appears exactly K times | C ++ program to remove characters from a String that appears exactly K times ; Function to reduce the string by removing the characters which appears exactly k times ; Hash table initialised to 0 ; Increment the frequency of the character ; To store answer ; Next index in reduced string ; Append the characters which appears exactly k times ; Driver code ; Function call,"#include <bits/stdc++.h>
using namespace std;
const int MAX_CHAR = 26;
string removeChars(char arr[], int k) {
  int hash[MAX_CHAR] = {0};
  int n = strlen(arr);
  for (int i = 0; i < n; ++i)
    hash[arr[i] - 'a']++;
  string ans = """";
  int index = 0;
  for (int i = 0; i < n; ++i) {
    if (hash[arr[i] - 'a'] != k) {
      ans += arr[i];
    }
  }
  return ans;
}
int main() {
  char str[] = ""geeksforgeeks"";
  int k = 2;
  cout << removeChars(str, k);
  return 0;
}",Remove characters from a String that appears exactly K times.
256,Contiguous subsegments of a string having distinct subsequent characters | C ++ implementation of the approach ; Function that prints the segments ; New array for every iteration ; Check if iterator points to end or not ; Driver code,"#include <bits/stdc++.h>
using namespace std;
void sub_segments(string str, int n) {
  int l = str.length();
  for (int x = 0; x < l; x += n) {
    string newlist = str.substr(x, n);
    list<char> arr;
    list<char>::iterator it;
    for (auto y : newlist) {
      it = find(arr.begin(), arr.end(), y);
      if (it == arr.end())
        arr.push_back(y);
    }
    for (auto y : arr)
      cout << y;
    cout << endl;
  }
}
int main() {
  string str = ""geeksforgeeksgfg"";
  int n = 4;
  sub_segments(str, n);
}",Contiguous subsegments of a string having distinct subsequent characters.
257,"Program to find the Encrypted word | C ++ program to implement the above approach ; Function to find the encrypted string ; to store the encrypted string ; after ' z ' , it should go to a . ; Driver code","#include <bits/stdc++.h>
using namespace std;
void findWord(string c, int n) {
  int co = 0, i;
  string s(n, ' ');
  for (i = 0; i < n; i++) {
    if (i < n / 2)
      co++;
    else
      co = n - i;
    if (c[i] + co <= 122)
      s[i] = (char)((int)c[i] + co);
    else
      s[i] = (char)((int)c[i] + co - 26);
  }
  cout << s;
}
int main() {
  string s = ""abcd"";
  findWord(s, s.length());
  return 0;
}",Program to find the Encrypted word.
258,"Check if two strings are same ignoring their cases | Function to compare two strings ignoring their cases ; length of first string ; length of second string ; if length is not same simply return false since both string can not be same if length is not equal ; loop to match one by one all characters of both string ; if current characters of both string are same , increase value of i to compare next character ; if any character of first string is some special character or numeric character and not same as corresponding character of second string then return false ; do the same for second string ; this block of code will be executed if characters of both strings are of different cases ; compare characters by ASCII value ; if characters matched , increase the value of i to compare next char ; if all characters of the first string are matched with corresponding characters of the second string , then return true ; Function to print the same or not same if strings are equal or not equal ; Driver Code","#include <iostream>
using namespace std;
bool equalIgnoreCase(string str1, string str2) {
  int i = 0;
  int len1 = str1.size();
  int len2 = str2.size();
  if (len1 != len2)
    return false;
  while (i < len1) {
    if (str1[i] == str2[i]) {
      i++;
    } else if (!((str1[i] >= 'a' && str1[i] <= 'z') ||
                 (str1[i] >= 'A' && str1[i] <= 'Z'))) {
      return false;
    } else if (!((str2[i] >= 'a' && str2[i] <= 'z') ||
                 (str2[i] >= 'A' && str2[i] <= 'Z'))) {
      return false;
    } else {
      if (str1[i] >= 'a' && str1[i] <= 'z') {
        if (str1[i] - 32 != str2[i])
          return false;
      } else if (str1[i] >= 'A' && str1[i] <= 'Z') {
        if (str1[i] + 32 != str2[i])
          return false;
      }
      i++;
    }
  }
  return true;
}
void equalIgnoreCaseUtil(string str1, string str2) {
  bool res = equalIgnoreCase(str1, str2);
  if (res == true)
    cout << ""Same"" << endl;
  else
    cout << ""Not Same"" << endl;
}
int main() {
  string str1, str2;
  str1 = ""Geeks"";
  str2 = ""geeks"";
  equalIgnoreCaseUtil(str1, str2);
  str1 = ""Geek"";
  str2 = ""geeksforgeeks"";
  equalIgnoreCaseUtil(str1, str2);
  return 0;
}",Check if two strings are same ignoring their cases.
259,Maximize the value of A by replacing some of its digits with digits of B | C ++ implementation of the approach ; Function to return the maximized value of A ; Sort digits in ascending order ; j points to largest digit in B ; If all the digits of b have been used ; Current digit has been used ; Return the maximized value ; Driver code,"#include <bits/stdc++.h>
using namespace std;
string maxValue(string a, string b) {
  sort(b.begin(), b.end());
  int n = a.length();
  int m = b.length();
  int j = m - 1;
  for (int i = 0; i < n; i++) {
    if (j < 0)
      break;
    if (b[j] > a[i]) {
      a[i] = b[j];
      j--;
    }
  }
  return a;
}
int main() {
  string a = ""1234"";
  string b = ""4321"";
  cout << maxValue(a, b);
  return 0;
}",Maximize the value of A by replacing some of its digits with digits of B.
260,"Count numbers in range such that digits in it and it 's product with q are unequal | C ++ program for above approach ; Function to check if all of the digits in a number and it 's product with q are unequal or not ; convert first number into string ; Insert elements from 1 st number to hash ; Calculate corresponding product ; Convert the product to string ; Using the hash check if any digit of product matches with the digits of input number ; If yes , return false ; Return true ; Function to count numbers in the range [ l , r ] such that all of the digits of the number and it 's product with q are unequal ; check for every number between l and r ; Driver Code ; Function Call","#include <bits/stdc++.h>
using namespace std;
bool checkIfUnequal(int n, int q) {
  string s1 = to_string(n);
  int a[26] = {0};
  for (int i = 0; i < s1.size(); i++)
    a[s1[i] - '0']++;
  int prod = n * q;
  string s2 = to_string(prod);
  for (int i = 0; i < s2.size(); i++) {
    if (a[s2[i] - '0'])
      return false;
  }
  return true;
}
int countInRange(int l, int r, int q) {
  int count = 0;
  for (int i = l; i <= r; i++) {
    if (checkIfUnequal(i, q))
      count++;
  }
  return count;
}
int main() {
  int l = 10, r = 12, q = 2;
  cout << countInRange(l, r, q);
  return 0;
}",Count numbers in range such that digits in it and it 's product with q are unequal.
261,Check if it is possible to rearrange a binary string with alternate 0 s and 1 s | CPP program to check if we can rearrange a string such that it has alternate 0 s and 1 s . ; function to check the binary string ; length of string ; count zero 's ; count one 's ; if length is even ; if length is odd ; Driver code,"#include <bits/stdc++.h>
using namespace std;
bool is_possible(string s) {
  int l = s.length();
  int one = 0, zero = 0;
  for (int i = 0; i < l; i++) {
    if (s[i] == '0')
      zero++;
    else
      one++;
  }
  if (l % 2 == 0)
    return (one == zero);
  else
    return (abs(one - zero) == 1);
}
int main() {
  string s = ""100110"";
  if (is_possible(s))
    cout << ""Yes"";
  else
    cout << ""No"";
  return 0;
}",Check if it is possible to rearrange a binary string with alternate 0 s and 1 s.
262,Frequency Measuring Techniques for Competitive Programming | C ++ program to count frequencies of array items ; Create an array to store counts . The size of array is limit + 1 and all values are initially 0 ; Traverse through string characters and count frequencies ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
const int limit = 255;
void countFreq(string str) {
  vector<int> count(limit + 1, 0);
  for (int i = 0; i < str.length(); i++)
    count[str[i]]++;
  for (int i = 0; i <= limit; i++)
    if (count[i] > 0)
      cout << (char)i << "" "" << count[i] << endl;
}
int main() {
  string str = ""GeeksforGeeks"";
  countFreq(str);
  return 0;
}",Frequency Measuring Techniques for Competitive Programming.
263,"Count of even and odd set bit with array element after XOR with K | C ++ program to count the set bits after taking XOR with a number K ; Function to store EVEN and odd variable ; Store the count of even and odd set bit ; Count the set bit using in built function ; Count of set - bit of K ; If y is odd then , count of even and odd set bit will be interchanged ; Else it will remain same as the original array ; Driver 's Code ; Function call to count even and odd","#include <bits/stdc++.h>
using namespace std;
void countEvenOdd(int arr[], int n, int K) {
  int even = 0, odd = 0;
  for (int i = 0; i < n; i++) {
    int x = __builtin_popcount(arr[i]);
    if (x % 2 == 0)
      even++;
    else
      odd++;
  }
  int y;
  y = __builtin_popcount(K);
  if (y & 1) {
    cout << ""Even = "" << odd << "", Odd = "" << even;
  } else {
    cout << ""Even = "" << even << "", Odd = "" << odd;
  }
}
int main(void) {
  int arr[] = {4, 2, 15, 9, 8, 8};
  int K = 3;
  int n = sizeof(arr) / sizeof(arr[0]);
  countEvenOdd(arr, n, K);
  return 0;
}",Count of even and odd set bit with array element after XOR with K.
264,"gOOGLE cASE of a given sentence | CPP program to convert given sentence to camel case . ; Function to remove spaces and convert into camel case ; check for spaces in the sentence ; conversion into upper case ; If not space , copy character ; return string to main ; Driver Code","#include <bits/stdc++.h>
using namespace std;
string convert(string s) {
  int n = s.length();
  s[0] = tolower(s[0]);
  for (int i = 1; i < n; i++) {
    if (s[i] == ' ' && i < n) {
      s[i + 1] = tolower(s[i + 1]);
      i++;
    } else
      s[i] = toupper(s[i]);
  }
  return s;
}
int main() {
  string str = ""I get intern at geeksforgeeks"";
  cout << convert(str);
  return 0;
}",gOOGLE cASE of a given sentence.
265,"Transform the string | CPP code to transform string ; Function to change character 's case ; If character is lowercase change to uppercase ; If character is uppercase change to lowercase ; Function to delete vowels ; If character is consonant ; Function to insert "" # "" ; If character is not special ; Function to transform string ; Driver function ; Calling function","#include <bits/stdc++.h>
using namespace std;
string change_case(string a) {
  int l = a.length();
  for (int i = 0; i < l; i++) {
    if (a[i] >= 'a' && a[i] <= 'z')
      a[i] = (char)(65 + (int)(a[i] - 'a'));
    else if (a[i] >= 'A' && a[i] <= 'Z')
      a[i] = (char)(97 + (int)(a[i] - 'A'));
  }
  return a;
}
string delete_vowels(string a) {
  string temp = """";
  int l = a.length();
  for (int i = 0; i < l; i++) {
    if (a[i] != 'a' && a[i] != 'e' && a[i] != 'i' && a[i] != 'o' &&
        a[i] != 'u' && a[i] != 'A' && a[i] != 'E' && a[i] != 'O' &&
        a[i] != 'U' && a[i] != 'I')
      temp += a[i];
  }
  return temp;
}
string insert_hash(string a) {
  string temp = """";
  int l = a.length();
  for (int i = 0; i < l; i++) {
    if ((a[i] >= 'a' && a[i] <= 'z') || (a[i] >= 'A' && a[i] <= 'Z'))
      temp = temp + '#' + a[i];
    else
      temp = temp + a[i];
  }
  return temp;
}
void transformSting(string a) {
  string b = delete_vowels(a);
  string c = change_case(b);
  string d = insert_hash(c);
  cout << d;
}
int main() {
  string a = ""SunshinE!!"";
  transformSting(a);
  return 0;
}",Transform the string.
266,Tcefrep Numbers | C ++ implementation to check if N is a Tcefrep number ; Iterative function to reverse digits of num ; Function to calculate sum of all proper divisors num -- > given natural number ; Final result of summation of divisors ; find all divisors which divides ' num ' ; if ' i ' is divisor of ' num ' ; if both divisors are same then add it only once else add both ; Add 1 to the result as 1 is also a divisor ; Driver Code ; Given Number N ; Function Call,"#include <bits/stdc++.h>
using namespace std;
int reverse(int num) {
  int rev_num = 0;
  while (num > 0) {
    rev_num = rev_num * 10 + num % 10;
    num = num / 10;
  }
  return rev_num;
}
int properDivSum(int num) {
  int result = 0;
  for (int i = 2; i <= sqrt(num); i++) {
    if (num % i == 0) {
      if (i == (num / i))
        result += i;
      else
        result += (i + num / i);
    }
  }
  return (result + 1);
}
bool isTcefrep(int n) { return properDivSum(n) == reverse(n); }
int main() {
  int N = 6;
  if (isTcefrep(N))
    cout << ""Yes"";
  else
    cout << ""No"";
  return 0;
}",Tcefrep Numbers.
267,"Program to find the N | C ++ program to find n - th number containing only 3 and 5. ; If n is odd , append 3 and move to parent ; If n is even , append 5 and move to parent ; Reverse res and return . ; Driver code","#include <bits/stdc++.h>
using namespace std;
string findNthNo(int n) {
  string res = """";
  while (n >= 1) {
    if (n & 1) {
      res = res + ""3"";
      n = (n - 1) / 2;
    } else {
      res = res + ""5"";
      n = (n - 2) / 2;
    }
  }
  reverse(res.begin(), res.end());
  return res;
}
int main() {
  int n = 5;
  cout << findNthNo(n);
  return 0;
}",Program to find the N.
268,Nth non | CPP program to find n - th non - square number . ; function to find the nth Non - Square Number ; conversion from int to long double is necessary in order to preserve decimal places after square root . ; calculating the result ; Driver code ; initializing the term number ; Print the result,"#include <bits/stdc++.h>
using namespace std;
int findNthNonSquare(int n) {
  long double x = (long double)n;
  long double ans = x + floor(0.5 + sqrt(x));
  return (int)ans;
}
int main() {
  int n = 16;
  cout << ""The "" << n << ""th Non-Square number is "";
  cout << findNthNonSquare(n);
  return 0;
}",Nth non.
269,Sum of series with alternate signed squares of AP | Efficient CPP program to find sum of series with alternate signed square AP sums . ; function to calculate series sum ; Driver code,"#include <bits/stdc++.h>
using namespace std;
int seiresSum(int n, int a[]) {
  return n * (a[0] * a[0] - a[2 * n - 1] * a[2 * n - 1]) / (2 * n - 1);
}
int main() {
  int n = 2;
  int a[] = {1, 2, 3, 4};
  cout << seiresSum(n, a);
  return 0;
}",Sum of series with alternate signed squares of AP.
270,"Find nth number that contains the digit k or divisible by k . | C ++ program to find nth number that contains the digit k or divisible by k . ; Function for checking if digit k is in n or not ; finding remainder ; if digit found ; Function for finding nth number ; since k is the first which satisfy the criteria , so consider it in count making count = 1 and starting from i = k + 1 ; checking that the number contain k digit or divisible by k ; Driver code","#include <bits/stdc++.h>
using namespace std;
int checkdigit(int n, int k) {
  while (n) {
    int rem = n % 10;
    if (rem == k)
      return 1;
    n = n / 10;
  }
  return 0;
}
int findNthNumber(int n, int k) {
  for (int i = k + 1, count = 1; count < n; i++) {
    if (checkdigit(i, k) || (i % k == 0))
      count++;
    if (count == n)
      return i;
  }
  return -1;
}
int main() {
  int n = 10, k = 2;
  cout << findNthNumber(n, k) << endl;
  return 0;
}",Find nth number that contains the digit k or divisible by k ..
271,Count of subarrays of size K which is a permutation of numbers from 1 to K | C ++ program to implement the above approach ; Save index of numbers of the array ; Update min and max index with the current index and check if it 's a valid permutation ; Driver code,"#include <iostream>
#include <unordered_map>
#include <vector>
using namespace std;
int find_permutations(vector<int> &arr) {
  int cnt = 0;
  int max_ind = -1, min_ind = 10000000;
  int n = arr.size();
  unordered_map<int, int> index_of;
  for (int i = 0; i < n; i++) {
    index_of[arr[i]] = i + 1;
  }
  for (int i = 1; i <= n; i++) {
    max_ind = max(max_ind, index_of[i]);
    min_ind = min(min_ind, index_of[i]);
    if (max_ind - min_ind + 1 == i)
      cnt++;
  }
  return cnt;
}
int main() {
  vector<int> nums;
  nums.push_back(2);
  nums.push_back(3);
  nums.push_back(1);
  nums.push_back(5);
  nums.push_back(4);
  cout << find_permutations(nums);
  return 0;
}",Count of subarrays of size K which is a permutation of numbers from 1 to K.
272,Count of integers that divide all the elements of the given array | C ++ implementation of the approach ; Function to return the count of the required integers ; To store the gcd of the array elements ; To store the count of factors of the found gcd ; If g is a perfect square ; Factors appear in pairs ; Driver code,"#include <bits/stdc++.h>
using namespace std;
int getCount(int a[], int n) {
  int gcd = 0;
  for (int i = 0; i < n; i++)
    gcd = __gcd(gcd, a[i]);
  int cnt = 0;
  for (int i = 1; i * i <= gcd; i++) {
    if (gcd % i == 0) {
      if (i * i == gcd)
        cnt++;
      else
        cnt += 2;
    }
  }
  return cnt;
}
int main() {
  int a[] = {4, 16, 1024, 48};
  int n = sizeof(a) / sizeof(a[0]);
  cout << getCount(a, n);
  return 0;
}",Count of integers that divide all the elements of the given array.
273,"Minimize cost of removals required to make all remaining characters of the string unique | C ++ program to implement the above approach ; Function to find the minimum cost of removing characters to make the String unique ; stores the visited character ; stores the answer ; traverse the String ; if already visited ; Stores the maximum cost of removing a particular character ; Store the total deletion cost of a particular character ; Mark the current character visited ; Traverse the indices of the String [ i , N - 1 ] ; If any duplicate is found ; Update the maximum cost and total cost ; Mark the current character visited ; Keep the character with maximum cost and delete the rest ; return the minimum cost ; Driver code ; input String ; input array ; function call","#include <bits/stdc++.h>
using namespace std;
int delCost(string s, int cost[], int l1, int l2) {
  bool visited[l1];
  memset(visited, 0, sizeof(visited));
  int ans = 0;
  for (int i = 0; i < l1; i++) {
    if (visited[i]) {
      continue;
    }
    int maxDel = 0;
    int totalCost = 0;
    visited[i] = 1;
    for (int j = i; j < l1; j++) {
      if (s[i] == s[j]) {
        maxDel = max(maxDel, cost[j]);
        totalCost += cost[j];
        visited[j] = 1;
      }
    }
    ans += totalCost - maxDel;
  }
  return ans;
}
int main() {
  string s = ""AAABBB"";
  int l1 = s.size();
  int cost[] = {1, 2, 3, 4, 5, 6};
  int l2 = sizeof(cost) / sizeof(cost[0]);
  cout << delCost(s, cost, l1, l2);
  return 0;
}",Minimize cost of removals required to make all remaining characters of the string unique.
274,"Make all array elements equal by replacing triplets with their Bitwise XOR | C ++ program to implement the above approach ; Function to find triplets such that replacing them with their XOR make all array elements equal ; If N is even ; Calculate xor of array elements ; Traverse the array ; Update xor ; If xor is not equal to 0 ; Selecting the triplets such that elements of the pairs ( arr [ 0 ] , arr [ 1 ] ) , ( arr [ 2 ] , arr [ 3 ] ) . . . can be made equal ; Selecting the triplets such that all array elements can be made equal to arr [ N - 1 ] ; Selecting the triplets such that elements of the pairs ( arr [ 0 ] , arr [ 1 ] ) , ( arr [ 2 ] , arr [ 3 ] ) . . . can be made equal ; Selecting the triplets such that all array elements can be made equal to arr [ N - 1 ] ; Driver Code ; Given array ; Size of array ; Function call","#include <bits/stdc++.h>
using namespace std;
void checkXOR(int arr[], int N) {
  if (N % 2 == 0) {
    int xro = 0;
    for (int i = 0; i < N; i++) {
      xro ^= arr[i];
    }
    if (xro != 0) {
      cout << -1 << endl;
      return;
    }
    for (int i = 0; i < N - 3; i += 2) {
      cout << i << "" "" << i + 1 << "" "" << i + 2 << endl;
    }
    for (int i = 0; i < N - 3; i += 2) {
      cout << i << "" "" << i + 1 << "" "" << N - 1 << endl;
    }
  } else {
    for (int i = 0; i < N - 2; i += 2) {
      cout << i << "" "" << i + 1 << "" "" << i + 2 << endl;
    }
    for (int i = 0; i < N - 2; i += 2) {
      cout << i << "" "" << i + 1 << "" "" << N - 1 << endl;
    }
  }
}
int main() {
  int arr[] = {4, 2, 1, 7, 2};
  int N = sizeof(arr) / sizeof(arr[0]);
  checkXOR(arr, N);
}",Make all array elements equal by replacing triplets with their Bitwise XOR.
275,Make all array elements even by replacing adjacent pair of array elements with their sum | C ++ program to implement the above approach ; Function to find minimum count of operations required to make all array elements even ; Stores minimum count of replacements to make all array elements even ; Stores the count of odd continuous numbers ; Traverse the array ; If arr [ i ] is an odd number ; Update odd_cont_seg ; If odd_cont_seg is even ; Update res ; Update res ; Reset odd_cont_seg = 0 ; If odd_cont_seg exceeds 0 ; If odd_cont_seg is even ; Update res ; Update res ; Print the result ; Drivers Code,"#include <iostream>
using namespace std;
int make_array_element_even(int arr[], int N) {
  int res = 0;
  int odd_cont_seg = 0;
  for (int i = 0; i < N; i++) {
    if (arr[i] % 2 == 1) {
      odd_cont_seg++;
    } else {
      if (odd_cont_seg > 0) {
        if (odd_cont_seg % 2 == 0) {
          res += odd_cont_seg / 2;
        } else {
          res += (odd_cont_seg / 2) + 2;
        }
        odd_cont_seg = 0;
      }
    }
  }
  if (odd_cont_seg > 0) {
    if (odd_cont_seg % 2 == 0) {
      res += odd_cont_seg / 2;
    } else {
      res += odd_cont_seg / 2 + 2;
    }
  }
  return res;
}
int main() {
  int arr[] = {2, 4, 5, 11, 6};
  int N = sizeof(arr) / sizeof(arr[0]);
  cout << make_array_element_even(arr, N);
  return 0;
}",Make all array elements even by replacing adjacent pair of array elements with their sum.
276,Find a number K such that exactly K array elements are greater than or equal to K | C ++ program for the above approach ; Function to find K for which there are exactly K array elements greater than or equal to K ; Finding the largest array element ; Possible values of K ; Traverse the array ; If current array element is greater than or equal to i ; If i array elements are greater than or equal to i ; Otherwise ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
int zvalue(vector<int> &nums) {
  int m = *max_element(nums.begin(), nums.end());
  int cnt = 0;
  for (int i = 0; i <= m; i++) {
    cnt = 0;
    for (int j = 0; j < nums.size(); j++) {
      if (nums[j] >= i)
        cnt++;
    }
    if (cnt == i)
      return i;
  }
  return -1;
}
int main() {
  vector<int> nums = {7, 8, 9, 0, 0, 1};
  cout << zvalue(nums) << endl;
}",Find a number K such that exactly K array elements are greater than or equal to K.
277,Lexicographically smallest and largest anagrams of a string containing another string as its substring | C ++ program for the above approach ; Function to find the lexicographically smallest anagram of string which contains another string ; Initializing the map and set ; Iterating over s1 ; Storing the frequency of characters present in s1 ; Storing the distinct characters present in s1 ; Decreasing the frequency of characters from M that are already present in s2 ; Traversing alphabets in sorted order ; If current character of set is not equal to current character of s2 ; If element is equal to current character of s2 ; Checking for second distinct character in s2 ; s2 [ j ] will store second distinct character ; Return the answer ; Function to find the lexicographically largest anagram of string which contains another string ; Getting the lexicographically smallest anagram ; d1 stores the prefix ; d2 stores the suffix ; Return the result ; Driver Code ; Given two strings ; Function Calls,"#include <bits/stdc++.h>
using namespace std;
pair<string, int> lexico_smallest(string s1, string s2) {
  map<char, int> M;
  set<char> S;
  pair<string, int> pr;
  for (int i = 0; i <= s1.size() - 1; ++i) {
    M[s1[i]]++;
    S.insert(s1[i]);
  }
  for (int i = 0; i <= s2.size() - 1; ++i) {
    M[s2[i]]--;
  }
  char c = s2[0];
  int index = 0;
  string res = """";
  for (auto x : S) {
    if (x != c) {
      for (int i = 1; i <= M[x]; ++i) {
        res += x;
      }
    } else {
      int j = 0;
      index = res.size();
      while (s2[j] == x) {
        j++;
      }
      if (s2[j] < c) {
        res += s2;
        for (int i = 1; i <= M[x]; ++i) {
          res += x;
        }
      } else {
        for (int i = 1; i <= M[x]; ++i) {
          res += x;
        }
        index += M[x];
        res += s2;
      }
    }
  }
  pr.first = res;
  pr.second = index;
  return pr;
}
string lexico_largest(string s1, string s2) {
  pair<string, int> pr = lexico_smallest(s1, s2);
  string d1 = """";
  for (int i = pr.second - 1; i >= 0; i--) {
    d1 += pr.first[i];
  }
  string d2 = """";
  for (int i = pr.first.size() - 1; i >= pr.second + s2.size(); --i) {
    d2 += pr.first[i];
  }
  string res = d2 + s2 + d1;
  return res;
}
int main() {
  string s1 = ""ethgakagmenpgs"";
  string s2 = ""geeks"";
  cout << lexico_smallest(s1, s2).first << ""\n"";
  cout << lexico_largest(s1, s2);
  return (0);
}",Lexicographically smallest and largest anagrams of a string containing another string as its substring.
278,Queries to find the count of shortest paths in a Tree that contains a given edge | C ++ implementation for the above approach ; Adjacency list to represent the tree ; Number of vertices ; Mark visited / unvisited vertices ; Stores the subtree size of the corresponding nodes ; Function to create an edge between two vertices ; Add a to b 's list ; Add b to a 's list ; Function to perform DFS ; Mark the vertex visited ; Include the node in the subtree ; Traverse all its children ; Function to print the required number of paths ; Driver Code ; Number of vertices ; Calling modified dfs function ; Count pairs of vertices in the tree,"#include <bits/stdc++.h>
using namespace std;
const int sz = 1e5;
vector<int> tree[sz];
int n;
bool vis[sz];
int subtreeSize[sz];
void addEdge(int a, int b) {
  tree[a].push_back(b);
  tree[b].push_back(a);
}
void dfs(int x) {
  vis[x] = true;
  subtreeSize[x] = 1;
  for (auto i : tree[x]) {
    if (!vis[i]) {
      dfs(i);
      subtreeSize[x] += subtreeSize[i];
    }
  }
}
void countPairs(int a, int b) {
  int sub = min(subtreeSize[a], subtreeSize[b]);
  cout << sub * (n - sub) << endl;
}
int main() {
  n = 6;
  addEdge(0, 1);
  addEdge(0, 2);
  addEdge(1, 3);
  addEdge(3, 4);
  addEdge(3, 5);
  dfs(0);
  countPairs(1, 3);
  countPairs(0, 2);
  return 0;
}",Queries to find the count of shortest paths in a Tree that contains a given edge.
279,Count of permutations of an Array having each element as a multiple or a factor of its index | C ++ Program to implement the above approach ; Function to find the count of desired permutations ; Base case ; If i has not been inserted ; Backtrack ; Insert i ; Recur to find valid permutations ; Remove i ; Return the final count ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
int findPermutation(unordered_set<int> &arr, int N) {
  int pos = arr.size() + 1;
  if (pos > N)
    return 1;
  int res = 0;
  for (int i = 1; i <= N; i++) {
    if (arr.find(i) == arr.end()) {
      if (i % pos == 0 or pos % i == 0) {
        arr.insert(i);
        res += findPermutation(arr, N);
        arr.erase(arr.find(i));
      }
    }
  }
  return res;
}
int main() {
  int N = 5;
  unordered_set<int> arr;
  cout << findPermutation(arr, N);
  return 0;
}",Count of permutations of an Array having each element as a multiple or a factor of its index.
280,Check if sum Y can be obtained from the Array by the given operations | C ++ Program to implement the above approach ; Function to check if it is possible to obtain sum Y from a sequence of sum X from the array arr [ ] ; Store the difference ; Iterate over the array ; If diff reduced to 0 ; Driver Code,"#include <iostream>
using namespace std;
void solve(int arr[], int n, int X, int Y) {
  int diff = Y - X;
  for (int i = 0; i < n; i++) {
    if (arr[i] != 1) {
      diff = diff % (arr[i] - 1);
    }
  }
  if (diff == 0)
    cout << ""Yes"";
  else
    cout << ""No"";
}
int main() {
  int arr[] = {1, 2, 7, 9, 10};
  int n = sizeof(arr) / sizeof(arr[0]);
  int X = 11, Y = 13;
  solve(arr, n, X, Y);
  return 0;
}",Check if sum Y can be obtained from the Array by the given operations.
281,Farthest distance of a Node from each Node of a Tree | C ++ Program to implement the above approach ; Adjacency List to store the graph ; Stores the height of each node ; Stores the maximum distance of a node from its ancestors ; Function to add edge between two vertices ; Insert edge from u to v ; Insert edge from v to u ; Function to calculate height of each Node ; Iterate in the adjacency list of the current node ; Dfs for child node ; Calculate height of nodes ; Increase height ; Function to calculate the maximum distance of a node from its ancestor ; Iterate in the adjacency list of the current node ; Find two children with maximum heights ; Calculate the maximum distance with ancestor for every node ; Calculating for children ; Driver Code ; Calculate height of nodes of the tree ; Calculate the maximum distance with ancestors ; Print the maximum of the two distances from each node,"#include <bits/stdc++.h>
using namespace std;
#definemaxN100001 vector < int> adj[maxN];
int height[maxN];
int dist[maxN];
void addEdge(int u, int v) {
  adj[u].push_back(v);
  adj[v].push_back(u);
}
void dfs1(int cur, int par) {
  for (auto u : adj[cur]) {
    if (u != par) {
      dfs1(u, cur);
      height[cur] = max(height[cur], height[u]);
    }
  }
  height[cur] += 1;
}
void dfs2(int cur, int par) {
  int max1 = 0;
  int max2 = 0;
  for (auto u : adj[cur]) {
    if (u != par) {
      if (height[u] >= max1) {
        max2 = max1;
        max1 = height[u];
      } else if (height[u] > max2) {
        max2 = height[u];
      }
    }
  }
  int sum = 0;
  for (auto u : adj[cur]) {
    if (u != par) {
      sum = ((max1 == height[u]) ? max2 : max1);
      if (max1 == height[u])
        dist[u] = 1 + max(1 + max2, dist[cur]);
      else
        dist[u] = 1 + max(1 + max1, dist[cur]);
      dfs2(u, cur);
    }
  }
}
int main() {
  int n = 6;
  addEdge(1, 2);
  addEdge(2, 3);
  addEdge(2, 4);
  addEdge(2, 5);
  addEdge(5, 6);
  dfs1(1, 0);
  dfs2(1, 0);
  for (int i = 1; i <= n; i++)
    cout << (max(dist[i], height[i]) - 1) << "" "";
  return 0;
}",Farthest distance of a Node from each Node of a Tree.
282,Middle of three using minimum comparisons | CPP program to find middle of three distinct numbers ; Function to find the middle of three number ; Checking for b ; Checking for a ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
int middleOfThree(int a, int b, int c) {
  if ((a < b && b < c) || (c < b && b < a))
    return b;
  else if ((b < a && a < c) || (c < a && a < b))
    return a;
  else
    return c;
}
int main() {
  int a = 20, b = 30, c = 40;
  cout << middleOfThree(a, b, c);
  return 0;
}",Middle of three using minimum comparisons.
283,Difference between Insertion sort and Selection sort | C ++ program for implementation of selection sort ; Function to implement the selection sort ; One by one move boundary of unsorted subarray ; Find the minimum element in unsorted array ; Swap the found minimum element with the first element ; Function to print an array ; Driver Code ; Function Call ; Print the array,"#include <bits/stdc++.h>
using namespace std;
void swap(int *xp, int *yp) {
  int temp = *xp;
  *xp = *yp;
  *yp = temp;
}
void selectionSort(int arr[], int n) {
  int i, j, min_idx;
  for (i = 0; i < n - 1; i++) {
    min_idx = i;
    for (j = i + 1; j < n; j++)
      if (arr[j] < arr[min_idx])
        min_idx = j;
    swap(&arr[min_idx], &arr[i]);
  }
}
void printArray(int arr[], int size) {
  int i;
  for (i = 0; i < size; i++) {
    cout << arr[i] << "" "";
  }
  cout << endl;
}
int main() {
  int arr[] = {64, 25, 12, 22, 11};
  int n = sizeof(arr) / sizeof(arr[0]);
  selectionSort(arr, n);
  cout << ""Sorted array: \n"";
  printArray(arr, n);
  return 0;
}",Difference between Insertion sort and Selection sort.
284,Check if a given string can be converted to another by given possible swaps | C ++ program to implement the above approach ; Stores length of str1 ; Stores length of str2 ; Stores distinct characters of str1 ; Stores distinct characters of str2 ; Stores frequency of each character of str1 ; Traverse the string str1 ; Update frequency of str1 [ i ] ; Traverse the string str1 ; Insert str1 [ i ] into st1 ; Traverse the string str2 ; Insert str1 [ i ] into st1 ; If distinct characters in str1 and str2 are not same ; Stores frequency of each character of str2 ; Traverse the string str2 ; Update frequency of str2 [ i ] ; Sort hash1 [ ] array ; Sort hash2 [ ] array ; Traverse hash1 [ ] and hash2 [ ] ; If hash1 [ i ] not equal to hash2 [ i ] ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
bool checkStr1CanConStr2(string &str1, string &str2) {
  int N = str1.length();
  int M = str2.length();
  set<int> st1;
  set<int> st2;
  int hash1[256] = {0};
  for (int i = 0; i < N; i++) {
    hash1[str1[i]]++;
  }
  for (int i = 0; i < N; i++) {
    st1.insert(str1[i]);
  }
  for (int i = 0; i < M; i++) {
    st2.insert(str2[i]);
  }
  if (st1 != st2) {
    return false;
  }
  int hash2[256] = {0};
  for (int i = 0; i < M; i++) {
    hash2[str2[i]]++;
  }
  sort(hash1, hash1 + 256);
  sort(hash2, hash2 + 256);
  for (int i = 0; i < 256; i++) {
    if (hash1[i] != hash2[i]) {
      return false;
    }
  }
  return true;
}
int main() {
  string str1 = ""xyyzzlll"";
  string str2 = ""yllzzxxx"";
  if (checkStr1CanConStr2(str1, str2)) {
    cout << ""True"";
  } else {
    cout << ""False"";
  }
}",Check if a given string can be converted to another by given possible swaps.
285,Sort the array in a given index range | C ++ program to sort the array in a given index range ; Function to sort the elements of the array from index a to index b ; Variables to store start and end of the index range ; Sort the subarray from arr [ l ] to arr [ r ] ; Print the modified array ; Driver code,"#include <bits/stdc++.h>
using namespace std;
void partSort(int arr[], int N, int a, int b) {
  int l = min(a, b);
  int r = max(a, b);
  vector<int> v(arr, arr + N);
  sort(v.begin() + l, v.begin() + r + 1);
  for (int i = 0; i < N; i++)
    cout << v[i] << "" "";
}
int main() {
  int arr[] = {7, 8, 4, 5, 2};
  int a = 1, b = 4;
  int N = sizeof(arr) / sizeof(arr[0]);
  partSort(arr, N, a, b);
}",Sort the array in a given index range.
286,Find the minimum cost to reach destination using a train | A Dynamic Programming based solution to find min cost to reach station N - 1 from station 0. ; This function returns the smallest possible cost to reach station N - 1 from station 0. ; dist [ i ] stores minimum cost to reach station i from station 0. ; Go through every station and check if using it as an intermediate station gives better path ; Driver program to test above function,"#include <climits>
#include <iostream>
using namespace std;
#defineINFINT_MAX
#defineN4
    int
    minCost(int cost[][N]) {
  int dist[N];
  for (int i = 0; i < N; i++)
    dist[i] = INF;
  dist[0] = 0;
  for (int i = 0; i < N; i++)
    for (int j = i + 1; j < N; j++)
      if (dist[j] > dist[i] + cost[i][j])
        dist[j] = dist[i] + cost[i][j];
  return dist[N - 1];
}
int main() {
  int cost[N][N] = {
      {0, 15, 80, 90}, {INF, 0, 40, 50}, {INF, INF, 0, 70}, {INF, INF, INF, 0}};
  cout << ""The Minimum cost to reach station "" << N << "" is "" << minCost(cost);
  return 0;
}",Find the minimum cost to reach destination using a train.
287,Number of loops of size k starting from a specific node | C ++ Program to find number of cycles of length k in a graph with n nodes . ; Return the Number of ways from a node to make a loop of size K in undirected complete connected graph of N nodes ; Driven Program,"#include <bits/stdc++.h>
using namespace std;
int numOfways(int n, int k) {
  int p = 1;
  if (k % 2)
    p = -1;
  return (pow(n - 1, k) + p * (n - 1)) / n;
}
int main() {
  int n = 4, k = 2;
  cout << numOfways(n, k) << endl;
  return 0;
}",Number of loops of size k starting from a specific node.
288,Program to find the largest and smallest ASCII valued characters in a string | C ++ program to find largest and smallest characters in a string . ; function that return the largest alphabet . ; initializing max alphabet to ' a ' ; find largest alphabet ; returning largest element ; function that return the smallest alphabet ; initializing smallest alphabet to ' z ' ; find smallest alphabet ; returning smallest alphabet ; Driver Code ; Character array ; Calculating size of the string ; calling functions and print returned value,"#include <iostream>
using namespace std;
char largest_alphabet(char a[], int n) {
  char max = 'A';
  for (int i = 0; i < n; i++)
    if (a[i] > max)
      max = a[i];
  return max;
}
char smallest_alphabet(char a[], int n) {
  char min = 'z';
  for (int i = 0; i < n - 1; i++)
    if (a[i] < min)
      min = a[i];
  return min;
}
int main() {
  char a[] = ""GeEksforGeeks"";
  int size = sizeof(a) / sizeof(a[0]);
  cout << ""Largest and smallest alphabet is : "";
  cout << largest_alphabet(a, size) << "" and "";
  cout << smallest_alphabet(a, size) << endl;
  return 0;
}",Program to find the largest and smallest ASCII valued characters in a string.
289,"Make largest palindrome by changing at most K | C ++ program to get largest palindrome changing atmost K digits ; Returns maximum possible palindrome using k changes ; Initialize l and r by leftmost and rightmost ends ; first try to make string palindrome ; Replace left and right character by maximum of both ; If k is negative then we can 't make  string palindrome ; At mid character , if K > 0 then change it to 9 ; If character at lth ( same as rth ) is less than 9 ; If none of them is changed in the previous loop then subtract 2 from K and convert both to 9 ; If one of them is changed in the previous loop then subtract 1 from K ( 1 more is subtracted already ) and make them 9 ; Driver code to test above methods","#include <bits/stdc++.h>
using namespace std;
string maximumPalinUsingKChanges(string str, int k) {
  string palin = str;
  int l = 0;
  int r = str.length() - 1;
  while (l < r) {
    if (str[l] != str[r]) {
      palin[l] = palin[r] = max(str[l], str[r]);
      k--;
    }
    l++;
    r--;
  }
  if (k < 0)
    return ""Not possible"";
  l = 0;
  r = str.length() - 1;
  while (l <= r) {
    if (l == r) {
      if (k > 0)
        palin[l] = '9';
    }
    if (palin[l] < '9') {
      if (k >= 2 && palin[l] == str[l] && palin[r] == str[r]) {
        k -= 2;
        palin[l] = palin[r] = '9';
      } else if (k >= 1 && (palin[l] != str[l] palin[r] != str[r])) {
        k--;
        palin[l] = palin[r] = '9';
      }
    }
    l++;
    r--;
  }
  return palin;
}
int main() {
  string str = ""43435"";
  int k = 3;
  cout << maximumPalinUsingKChanges(str, k);
  return 0;
}",Make largest palindrome by changing at most K.
290,"Count triples with Bitwise AND equal to Zero | C ++ program for the above approach ; Function to find the number of triplets whose Bitwise AND is 0. ; Stores the count of triplets having bitwise AND equal to 0 ; Stores frequencies of all possible A [ i ] & A [ j ] ; Traverse the array ; Update frequency of Bitwise AND of all array elements with a ; Traverse the array ; Iterate the map ; If bitwise AND of triplet is zero , increment cnt ; Return the number of triplets whose Bitwise AND is 0. ; Driver Code ; Input Array ; Function Call","#include <bits/stdc++.h>
#include <iostream>
using namespace std;
int countTriplets(vector<int> &A) {
  int cnt = 0;
  unordered_map<int, int> tuples;
  for (auto a : A)
    for (auto b : A)
      ++tuples[a & b];
  for (auto a : A)
    for (auto t : tuples)
      if ((t.first & a) == 0)
        cnt += t.second;
  return cnt;
}
int main() {
  vector<int> A = {2, 1, 3};
  cout << countTriplets(A);
  return 0;
}",Count triples with Bitwise AND equal to Zero.
291,Minimize the count of adjacent pairs with different parity | C ++ implementation of above approach ; Recursive function to calculate minimum adjacent pairs with different parity ; If all the numbers are placed ; If replacement is not required ; If replacement is required ; backtracking ; backtracking ; Function to display the minimum number of adjacent elements with different parity ; Store no of even numbers not present in the array ; Store no of odd numbers not present in the array ; Erase exisiting numbers ; Store non - exisiting even and odd numbers ; Driver code,"#include <bits/stdc++.h>
using namespace std;
void parity(vector<int> even, vector<int> odd, vector<int> v, int i, int &min) {
  if (i == v.size() || even.size() == 0 && odd.size() == 0) {
    int count = 0;
    for (int j = 0; j < v.size() - 1; j++) {
      if (v[j] % 2 != v[j + 1] % 2)
        count++;
    }
    if (count < min)
      min = count;
    return;
  }
  if (v[i] != -1)
    parity(even, odd, v, i + 1, min);
  else {
    if (even.size() != 0) {
      int x = even.back();
      even.pop_back();
      v[i] = x;
      parity(even, odd, v, i + 1, min);
      even.push_back(x);
    }
    if (odd.size() != 0) {
      int x = odd.back();
      odd.pop_back();
      v[i] = x;
      parity(even, odd, v, i + 1, min);
      odd.push_back(x);
    }
  }
}
void minDiffParity(vector<int> v, int n) {
  vector<int> even;
  vector<int> odd;
  unordered_map<int, int> m;
  for (int i = 1; i <= n; i++)
    m[i] = 1;
  for (int i = 0; i < v.size(); i++) {
    if (v[i] != -1)
      m.erase(v[i]);
  }
  for (auto i : m) {
    if (i.first % 2 == 0)
      even.push_back(i.first);
    else
      odd.push_back(i.first);
  }
  int min = 1000;
  parity(even, odd, v, 0, min);
  cout << min << endl;
}
int main() {
  int n = 8;
  vector<int> v = {2, 1, 4, -1, -1, 6, -1, 8};
  minDiffParity(v, n);
  return 0;
}",Minimize the count of adjacent pairs with different parity.
292,Find triplet such that number of nodes connecting these triplets is maximum | C ++ implementation of the approach ; To store the required nodes ; Parent array to retrace the nodes ; Visited array to prevent DFS in direction on Diameter path ; DFS function to find the startnode ; DFS function to find the endnode of diameter and maintain the parent array ; DFS function to find the end node of the Longest Branch to Diameter ; Function to find the required nodes ; To find start node of diameter ; To find end node of diameter ; x is the end node of diameter ; Mark all the nodes on diameter using back tracking ; Find the end node of longest branch to diameter ; Driver code,"#include <bits/stdc++.h>
#definelllonglongint
#defineMAX100005
using namespace std;
vector<int> adjacent[MAX];
bool visited[MAX];
int startnode, endnode, thirdnode;
int maxi = -1, N;
int parent[MAX];
bool vis[MAX];
void dfs(int u, int count) {
  visited[u] = true;
  int temp = 0;
  for (int i = 0; i < adjacent[u].size(); i++) {
    if (!visited[adjacent[u][i]]) {
      temp++;
      dfs(adjacent[u][i], count + 1);
    }
  }
  if (temp == 0) {
    if (maxi < count) {
      maxi = count;
      startnode = u;
    }
  }
}
void dfs1(int u, int count) {
  visited[u] = true;
  int temp = 0;
  for (int i = 0; i < adjacent[u].size(); i++) {
    if (!visited[adjacent[u][i]]) {
      temp++;
      parent[adjacent[u][i]] = u;
      dfs1(adjacent[u][i], count + 1);
    }
  }
  if (temp == 0) {
    if (maxi < count) {
      maxi = count;
      endnode = u;
    }
  }
}
void dfs2(int u, int count) {
  visited[u] = true;
  int temp = 0;
  for (int i = 0; i < adjacent[u].size(); i++) {
    if (!visited[adjacent[u][i]] && !vis[adjacent[u][i]]) {
      temp++;
      dfs2(adjacent[u][i], count + 1);
    }
  }
  if (temp == 0) {
    if (maxi < count) {
      maxi = count;
      thirdnode = u;
    }
  }
}
void findNodes() {
  dfs(1, 0);
  for (int i = 0; i <= N; i++)
    visited[i] = false;
  maxi = -1;
  dfs1(startnode, 0);
  for (int i = 0; i <= N; i++)
    visited[i] = false;
  int x = endnode;
  vis[startnode] = true;
  while (x != startnode) {
    vis[x] = true;
    x = parent[x];
  }
  maxi = -1;
  for (int i = 1; i <= N; i++) {
    if (vis[i])
      dfs2(i, 0);
  }
}
int main() {
  N = 4;
  adjacent[1].push_back(2);
  adjacent[2].push_back(1);
  adjacent[1].push_back(3);
  adjacent[3].push_back(1);
  adjacent[1].push_back(4);
  adjacent[4].push_back(1);
  findNodes();
  cout << ""("" << startnode << "", "" << endnode << "", "" << thirdnode << "")"";
  return 0;
}",Find triplet such that number of nodes connecting these triplets is maximum.
293,Percentage increase in volume of the sphere if radius is increased by a given percentage | C ++ program to find percentage increase in the volume of the sphere if radius is increased by a given percentage ; Driver code,"#include <bits/stdc++.h>
using namespace std;
void newvol(double x) {
  cout << ""percentage increase in the""
       << "" volume of the sphere is ""
       << pow(x, 3) / 10000 + 3 * x + (3 * pow(x, 2)) / 100 << ""%"" << endl;
}
int main() {
  double x = 10;
  newvol(x);
  return 0;
}",Percentage increase in volume of the sphere if radius is increased by a given percentage.
294,Length of the chord of the circle whose radius and the angle subtended at the center by the chord is given | C ++ program to find the length chord of the circle whose radius and the angle subtended at the centre is also given ; Function to find the length of the chord ; Driver code,"#include <bits/stdc++.h>
using namespace std;
void length_of_chord(double r, double x) {
  cout << ""The length of the chord""
       << "" of the circle is "" << 2 * r * sin(x * (3.14 / 180)) << endl;
}
int main() {
  double r = 4, x = 63;
  length_of_chord(r, x);
  return 0;
}",Length of the chord of the circle whose radius and the angle subtended at the center by the chord is given.
295,Area of a square inscribed in a circle which is inscribed in an equilateral triangle | C ++ Program to find the area of the square inscribed within the circle which in turn is inscribed in an equilateral triangle ; Function to find the area of the square ; a cannot be negative ; area of the square ; Driver code,"#include <bits/stdc++.h>
using namespace std;
float area(float a) {
  if (a < 0)
    return -1;
  float area = sqrt(a) / 6;
  return area;
}
int main() {
  float a = 10;
  cout << area(a) << endl;
  return 0;
}",Area of a square inscribed in a circle which is inscribed in an equilateral triangle.
296,Length of longest rod that can fit into a cuboid | C ++ program to find the longest rod that can fit in a cuboid ; Function to find the length ; temporary variable to hold the intermediate result ; length of longest rod is calculated using square root function ; Driver code ; calling longestRodInCuboid ( ) function to get the length of longest rod,"#include <bits/stdc++.h>
using namespace std;
double longestRodInCuboid(int length, int breadth, int height) {
  double result;
  int temp;
  temp = length * length + breadth * breadth + height * height;
  result = sqrt(temp);
  return result;
}
int main() {
  int length = 12, breadth = 9, height = 8;
  cout << longestRodInCuboid(length, breadth, height);
  return 0;
}",Length of longest rod that can fit into a cuboid.
297,Check whether a given point lies on or inside the rectangle | Set 3 | C ++ program to Check whether a given point lies inside or on the rectangle or not ; function to Check whether a given point lies inside or on the rectangle or not ; Driver code,"#include <bits/stdc++.h>
using namespace std;
bool LiesInsieRectangle(int a, int b, int x, int y) {
  if (x - y - b <= 0 && x - y + b >= 0 && x + y - 2 * a + b <= 0 &&
      x + y - b >= 0)
    return true;
  return false;
}
int main() {
  int a = 7, b = 2, x = 4, y = 5;
  if (LiesInsieRectangle(a, b, x, y))
    cout << ""Given point lies inside the rectangle"";
  else
    cout << ""Given point does not lie on the rectangle"";
  return 0;
}",Check whether a given point lies on or inside the rectangle.
298,Maximize volume of cuboid with given sum of sides | Return the maximum volume . ; Return the maximum volume . ; for length ; for breadth ; for height ; calculating maximum volume . ; Driven Program,"#include <bits/stdc++.h>
using namespace std;
int maxvolume(int s) {
  int maxvalue = 0;
  for (int i = 1; i <= s - 2; i++) {
    for (int j = 1; j <= s - 1; j++) {
      int k = s - i - j;
      maxvalue = max(maxvalue, i * j * k);
    }
  }
  return maxvalue;
}
int main() {
  int s = 8;
  cout << maxvolume(s) << endl;
  return 0;
}",Maximize volume of cuboid with given sum of sides.
299,Maximize volume of cuboid with given sum of sides | Return the maximum volume . ; Return the maximum volume . ; finding length ; finding breadth ; finding height ; Driven Program,"#include <bits/stdc++.h>
using namespace std;
int maxvolume(int s) {
  int length = s / 3;
  s -= length;
  int breadth = s / 2;
  int height = s - breadth;
  return length * breadth * height;
}
int main() {
  int s = 8;
  cout << maxvolume(s) << endl;
  return 0;
}",Maximize volume of cuboid with given sum of sides.
300,Area of a Hexagon | CPP program to find area of a Hexagon ; function for calculating area of the hexagon . ; Driver Code ; Length of a side,"#include <iostream>
#include <math.h>
using namespace std;
double hexagonArea(double s) { return ((3 * sqrt(3) * (s * s)) / 2); }
int main() {
  double s = 4;
  cout << ""Area : "" << hexagonArea(s);
  return 0;
}",Area of a Hexagon.
301,Maximum number of squares that can fit in a right angle isosceles triangle | CPP program for finding maximum squares that can fit in right angle isosceles triangle ; function for finding max squares ; return in O ( 1 ) with derived formula ; driver program,"#include <bits/stdc++.h>
using namespace std;
int maxSquare(int b, int m) { return (b / m - 1) * (b / m) / 2; }
int main() {
  int b = 10, m = 2;
  cout << maxSquare(b, m);
  return 0;
}",Maximum number of squares that can fit in a right angle isosceles triangle.
302,"Check if right triangle possible from given area and hypotenuse | C ++ program to check existence of right triangle . ; Prints three sides of a right triangle from given area and hypotenuse if triangle is possible , else prints - 1. ; Descriminant of the equation ; applying the linear equation formula to find both the roots ; Driver code","#include <bits/stdc++.h>
using namespace std;
void findRightAngle(int A, int H) {
  long D = pow(H, 4) - 16 * A * A;
  if (D >= 0) {
    long root1 = (H * H + sqrt(D)) / 2;
    long root2 = (H * H - sqrt(D)) / 2;
    long a = sqrt(root1);
    long b = sqrt(root2);
    if (b >= a)
      cout << a << "" "" << b << "" "" << H;
    else
      cout << b << "" "" << a << "" "" << H;
  } else
    cout << ""-1"";
}
int main() { findRightAngle(6, 5); }",Check if right triangle possible from given area and hypotenuse.
303,Maximum number of 2 x2 squares that can be fit inside a right isosceles triangle | C ++ program to count number of 2 x 2 squares in a right isosceles triangle ; removing the extra part we would always need ; Since each square has base of length of 2 ; Driver code,"#include <bits/stdc++.h>
using namespace std;
int numberOfSquares(int base) {
  base = (base - 2);
  base = floor(base / 2);
  return base * (base + 1) / 2;
}
int main() {
  int base = 8;
  cout << numberOfSquares(base);
  return 0;
}",Maximum number of 2 x2 squares that can be fit inside a right isosceles triangle.
304,Bitwise OR of bitwise AND of all possible non | C ++ program for the above approach ; Function to find the Bitwise OR of Bitwise AND of all possible subarrays after performing the every query ; Traversing each pair of the query ; Stores the Bitwise OR ; Updating the array ; Find the Bitwise OR of new updated array ; Print the ans ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
void performQuery(vector<int> arr, vector<vector<int>> Q) {
  for (int i = 0; i < Q.size(); i++) {
    int or1 = 0;
    int x = Q[i][0];
    arr[x - 1] = Q[i][1];
    for (int j = 0; j < arr.size(); j++) {
      or1 = or1 | arr[j];
    }
    cout << or1 << "" "";
  }
}
int main() {
  vector<int> arr({1, 2, 3});
  vector<int> v1({1, 4});
  vector<int> v2({3, 0});
  vector<vector<int>> Q;
  Q.push_back(v1);
  Q.push_back(v2);
  performQuery(arr, Q);
}",Bitwise OR of bitwise AND of all possible non.
305,"Smallest length of number divisible by K formed by using D only | C ++ program for the above approach ; Function to form the smallest number possible ; Array to mark the remainders counted already ; Iterate over the range ; If that remainder is already found , return - 1 ; Driver Code","#include <bits/stdc++.h>
using namespace std;
int smallest(int k, int d) {
  int cnt = 1;
  int m = d % k;
  vector<int> v(k, 0);
  v[m] = 1;
  while (1) {
    if (m == 0)
      return cnt;
    m = (((m * (10 % k)) % k) + (d % k)) % k;
    if (v[m] == 1)
      return -1;
    v[m] = 1;
    cnt++;
  }
  return -1;
}
int main() {
  int d = 1;
  int k = 41;
  cout << smallest(k, d);
  return 0;
}",Smallest length of number divisible by K formed by using D only.
306,Fibonacci Cube Graph | CPP code to find vertices in a fibonacci cube graph of order n ; function to find fibonacci number ; function for finding number of vertices in fibonacci cube graph ; return fibonacci number for f ( n + 2 ) ; driver program,"#include <iostream>
using namespace std;
int fib(int n) {
  if (n <= 1)
    return n;
  return fib(n - 1) + fib(n - 2);
}
int findVertices(int n) { return fib(n + 2); }
int main() {
  int n = 3;
  cout << findVertices(n);
  return 0;
}",Fibonacci Cube Graph.
307,Modify array such that the array does not contain any common divisors other than 1 | C ++ program for the above approach ; Function to check if it is possible to modify the array such that there is no common factor between array elements except 1 ; Stores GCD of the array ; Calculate GCD of the array ; If the current divisor is smaller than X ; Divide GCD by the current divisor ; If possible ; Print the modified array ; Otherwise ; Driver Code ; Given array ; Size of the array,"#include <bits/stdc++.h>
using namespace std;
void checkCommonDivisor(int arr[], int N, int X) {
  int G = 0;
  for (int i = 0; i < N; i++) {
    G = __gcd(G, arr[i]);
  }
  int copy_G = G;
  for (int divisor = 2; divisor <= X; divisor++) {
    while (G % divisor == 0) {
      G = G / divisor;
    }
  }
  if (G <= X) {
    cout << ""Yes\n"";
    for (int i = 0; i < N; i++)
      cout << arr[i] / copy_G << "" "";
    cout << endl;
  } else
    cout << ""No"";
}
int main() {
  int arr[] = {6, 15, 6}, X = 6;
  int N = sizeof(arr) / sizeof(arr[0]);
  checkCommonDivisor(arr, N, X);
}",Modify array such that the array does not contain any common divisors other than 1.
308,"Program to print Spiral Pattern | Create row and col to traverse rows and columns ; Variable to determine the movement r = right , l = left , d = down , u = upper ; Array for matrix ; Assign the value ; switch - case to determine the next index ; If right , go right ; if left , go left ; if up , go up ; if down , go down ; Check if the matrix has reached array boundary ; Add the left size for the next boundary ; If 2 rotations has been made , decrease the size left by 1 ; switch - case to rotate the movement ; if right , rotate to down ; if down , rotate to left ; if left , rotate to up ; if up , rotate to right ; Print the matrix ; Driver Code ; Get the size of size ; Print the Spiral Pattern","#include <iostream>
using namespace std;
void printSpiral(int size) {
  int row = 0, col = 0;
  int boundary = size - 1;
  int sizeLeft = size - 1;
  int flag = 1;
  char move = 'r';
  int matrix[size][size] = {0};
  for (int i = 1; i < size * size + 1; i++) {
    matrix[row][col] = i;
    switch (move) {
    case 'r':
      col += 1;
      break;
    case 'l':
      col -= 1;
      break;
    case 'u':
      row -= 1;
      break;
    case 'd':
      row += 1;
      break;
    }
    if (i == boundary) {
      boundary += sizeLeft;
      if (flag != 2) {
        flag = 2;
      } else {
        flag = 1;
        sizeLeft -= 1;
      }
      switch (move) {
      case 'r':
        move = 'd';
        break;
      case 'd':
        move = 'l';
        break;
      case 'l':
        move = 'u';
        break;
      case 'u':
        move = 'r';
        break;
      }
    }
  }
  for (row = 0; row < size; row++) {
    for (col = 0; col < size; col++) {
      int n = matrix[row][col];
      if (n < 10)
        cout << n << "" "";
      else
        cout << n << "" "";
    }
    cout << endl;
  }
}
int main() {
  int size = 5;
  printSpiral(size);
  return 0;
}",Program to print Spiral Pattern.
309,"Sort the biotonic doubly linked list | C ++ implementation to sort the biotonic doubly linked list ; a node of the doubly linked list ; Function to reverse a Doubly Linked List ; swap next and prev for all nodes of doubly linked list ; Before changing head , check for the cases like empty list and list with only one node ; Function to merge two sorted doubly linked lists ; If first linked list is empty ; If second linked list is empty ; Pick the smaller value ; function to sort a biotonic doubly linked list ; if list is empty or if it contains a single node only ; if true , then ' current ' is the first node which is smaller than its previous node ; move to the next node ; if true , then list is already sorted ; spilt into two lists , one starting with ' head ' and other starting with ' current ' ; reverse the list starting with ' current ' ; merge the two lists and return the final merged doubly linked list ; Function to insert a node at the beginning of the Doubly Linked List ; allocate node ; put in the data ; since we are adding at the beginning , prev is always NULL ; link the old list off the new node ; change prev of head node to new node ; move the head to point to the new node ; Function to print nodes in a given doubly linked list ; if list is empty ; Driver program to test above ; Create the doubly linked list : 2 < -> 5 < -> 7 < -> 12 < -> 10 < -> 6 < -> 4 < -> 1 ; sort the biotonic DLL","#include <bits/stdc++.h>
using namespace std;
struct Node {
  int data;
  struct Node *next;
  struct Node *prev;
};
void reverse(struct Node **head_ref) {
  struct Node *temp = NULL;
  struct Node *current = *head_ref;
  while (current != NULL) {
    temp = current->prev;
    current->prev = current->next;
    current->next = temp;
    current = current->prev;
  }
  if (temp != NULL)
    *head_ref = temp->prev;
}
struct Node *merge(struct Node *first, struct Node *second) {
  if (!first)
    return second;
  if (!second)
    return first;
  if (first->data < second->data) {
    first->next = merge(first->next, second);
    first->next->prev = first;
    first->prev = NULL;
    return first;
  } else {
    second->next = merge(first, second->next);
    second->next->prev = second;
    second->prev = NULL;
    return second;
  }
}
struct Node *sort(struct Node *head) {
  if (head == NULL head->next == NULL)
    return head;
  struct Node *current = head->next;
  while (current != NULL) {
    if (current->data < current->prev->data)
      break;
    current = current->next;
  }
  if (current == NULL)
    return head;
  current->prev->next = NULL;
  current->prev = NULL;
  reverse(&current);
  return merge(head, current);
}
void push(struct Node **head_ref, int new_data) {
  struct Node *new_node = (struct Node *)malloc(sizeof(struct Node));
  new_node->data = new_data;
  new_node->prev = NULL;
  new_node->next = (*head_ref);
  if ((*head_ref) != NULL)
    (*head_ref)->prev = new_node;
  (*head_ref) = new_node;
}
void printList(struct Node *head) {
  if (head == NULL)
    cout << ""Doubly Linked list empty"";
  while (head != NULL) {
    cout << head->data << "" "";
    head = head->next;
  }
}
int main() {
  struct Node *head = NULL;
  push(&head, 1);
  push(&head, 4);
  push(&head, 6);
  push(&head, 10);
  push(&head, 12);
  push(&head, 7);
  push(&head, 5);
  push(&head, 2);
  cout << ""Original Doubly linked list:n"";
  printList(head);
  head = sort(head);
  cout << ""Doublylinkedlistaftersorting:n"";
  printList(head);
  return 0;
}",Sort the biotonic doubly linked list.
310,"Arrange consonants and vowels nodes in a linked list | C ++ program to arrange consonants and vowels nodes in a linked list ; A linked list node ; Function to add new node to the List ; utility function to print linked list ; utility function for checking vowel ; function to arrange consonants and vowels nodes ; for keep track of vowel ; list is empty ; We need to discover the first vowel in the list . It is going to be the returned head , and also the initial latestVowel . ; first element is a vowel . It will also be the new head and the initial latestVowel ; ; First element is not a vowel . Iterate through the list until we find a vowel . Note that curr points to the element * before * the element with the vowel . ; This is an edge case where there are only consonants in the list . ; Set the initial latestVowel and the new head to the vowel item that we found . Relink the chain of consonants after that vowel item : old_head_consonant -> consonant1 -> consonant2 -> vowel -> rest_of_list becomes vowel -> old_head_consonant -> consonant1 -> consonant2 -> rest_of_list ; Now traverse the list . Curr is always the item * before * the one we are checking , so that we can use it to re - link . ; The next discovered item is a vowel ; If it comes directly after the previous vowel , we don 't need to  move items around, just mark the  new latestVowel and advance curr. ; But if it comes after an intervening chain of consonants , we need to chain the newly discovered vowel right after the old vowel . Curr is not changed as after the re - linking it will have a new next , that has not been checked yet , and we always keep curr at one before the next to check . ; Chain in new vowel ; Advance latestVowel ; Remove found vowel from previous place ; Re - link chain of consonants after latestVowel ; No vowel in the next element , advance curr . ; Driver code","#include <bits/stdc++.h>
using namespace std;
struct Node {
  char data;
  struct Node *next;
};
Node *newNode(char key) {
  Node *temp = new Node;
  temp->data = key;
  temp->next = NULL;
  return temp;
}
void printlist(Node *head) {
  if (!head) {
    cout << ""Empty List\n"";
    return;
  }
  while (head != NULL) {
    cout << head->data << "" "";
    if (head->next)
      cout << ""-> "";
    head = head->next;
  }
  cout << endl;
}
bool isVowel(char x) { return (x == 'a' x == 'e' x == 'i' x == 'o' x == 'u'); }
Node *arrange(Node *head) {
  Node *newHead = head;
  Node *latestVowel;
  Node *curr = head;
  if (head == NULL)
    return NULL;
  if (isVowel(head->data))
    latestVowel = head;
  else {
    while (curr->next != NULL && !isVowel(curr->next->data))
      curr = curr->next;
    if (curr->next == NULL)
      return head;
    latestVowel = newHead = curr->next;
    curr->next = curr->next->next;
    latestVowel->next = head;
  }
  while (curr != NULL && curr->next != NULL) {
    if (isVowel(curr->next->data)) {
      if (curr == latestVowel) {
        latestVowel = curr = curr->next;
      } else {
        Node *temp = latestVowel->next;
        latestVowel->next = curr->next;
        latestVowel = latestVowel->next;
        curr->next = curr->next->next;
        latestVowel->next = temp;
      }
    } else {
      curr = curr->next;
    }
  }
  return newHead;
}
int main() {
  Node *head = newNode('a');
  head->next = newNode('b');
  head->next->next = newNode('c');
  head->next->next->next = newNode('e');
  head->next->next->next->next = newNode('d');
  head->next->next->next->next->next = newNode('o');
  head->next->next->next->next->next->next = newNode('x');
  head->next->next->next->next->next->next->next = newNode('i');
  printf(""Linked list before :\n"");
  printlist(head);
  head = arrange(head);
  printf(""Linked list after :\n"");
  printlist(head);
  return 0;
}",Arrange consonants and vowels nodes in a linked list.
311,K 'th Largest element in BST using constant extra space | CPP code for finding K - th largest Node using O ( 1 ) extra memory and reverse Morris traversal . ; Node structure ; helper function to create a new Node ; count variable to keep count of visited Nodes ; if right child is NULL ; first increment count and check if count = k ; otherwise move to the left child ; find inorder successor of current Node ; set left child of successor to the current Node ; move current to its right ; restoring the tree back to original binary search tree removing threaded links ; move current to its left child ; Constructed binary tree is 4 / \ 2 7 / \ / \ 1 3 6 10,"#include <bits/stdc++.h>
using namespace std;
struct Node {
  int data;
  struct Node *left, *right;
};
Node *newNode(int data) {
  Node *temp = new Node;
  temp->data = data;
  temp->right = temp->left = NULL;
  return temp;
}
Node *KthLargestUsingMorrisTraversal(Node *root, int k) {
  Node *curr = root;
  Node *Klargest = NULL;
  int count = 0;
  while (curr != NULL) {
    if (curr->right == NULL) {
      if (++count == k)
        Klargest = curr;
      curr = curr->left;
    } else {
      Node *succ = curr->right;
      while (succ->left != NULL && succ->left != curr)
        succ = succ->left;
      if (succ->left == NULL) {
        succ->left = curr;
        curr = curr->right;
      } else {
        succ->left = NULL;
        if (++count == k)
          Klargest = curr;
        curr = curr->left;
      }
    }
  }
  return Klargest;
}
int main() {
  Node *root = newNode(4);
  root->left = newNode(2);
  root->right = newNode(7);
  root->left->left = newNode(1);
  root->left->right = newNode(3);
  root->right->left = newNode(6);
  root->right->right = newNode(10);
  cout << ""Finding K-th largest Node in BST : ""
       << KthLargestUsingMorrisTraversal(root, 2)->data;
  return 0;
}",K 'th Largest element in BST using constant extra space.
312,"Sorting rows of matrix in ascending order followed by columns in descending order | C ++ implementation to sort the rows of matrix in ascending order followed by sorting the columns in descending order ; function to sort each row of the matrix according to the order specified by ascending . ; function to find transpose of the matrix ; swapping element at index ( i , j ) by element at index ( j , i ) ; function to sort the matrix row - wise and column - wise ; sort rows of mat [ ] [ ] ; get transpose of mat [ ] [ ] ; again sort rows of mat [ ] [ ] in descending order . ; again get transpose of mat [ ] [ ] ; function to print the matrix ; Driver program to test above","#include <bits/stdc++.h>
using namespace std;
#defineMAX_SIZE10 void sortByRow(int mat[][MAX_SIZE], int n, bool ascending) {
  for (int i = 0; i < n; i++) {
    if (ascending)
      sort(mat[i], mat[i] + n);
    else
      sort(mat[i], mat[i] + n, greater<int>());
  }
}
void transpose(int mat[][MAX_SIZE], int n) {
  for (int i = 0; i < n; i++)
    for (int j = i + 1; j < n; j++)
      swap(mat[i][j], mat[j][i]);
}
void sortMatRowAndColWise(int mat[][MAX_SIZE], int n) {
  sortByRow(mat, n, true);
  transpose(mat, n);
  sortByRow(mat, n, false);
  transpose(mat, n);
}
void printMat(int mat[][MAX_SIZE], int n) {
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < n; j++)
      cout << mat[i][j] << "" "";
    cout << endl;
  }
}
int main() {
  int n = 3;
  int mat[n][MAX_SIZE] = {{3, 2, 1}, {9, 8, 7}, {6, 5, 4}};
  cout << ""Original Matrix:\n"";
  printMat(mat, n);
  sortMatRowAndColWise(mat, n);
  cout << ""MatrixAfterSorting:"";
  printMat(mat, n);
  return 0;
}",Sorting rows of matrix in ascending order followed by columns in descending order.
313,"Sort the matrix row | C ++ implementation to sort the matrix row - wise and column - wise ; function to sort each row of the matrix ; sorting row number ' i ' ; function to find transpose of the matrix ; swapping element at index ( i , j ) by element at index ( j , i ) ; function to sort the matrix row - wise and column - wise ; sort rows of mat [ ] [ ] ; get transpose of mat [ ] [ ] ; again sort rows of mat [ ] [ ] ; again get transpose of mat [ ] [ ] ; function to print the matrix ; Driver program to test above","#include <bits/stdc++.h>
using namespace std;
#defineMAX_SIZE10 void sortByRow(int mat[MAX_SIZE][MAX_SIZE], int n) {
  for (int i = 0; i < n; i++)
    sort(mat[i], mat[i] + n);
}
void transpose(int mat[MAX_SIZE][MAX_SIZE], int n) {
  for (int i = 0; i < n; i++)
    for (int j = i + 1; j < n; j++)
      swap(mat[i][j], mat[j][i]);
}
void sortMatRowAndColWise(int mat[MAX_SIZE][MAX_SIZE], int n) {
  sortByRow(mat, n);
  transpose(mat, n);
  sortByRow(mat, n);
  transpose(mat, n);
}
void printMat(int mat[MAX_SIZE][MAX_SIZE], int n) {
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < n; j++)
      cout << mat[i][j] << "" "";
    cout << endl;
  }
}
int main() {
  int mat[MAX_SIZE][MAX_SIZE] = {{4, 1, 3}, {9, 6, 8}, {5, 2, 7}};
  int n = 3;
  cout << ""Original Matrix:\n"";
  printMat(mat, n);
  sortMatRowAndColWise(mat, n);
  cout << ""MatrixAfterSorting:"";
  printMat(mat, n);
  return 0;
}",Sort the matrix row.
314,Magic Square | Even Order | C ++ Program to print Magic square of Doubly even order ; Function for calculating Magic square ; filling matrix with its count value starting from 1 ; ; change value of Array elements at fix location as per rule ( n * n + 1 ) - arr [ i ] [ j ] Top Left corner of Matrix ( order ( n / 4 ) * ( n / 4 ) ) ; Top Right corner of Matrix ( order ( n / 4 ) * ( n / 4 ) ) ; Bottom Left corner of Matrix ( order ( n / 4 ) * ( n / 4 ) ) ; Bottom Right corner of Matrix ( order ( n / 4 ) * ( n / 4 ) ) ; Centre of Matrix ( order ( n / 2 ) * ( n / 2 ) ) ; Printing the magic - square ; driver program ; Function call,"#include <iostream>
using namespace std;
void doublyEven(int n) {
  int arr[n][n], i, j;
  for (i = 0; i < n; i++)
    for (j = 0; j < n; j++)
      arr[i][j] = (n * i) + j + 1;
  for (i = 0; i < n / 4; i++)
    for (j = 0; j < n / 4; j++)
      arr[i][j] = (n * n + 1) - arr[i][j];
  for (i = 0; i < n / 4; i++)
    for (j = 3 * (n / 4); j < n; j++)
      arr[i][j] = (n * n + 1) - arr[i][j];
  for (i = 3 * n / 4; i < n; i++)
    for (j = 0; j < n / 4; j++)
      arr[i][j] = (n * n + 1) - arr[i][j];
  for (i = 3 * n / 4; i < n; i++)
    for (j = 3 * n / 4; j < n; j++)
      arr[i][j] = (n * n + 1) - arr[i][j];
  for (i = n / 4; i < 3 * n / 4; i++)
    for (j = n / 4; j < 3 * n / 4; j++)
      arr[i][j] = (n * n + 1) - arr[i][j];
  for (i = 0; i < n; i++) {
    for (j = 0; j < n; j++)
      cout << arr[i][j] << "" "";
    cout << ""\n"";
  }
}
int main() {
  int n = 8;
  doublyEven(n);
  return 0;
}",Magic Square.
315,Kronecker Product of two matrices | C ++ code to find the Kronecker Product of two matrices and stores it as matrix C ; rowa and cola are no of rows and columns of matrix A rowb and colb are no of rows and columns of matrix B ; Function to computes the Kronecker Product of two matrices ; i loops till rowa ; k loops till rowb ; j loops till cola ; l loops till colb ; Each element of matrix A is multiplied by whole Matrix B resp and stored as Matrix C ; Driver Code,"#include <iostream>
using namespace std;
const int cola = 2, rowa = 3, colb = 3, rowb = 2;
void Kroneckerproduct(int A[][cola], int B[][colb]) {
  int C[rowa * rowb][cola * colb];
  for (int i = 0; i < rowa; i++) {
    for (int k = 0; k < rowb; k++) {
      for (int j = 0; j < cola; j++) {
        for (int l = 0; l < colb; l++) {
          C[i + l + 1][j + k + 1] = A[i][j] * B[k][l];
          cout << C[i + l + 1][j + k + 1] << "" "";
        }
      }
      cout << endl;
    }
  }
}
int main() {
  int A[3][2] = {{1, 2}, {3, 4}, {1, 0}}, B[2][3] = {{0, 5, 2}, {6, 7, 3}};
  Kroneckerproduct(A, B);
  return 0;
}",Kronecker Product of two matrices.
316,Program to check if matrix is lower triangular | Program to check lower triangular matrix . ; Function to check matrix is in lower triangular form or not . ; Driver function . ; Function call,"#include <bits/stdc++.h>
#defineN4
using namespace std;
bool isLowerTriangularMatrix(int mat[N][N]) {
  for (int i = 0; i < N; i++)
    for (int j = i + 1; j < N; j++)
      if (mat[i][j] != 0)
        return false;
  return true;
}
int main() {
  int mat[N][N] = {{1, 0, 0, 0}, {1, 4, 0, 0}, {4, 6, 2, 0}, {0, 4, 7, 6}};
  if (isLowerTriangularMatrix(mat))
    cout << ""Yes"";
  else
    cout << ""No"";
  return 0;
}",Program to check if matrix is lower triangular.
317,Program to check if matrix is upper triangular | Program to check upper triangular matrix . ; Function to check matrix is in upper triangular form or not . ; Driver function .,"#include <bits/stdc++.h>
#defineN4
using namespace std;
bool isUpperTriangularMatrix(int mat[N][N]) {
  for (int i = 1; i < N; i++)
    for (int j = 0; j < i; j++)
      if (mat[i][j] != 0)
        return false;
  return true;
}
int main() {
  int mat[N][N] = {{1, 3, 5, 3}, {0, 4, 6, 2}, {0, 0, 2, 5}, {0, 0, 0, 6}};
  if (isUpperTriangularMatrix(mat))
    cout << ""Yes"";
  else
    cout << ""No"";
  return 0;
}",Program to check if matrix is upper triangular.
318,Counting sets of 1 s and 0 s in a binary matrix | CPP program to compute number of sets in a binary matrix . ; no of columns ; no of rows ; function to calculate the number of non empty sets of cell ; stores the final answer ; traverses row - wise ; traverses column wise ; at the end subtract n * m as no of single sets have been added twice . ; driver program to test the above function .,"#include <bits/stdc++.h>
using namespace std;
const int m = 3;
const int n = 2;
long long countSets(int a[n][m]) {
  long long res = 0;
  for (int i = 0; i < n; i++) {
    int u = 0, v = 0;
    for (int j = 0; j < m; j++)
      a[i][j] ? u++ : v++;
    res += pow(2, u) - 1 + pow(2, v) - 1;
  }
  for (int i = 0; i < m; i++) {
    int u = 0, v = 0;
    for (int j = 0; j < n; j++)
      a[j][i] ? u++ : v++;
    res += pow(2, u) - 1 + pow(2, v) - 1;
  }
  return res - (n * m);
}
int main() {
  int a[][3] = {(1, 0, 1), (0, 1, 0)};
  cout << countSets(a);
  return 0;
}",Counting sets of 1 s and 0 s in a binary matrix.
319,"Program to check if a matrix is symmetric | Simple c ++ code for check a matrix is symmetric or not . ; Fills transpose of mat [ N ] [ N ] in tr [ N ] [ N ] ; Returns true if mat [ N ] [ N ] is symmetric , else false ; Driver code","#include <iostream>
using namespace std;
const int MAX = 100;
void transpose(int mat[][MAX], int tr[][MAX], int N) {
  for (int i = 0; i < N; i++)
    for (int j = 0; j < N; j++)
      tr[i][j] = mat[j][i];
}
bool isSymmetric(int mat[][MAX], int N) {
  int tr[N][MAX];
  transpose(mat, tr, N);
  for (int i = 0; i < N; i++)
    for (int j = 0; j < N; j++)
      if (mat[i][j] != tr[i][j])
        return false;
  return true;
}
int main() {
  int mat[][MAX] = {{1, 3, 5}, {3, 2, 4}, {5, 4, 1}};
  if (isSymmetric(mat, 3))
    cout << ""Yes"";
  else
    cout << ""No"";
  return 0;
}",Program to check if a matrix is symmetric.
320,"Program to check if a matrix is symmetric | Efficient c ++ code for check a matrix is symmetric or not . ; Returns true if mat [ N ] [ N ] is symmetric , else false ; Driver code","#include <iostream>
using namespace std;
const int MAX = 100;
bool isSymmetric(int mat[][MAX], int N) {
  for (int i = 0; i < N; i++)
    for (int j = 0; j < N; j++)
      if (mat[i][j] != mat[j][i])
        return false;
  return true;
}
int main() {
  int mat[][MAX] = {{1, 3, 5}, {3, 2, 4}, {5, 4, 1}};
  if (isSymmetric(mat, 3))
    cout << ""Yes"";
  else
    cout << ""No"";
  return 0;
}",Program to check if a matrix is symmetric.
321,Program to find Normal and Trace of a matrix | C ++ program to find trace and normal of given matrix ; Size of given matrix ; Returns Normal of a matrix of size n x n ; Returns trace of a matrix of size n x n ; Driven source,"#include <bits/stdc++.h>
using namespace std;
const int MAX = 100;
int findNormal(int mat[][MAX], int n) {
  int sum = 0;
  for (int i = 0; i < n; i++)
    for (int j = 0; j < n; j++)
      sum += mat[i][j] * mat[i][j];
  return sqrt(sum);
}
int findTrace(int mat[][MAX], int n) {
  int sum = 0;
  for (int i = 0; i < n; i++)
    sum += mat[i][i];
  return sum;
}
int main() {
  int mat[][MAX] = {
      {1, 1, 1, 1, 1}, {2, 2, 2, 2, 2}, {3, 3, 3, 3, 3},
      {4, 4, 4, 4, 4}, {5, 5, 5, 5, 5},
  };
  cout << ""Trace of Matrix = "" << findTrace(mat, 5) << endl;
  cout << ""Normal of Matrix = "" << findNormal(mat, 5) << endl;
  return 0;
}",Program to find Normal and Trace of a matrix.
322,Maximum determinant of a matrix with every values either 0 or n | C ++ program to find maximum possible determinant of 0 / n matrix . ; Function for maximum determinant ; Function to print resulatant matrix ; three position where 0 appears ; position where n appears ; Driver code,"#include <bits/stdc++.h>
using namespace std;
int maxDet(int n) { return (2 * n * n * n); }
void resMatrix(int n) {
  for (int i = 0; i < 3; i++) {
    for (int j = 0; j < 3; j++) {
      if (i == 0 && j == 2)
        cout << ""0 "";
      else if (i == 1 && j == 0)
        cout << ""0 "";
      else if (i == 2 && j == 1)
        cout << ""0 "";
      else
        cout << n << "" "";
    }
    cout << ""\n"";
  }
}
int main() {
  int n = 15;
  cout << ""Maximum Determinant = "" << maxDet(n);
  cout << ""ResultantMatrix:"" resMatrix(n);
  return 0;
}",Maximum determinant of a matrix with every values either 0 or n.
323,Count Negative Numbers in a Column | CPP implementation of Naive method to count of negative numbers in M [ n ] [ m ] ; Follow the path shown using arrows above ; no more negative numbers in this row ; Driver program to test above functions,"#include <bits/stdc++.h>
using namespace std;
int countNegative(int M[][4], int n, int m) {
  int count = 0;
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < m; j++) {
      if (M[i][j] < 0)
        count += 1;
      else
        break;
    }
  }
  return count;
}
int main() {
  int M[3][4] = {{-3, -2, -1, 1}, {-2, 2, 3, 4}, {4, 5, 7, 8}};
  cout << countNegative(M, 3, 4);
  return 0;
}",Count Negative Numbers in a Column.
324,Count Negative Numbers in a Column | CPP implementation of Efficient method to count of negative numbers in M [ n ] [ m ] ; Function to count negative number ; initialize result ; Start with top right corner ; Follow the path shown using arrows above ; j is the index of the last negative number in this row . So there must be ( j + 1 ) ; negative numbers in this row . ; move to the left and see if we can find a negative number there ; Driver program to test above functions,"#include <bits/stdc++.h>
using namespace std;
int countNegative(int M[][4], int n, int m) {
  int count = 0;
  int i = 0;
  int j = m - 1;
  while (j >= 0 && i < n) {
    if (M[i][j] < 0) {
      count += j + 1;
      i += 1;
    } else
      j -= 1;
  }
  return count;
}
int main() {
  int M[3][4] = {{-3, -2, -1, 1}, {-2, 2, 3, 4}, {4, 5, 7, 8}};
  cout << countNegative(M, 3, 4);
  return 0;
}",Count Negative Numbers in a Column.
325,Count Negative Numbers in a Column | C ++ implementation of More efficient method to count number of negative numbers in row - column sorted matrix M [ n ] [ m ] ; Recursive binary search to get last negative value in a row between a start and an end ; Base case ; Get the mid for binary search ; If current element is negative ; If it is the rightmost negative element in the current row ; Check in the right half of the array ; Check in the left half of the array ; Function to return the count of negative numbers in the given matrix ; Initialize result ; To store the index of the rightmost negative element in the row under consideration ; Iterate over all rows of the matrix ; If the first element of the current row is positive then there will be no negatives in the matrix below or after it ; Run binary search only until the index of last negative Integer in the above row ; Driver code,"#include <bits/stdc++.h>
using namespace std;
int getLastNegativeIndex(int array[], int start, int end, int n) {
  if (start == end) {
    return start;
  }
  int mid = start + (end - start) / 2;
  if (array[mid] < 0) {
    if (mid + 1 < n && array[mid + 1] >= 0) {
      return mid;
    }
    return getLastNegativeIndex(array, mid + 1, end, n);
  } else {
    return getLastNegativeIndex(array, start, mid - 1, n);
  }
}
int countNegative(int M[][4], int n, int m) {
  int count = 0;
  int nextEnd = m - 1;
  for (int i = 0; i < n; i++) {
    if (M[i][0] >= 0) {
      break;
    }
    nextEnd = getLastNegativeIndex(M[i], 0, nextEnd, 4);
    count += nextEnd + 1;
  }
  return count;
}
int main() {
  int M[][4] = {{-3, -2, -1, 1}, {-2, 2, 3, 4}, {4, 5, 7, 8}};
  int r = 3;
  int c = 4;
  cout << (countNegative(M, r, c));
  return 0;
}",Count Negative Numbers in a Column.
326,"Find a specific pair in Matrix | A Naive method to find maximum value of mat [ d ] [ e ] - ma [ a ] [ b ] such that d > a and e > b ; The function returns maximum value A ( d , e ) - A ( a , b ) over all choices of indexes such that both d > a and e > b . ; stores maximum value ; Consider all possible pairs mat [ a ] [ b ] and mat [ d ] [ e ] ; Driver program to test above function","#include <bits/stdc++.h>
using namespace std;
#defineN5 int findMaxValue(int mat[][N]) {
  int maxValue = INT_MIN;
  for (int a = 0; a < N - 1; a++)
    for (int b = 0; b < N - 1; b++)
      for (int d = a + 1; d < N; d++)
        for (int e = b + 1; e < N; e++)
          if (maxValue < (mat[d][e] - mat[a][b]))
            maxValue = mat[d][e] - mat[a][b];
  return maxValue;
}
int main() {
  int mat[N][N] = {{1, 2, -1, -4, -20},
                   {-8, -3, 4, 2, 1},
                   {3, 8, 6, 1, 3},
                   {-4, -1, 1, 7, -6},
                   {0, -4, 10, -5, 1}};
  cout << ""Maximum Value is "" << findMaxValue(mat);
  return 0;
}",Find a specific pair in Matrix.
327,"Find a specific pair in Matrix | An efficient method to find maximum value of mat [ d ] - ma [ a ] [ b ] such that c > a and d > b ; The function returns maximum value A ( c , d ) - A ( a , b ) over all choices of indexes such that both c > a and d > b . ; stores maximum value ; maxArr [ i ] [ j ] stores max of elements in matrix from ( i , j ) to ( N - 1 , N - 1 ) ; last element of maxArr will be same 's as of  the input matrix ; preprocess last row Initialize max ; preprocess last column Initialize max ; preprocess rest of the matrix from bottom ; Update maxValue ; set maxArr ( i , j ) ; Driver program to test above function","#include <bits/stdc++.h>
using namespace std;
#defineN5 int findMaxValue(int mat[][N]) {
  int maxValue = INT_MIN;
  int maxArr[N][N];
  maxArr[N - 1][N - 1] = mat[N - 1][N - 1];
  int maxv = mat[N - 1][N - 1];
  for (int j = N - 2; j >= 0; j--) {
    if (mat[N - 1][j] > maxv)
      maxv = mat[N - 1][j];
    maxArr[N - 1][j] = maxv;
  }
  maxv = mat[N - 1][N - 1];
  for (int i = N - 2; i >= 0; i--) {
    if (mat[i][N - 1] > maxv)
      maxv = mat[i][N - 1];
    maxArr[i][N - 1] = maxv;
  }
  for (int i = N - 2; i >= 0; i--) {
    for (int j = N - 2; j >= 0; j--) {
      if (maxArr[i + 1][j + 1] - mat[i][j] > maxValue)
        maxValue = maxArr[i + 1][j + 1] - mat[i][j];
      maxArr[i][j] = max(mat[i][j], max(maxArr[i][j + 1], maxArr[i + 1][j]));
    }
  }
  return maxValue;
}
int main() {
  int mat[N][N] = {{1, 2, -1, -4, -20},
                   {-8, -3, 4, 2, 1},
                   {3, 8, 6, 1, 3},
                   {-4, -1, 1, 7, -6},
                   {0, -4, 10, -5, 1}};
  cout << ""Maximum Value is "" << findMaxValue(mat);
  return 0;
}",Find a specific pair in Matrix.
328,"Print all elements in sorted order from row and column wise sorted matrix | A C ++ program to Print all elements in sorted order from row and column wise sorted matrix ; A utility function to youngify a Young Tableau . This is different from standard youngify . It assumes that the value at mat [ 0 ] [ 0 ] is infinite . ; Find the values at down and right sides of mat [ i ] [ j ] ; If mat [ i ] [ j ] is the down right corner element , return ; Move the smaller of two values ( downVal and rightVal ) to mat [ i ] [ j ] and recur for smaller value ; A utility function to extract minimum element from Young tableau ; This function uses extractMin ( ) to print elements in sorted order ; driver program to test above function","#include <climits>
#include <iostream>
using namespace std;
#defineINFINT_MAX
#defineN4
    void
    youngify(int mat[][N], int i, int j) {
  int downVal = (i + 1 < N) ? mat[i + 1][j] : INF;
  int rightVal = (j + 1 < N) ? mat[i][j + 1] : INF;
  if (downVal == INF && rightVal == INF)
    return;
  if (downVal < rightVal) {
    mat[i][j] = downVal;
    mat[i + 1][j] = INF;
    youngify(mat, i + 1, j);
  } else {
    mat[i][j] = rightVal;
    mat[i][j + 1] = INF;
    youngify(mat, i, j + 1);
  }
}
int extractMin(int mat[][N]) {
  int ret = mat[0][0];
  mat[0][0] = INF;
  youngify(mat, 0, 0);
  return ret;
}
void printSorted(int mat[][N]) {
  cout << ""Elements of matrix in sorted order n"";
  for (int i = 0; i < N * N; i++)
    cout << extractMin(mat) << "" "";
}
int main() {
  int mat[N][N] = {
      {10, 20, 30, 40},
      {15, 25, 35, 45},
      {27, 29, 37, 48},
      {32, 33, 39, 50},
  };
  printSorted(mat);
  return 0;
}",Print all elements in sorted order from row and column wise sorted matrix.
329,"Given an n x n square matrix , find sum of all sub | A simple C ++ program to find sum of all subsquares of size k x k ; Size of given matrix ; A simple function to find sum of all sub - squares of size k x k in a given square matrix of size n x n ; k must be smaller than or equal to n ; row number of first cell in current sub - square of size k x k ; column of first cell in current sub - square of size k x k ; Calculate and print sum of current sub - square ; Line separator for sub - squares starting with next row ; Driver program to test above function","#include <iostream>
using namespace std;
#definen5 void printSumSimple(int mat[][n], int k) {
  if (k > n)
    return;
  for (int i = 0; i < n - k + 1; i++) {
    for (int j = 0; j < n - k + 1; j++) {
      int sum = 0;
      for (int p = i; p < k + i; p++)
        for (int q = j; q < k + j; q++)
          sum += mat[p][q];
      cout << sum << "" "";
    }
    cout << endl;
  }
}
int main() {
  int mat[n][n] = {
      {1, 1, 1, 1, 1}, {2, 2, 2, 2, 2}, {3, 3, 3, 3, 3},
      {4, 4, 4, 4, 4}, {5, 5, 5, 5, 5},
  };
  int k = 3;
  printSumSimple(mat, k);
  return 0;
}","Given an n x n square matrix , find sum of all sub."
330,"Given an n x n square matrix , find sum of all sub | An efficient C ++ program to find sum of all subsquares of size k x k ; Size of given matrix ; A O ( n ^ 2 ) function to find sum of all sub - squares of size k x k in a given square matrix of size n x n ; k must be smaller than or equal to n ; 1 : PREPROCESSING To store sums of all strips of size k x 1 ; Go column by column ; Calculate sum of first k x 1 rectangle in this column ; Calculate sum of remaining rectangles ; 2 : CALCULATE SUM of Sub - Squares using stripSum [ ] [ ] ; Calculate and print sum of first subsquare in this row ; Calculate sum of remaining squares in current row by removing the leftmost strip of previous sub - square and adding a new strip ; Driver program to test above function","#include <iostream>
using namespace std;
#definen5 void printSumTricky(int mat[][n], int k) {
  if (k > n)
    return;
  int stripSum[n][n];
  for (int j = 0; j < n; j++) {
    int sum = 0;
    for (int i = 0; i < k; i++)
      sum += mat[i][j];
    stripSum[0][j] = sum;
    for (int i = 1; i < n - k + 1; i++) {
      sum += (mat[i + k - 1][j] - mat[i - 1][j]);
      stripSum[i][j] = sum;
    }
  }
  for (int i = 0; i < n - k + 1; i++) {
    int sum = 0;
    for (int j = 0; j < k; j++)
      sum += stripSum[i][j];
    cout << sum << "" "";
    for (int j = 1; j < n - k + 1; j++) {
      sum += (stripSum[i][j + k - 1] - stripSum[i][j - 1]);
      cout << sum << "" "";
    }
    cout << endl;
  }
}
int main() {
  int mat[n][n] = {
      {1, 1, 1, 1, 1}, {2, 2, 2, 2, 2}, {3, 3, 3, 3, 3},
      {4, 4, 4, 4, 4}, {5, 5, 5, 5, 5},
  };
  int k = 3;
  printSumTricky(mat, k);
  return 0;
}","Given an n x n square matrix , find sum of all sub."
331,Program to find transpose of a matrix |  ; This function stores transpose of A [ ] [ ] in B [ ] [ ] ; Driver code,"#include <stdio.h>
#defineM3
#defineN4
void transpose(int A[][N], int B[][M]) {
  int i, j;
  for (i = 0; i < N; i++)
    for (j = 0; j < M; j++)
      B[i][j] = A[j][i];
}
int main() {
  int A[M][N] = {{1, 1, 1, 1}, {2, 2, 2, 2}, {3, 3, 3, 3}};
  int B[N][M], i, j;
  transpose(A, B);
  printf(""Result matrix is \n"");
  for (i = 0; i < N; i++) {
    for (j = 0; j < M; j++)
      printf(""%d "", B[i][j]);
    printf(""\n"");
  }
  return 0;
}",Program to find transpose of a matrix.
332,Program to find transpose of a matrix |  ; Converts A [ ] [ ] to its transpose ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
#defineN4 void transpose(int A[][N]) {
  for (int i = 0; i < N; i++)
    for (int j = i + 1; j < N; j++)
      swap(A[i][j], A[j][i]);
}
int main() {
  int A[N][N] = {{1, 1, 1, 1}, {2, 2, 2, 2}, {3, 3, 3, 3}, {4, 4, 4, 4}};
  transpose(A);
  printf(""Modified matrix is \n"");
  for (int i = 0; i < N; i++) {
    for (int j = 0; j < N; j++)
      printf(""%d "", A[i][j]);
    printf(""\n"");
  }
  return 0;
}",Program to find transpose of a matrix.
333,"Number of paths with exactly k coins | A Naive Recursive C ++ program to count paths with exactly ' k ' coins ; Recursive function to count paths with sum k from ( 0 , 0 ) to ( m , n ) ; Base cases ; ( m , n ) can be reached either through ( m - 1 , n ) or through ( m , n - 1 ) ; A wrapper over pathCountRec ( ) ; Driver program","#include <bits/stdc++.h>
#defineR3
#defineC3
using namespace std;
int pathCountRec(int mat[][C], int m, int n, int k) {
  if (m < 0 n < 0)
    return 0;
  if (m == 0 && n == 0)
    return (k == mat[m][n]);
  return pathCountRec(mat, m - 1, n, k - mat[m][n]) +
         pathCountRec(mat, m, n - 1, k - mat[m][n]);
}
int pathCount(int mat[][C], int k) {
  return pathCountRec(mat, R - 1, C - 1, k);
}
int main() {
  int k = 12;
  int mat[R][C] = {{1, 2, 3}, {4, 6, 5}, {3, 2, 1}};
  cout << pathCount(mat, k);
  return 0;
}",Number of paths with exactly k coins.
334,"Number of paths with exactly k coins | A Dynamic Programming based C ++ program to count paths with exactly ' k ' coins ; Base cases ; If this subproblem is already solved ; ( m , n ) can be reached either through ( m - 1 , n ) or through ( m , n - 1 ) ; This function mainly initializes dp [ ] [ ] [ ] and calls pathCountDPRecDP ( ) ; Driver Program to test above functions","#include <bits/stdc++.h>
#defineR3
#defineC3
#defineMAX_K1000
using namespace std;
int dp[R][C][MAX_K];
int pathCountDPRecDP(int mat[][C], int m, int n, int k) {
  if (m < 0 n < 0)
    return 0;
  if (m == 0 && n == 0)
    return (k == mat[m][n]);
  if (dp[m][n][k] != -1)
    return dp[m][n][k];
  dp[m][n][k] = pathCountDPRecDP(mat, m - 1, n, k - mat[m][n]) +
                pathCountDPRecDP(mat, m, n - 1, k - mat[m][n]);
  return dp[m][n][k];
}
int pathCountDP(int mat[][C], int k) {
  memset(dp, -1, sizeof dp);
  return pathCountDPRecDP(mat, R - 1, C - 1, k);
}
int main() {
  int k = 12;
  int mat[R][C] = {{1, 2, 3}, {4, 6, 5}, {3, 2, 1}};
  cout << pathCountDP(mat, k);
  return 0;
}",Number of paths with exactly k coins.
335,Sort the given matrix | C ++ implementation to sort the given matrix ; function to sort the given matrix ; temporary matrix of size n ^ 2 ; copy the elements of matrix one by one into temp [ ] ; sort temp [ ] ; copy the elements of temp [ ] one by one in mat [ ] [ ] ; function to print the given matrix ; Driver program to test above,"#include <bits/stdc++.h>
using namespace std;
#defineSIZE10 void sortMat(int mat[SIZE][SIZE], int n) {
  int temp[n * n];
  int k = 0;
  for (int i = 0; i < n; i++)
    for (int j = 0; j < n; j++)
      temp[k++] = mat[i][j];
  sort(temp, temp + k);
  k = 0;
  for (int i = 0; i < n; i++)
    for (int j = 0; j < n; j++)
      mat[i][j] = temp[k++];
}
void printMat(int mat[SIZE][SIZE], int n) {
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < n; j++)
      cout << mat[i][j] << "" "";
    cout << endl;
  }
}
int main() {
  int mat[SIZE][SIZE] = {{5, 4, 7}, {1, 3, 8}, {2, 9, 6}};
  int n = 3;
  cout << ""Original Matrix:\n"";
  printMat(mat, n);
  sortMat(mat, n);
  cout << ""MatrixAfterSorting:"";
  printMat(mat, n);
  return 0;
}",Sort the given matrix.
336,Selection Sort | C ++ program for implementation of selection sort ; swap function ; sort function ; One by one move boundary of unsorted subarray ; Find the minimum element in unsorted array ; Swap the found minimum element with the first element ; Function to print an array ; Driver program to test above functions,"#include <bits/stdc++.h>
using namespace std;
void swap(int *xp, int *yp) {
  int temp = *xp;
  *xp = *yp;
  *yp = temp;
}
void selectionSort(int arr[], int n) {
  int i, j, min_idx;
  for (i = 0; i < n - 1; i++) {
    min_idx = i;
    for (j = i + 1; j < n; j++)
      if (arr[j] < arr[min_idx])
        min_idx = j;
    swap(&arr[min_idx], &arr[i]);
  }
}
void printArray(int arr[], int size) {
  int i;
  for (i = 0; i < size; i++)
    cout << arr[i] << "" "";
  cout << endl;
}
int main() {
  int arr[] = {64, 25, 12, 22, 11};
  int n = sizeof(arr) / sizeof(arr[0]);
  selectionSort(arr, n);
  cout << ""Sorted array: \n"";
  printArray(arr, n);
  return 0;
}",Selection Sort.
337,"Bubble Sort | Optimized implementation of Bubble sort ; An optimized version of Bubble Sort ; swap arr [ j ] and arr [ j + 1 ] ; IF no two elements were swapped by inner loop , then break ; Function to print an array ; Driver program to test above functions","#include <stdio.h>
void swap(int *xp, int *yp) {
  int temp = *xp;
  *xp = *yp;
  *yp = temp;
}
void bubbleSort(int arr[], int n) {
  int i, j;
  bool swapped;
  for (i = 0; i < n - 1; i++) {
    swapped = false;
    for (j = 0; j < n - i - 1; j++) {
      if (arr[j] > arr[j + 1]) {
        swap(&arr[j], &arr[j + 1]);
        swapped = true;
      }
    }
    if (swapped == false)
      break;
  }
}
void printArray(int arr[], int size) {
  int i;
  for (i = 0; i < size; i++)
    printf(""%d "", arr[i]);
  printf(""n"");
}
int main() {
  int arr[] = {64, 34, 25, 12, 22, 11, 90};
  int n = sizeof(arr) / sizeof(arr[0]);
  bubbleSort(arr, n);
  printf(""Sorted array: \n"");
  printArray(arr, n);
  return 0;
}",Bubble Sort.
338,"Find k closest elements to a given value |  ; Function to find the cross over point ( the point beforewhich elements are smaller than or equal to x and afterwhich greater than x ) ; Base cases x is greater than all ; x is smaller than all ; Find the middle point ; If x is same as middle element , then return mid ; If x is greater than arr [ mid ] , then either arr [ mid + 1 ] is ceiling of x or ceiling lies in arr [ mid + 1. . . high ] ; This function prints k closest elements to x in arr [ ] . n is the number of elements in arr [ ] ; Find the crossover point ; Right index to search ; To keep track of count of elements already printed ; If x is present in arr [ ] , then reduce left index Assumption : all elements in arr [ ] are distinct ; Compare elements on left and right of crossover point to find the k closest elements ; If there are no more elements on right side , then print left elements ; If there are no more elements on left side , then print right elements ; Driver program to check above functions","#include <stdio.h>
int findCrossOver(int arr[], int low, int high, int x) {
  if (arr[high] <= x)
    return high;
  if (arr[low] > x)
    return low;
  int mid = (low + high) / 2;
  if (arr[mid] <= x && arr[mid + 1] > x)
    return mid;
  if (arr[mid] < x)
    return findCrossOver(arr, mid + 1, high, x);
  return findCrossOver(arr, low, mid - 1, x);
}
void printKclosest(int arr[], int x, int k, int n) {
  int l = findCrossOver(arr, 0, n - 1, x);
  int r = l + 1;
  int count = 0;
  if (arr[l] == x)
    l--;
  while (l >= 0 && r < n && count < k) {
    if (x - arr[l] < arr[r] - x)
      printf(""%d "", arr[l--]);
    else
      printf(""%d "", arr[r++]);
    count++;
  }
  while (count < k && l >= 0)
    printf(""%d "", arr[l--]), count++;
  while (count < k && r < n)
    printf(""%d "", arr[r++]), count++;
}
int main() {
  int arr[] = {12, 16, 22, 30, 35, 39, 42, 45, 48, 50, 53, 55, 56};
  int n = sizeof(arr) / sizeof(arr[0]);
  int x = 35, k = 4;
  printKclosest(arr, x, 4, n);
  return 0;
}",Find k closest elements to a given value.
339,"Coin Change | DP | Recursive C program for coin change problem . ; Returns the count of ways we can sum S [ 0. . . m - 1 ] coins to get sum n ; If n is 0 then there is 1 solution ( do not include any coin ) ; If n is less than 0 then no solution exists ; If there are no coins and n is greater than 0 , then no solution exist ; count is sum of solutions ( i ) including S [ m - 1 ] ( ii ) excluding S [ m - 1 ] ; Driver program to test above function","#include <stdio.h>
int count(int S[], int m, int n) {
  if (n == 0)
    return 1;
  if (n < 0)
    return 0;
  if (m <= 0 && n >= 1)
    return 0;
  return count(S, m - 1, n) + count(S, m, n - S[m - 1]);
}
int main() {
  int i, j;
  int arr[] = {1, 2, 3};
  int m = sizeof(arr) / sizeof(arr[0]);
  printf(""%d "", count(arr, m, 4));
  getchar();
  return 0;
}",Coin Change.
340,Coin Change | DP | Dynamic Programming C ++ implementation of Coin Change problem ; table [ i ] will be storing the number of solutions for value i . We need n + 1 rows as the table is constructed in bottom up manner using the base case ( n = 0 ) ; Base case ( If given value is 0 ) ; Pick all coins one by one and update the table [ ] values after the index greater than or equal to the value of the picked coin,"#include <bits/stdc++.h>
int count(int S[], int m, int n) {
  int table[n + 1];
  memset(table, 0, sizeof(table));
  table[0] = 1;
  for (int i = 0; i < m; i++)
    for (int j = S[i]; j <= n; j++)
      table[j] += table[j - S[i]];
  return table[n];
}",Coin Change.
341,Matrix Chain Multiplication | DP | C ++ program using memoization ; Function for matrix chain multiplication ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
int dp[100][100];
int matrixChainMemoised(int *p, int i, int j) {
  if (i == j) {
    return 0;
  }
  if (dp[i][j] != -1) {
    return dp[i][j];
  }
  dp[i][j] = INT_MAX;
  for (int k = i; k < j; k++) {
    dp[i][j] = min(dp[i][j], matrixChainMemoised(p, i, k) +
                                 matrixChainMemoised(p, k + 1, j) +
                                 p[i - 1] * p[k] * p[j]);
  }
  return dp[i][j];
}
int MatrixChainOrder(int *p, int n) {
  int i = 1, j = n - 1;
  return matrixChainMemoised(p, i, j);
}
int main() {
  int arr[] = {1, 2, 3, 4};
  int n = sizeof(arr) / sizeof(arr[0]);
  memset(dp, -1, sizeof dp);
  cout << ""Minimum number of multiplications is "" << MatrixChainOrder(arr, n);
}",Matrix Chain Multiplication.
342,"Matrix Chain Multiplication | DP | See the Cormen book for details of the following algorithm ; Matrix Ai has dimension p [ i - 1 ] x p [ i ] for i = 1. . n ; For simplicity of the program , one extra row and one extra column are allocated in m [ ] [ ] . 0 th row and 0 th column of m [ ] [ ] are not used ; cost is zero when multiplying one matrix . ; L is chain length . ; q = cost / scalar multiplications ; Driver Code","#include <bits/stdc++.h>
using namespace std;
int MatrixChainOrder(int p[], int n) {
  int m[n][n];
  int i, j, k, L, q;
  for (i = 1; i < n; i++)
    m[i][i] = 0;
  for (L = 2; L < n; L++) {
    for (i = 1; i < n - L + 1; i++) {
      j = i + L - 1;
      m[i][j] = INT_MAX;
      for (k = i; k <= j - 1; k++) {
        q = m[i][k] + m[k + 1][j] + p[i - 1] * p[k] * p[j];
        if (q < m[i][j])
          m[i][j] = q;
      }
    }
  }
  return m[1][n - 1];
}
int main() {
  int arr[] = {1, 2, 3, 4};
  int size = sizeof(arr) / sizeof(arr[0]);
  cout << ""Minimum number of multiplications is ""
       << MatrixChainOrder(arr, size);
  getchar();
  return 0;
}",Matrix Chain Multiplication.
343,Cutting a Rod | DP | A Naive recursive solution for Rod cutting problem ; A utility function to get the maximum of two integers ; Returns the best obtainable price for a rod of length n and price [ ] as prices of different pieces ; Recursively cut the rod in different pieces and compare different configurations ; Driver program to test above functions,"#include <limits.h>
#include <stdio.h>
int max(int a, int b) { return (a > b) ? a : b; }
int cutRod(int price[], int n) {
  if (n <= 0)
    return 0;
  int max_val = INT_MIN;
  for (int i = 0; i < n; i++)
    max_val = max(max_val, price[i] + cutRod(price, n - i - 1));
  return max_val;
}
int main() {
  int arr[] = {1, 5, 8, 9, 10, 17, 17, 20};
  int size = sizeof(arr) / sizeof(arr[0]);
  printf(""Maximum Obtainable Value is %dn"", cutRod(arr, size));
  getchar();
  return 0;
}",Cutting a Rod.
344,Cutting a Rod | DP | A Dynamic Programming solution for Rod cutting problem ; A utility function to get the maximum of two integers ; Returns the best obtainable price for a rod of length n and price [ ] as prices of different pieces ; Build the table val [ ] in bottom up manner and return the last entry from the table ; Driver program to test above functions,"#include <limits.h>
#include <stdio.h>
int max(int a, int b) { return (a > b) ? a : b; }
int cutRod(int price[], int n) {
  int val[n + 1];
  val[0] = 0;
  int i, j;
  for (i = 1; i <= n; i++) {
    int max_val = INT_MIN;
    for (j = 0; j < i; j++)
      max_val = max(max_val, price[j] + val[i - j - 1]);
    val[i] = max_val;
  }
  return val[n];
}
int main() {
  int arr[] = {1, 5, 8, 9, 10, 17, 17, 20};
  int size = sizeof(arr) / sizeof(arr[0]);
  printf(""Maximum Obtainable Value is %dn"", cutRod(arr, size));
  getchar();
  return 0;
}",Cutting a Rod.
345,"Cutting a Rod | DP | CPP program for above approach ; Global Array for the purpose of memoization . ; A recursive program , using , memoization , to implement the rod cutting problem ( Top - Down ) . ; The maximum price will be zero , when either the length of the rod is zero or price is zero . ; If the length of the rod is less than the maximum length , Max_lene will consider it . Now depending upon the profit , either Max_lene we will take it or discard it . ; If the length of the rod is greater than the permitted size , Max_len we will not consider it . ; Max_lene Max_lenill return the maximum value obtained , Max_lenhich is present at the nth roMax_len and Max_lenth column . ; Driver program to test above functions ; Function Call","#include <iostream>
using namespace std;
int t[9][9];
int un_kp(int price[], int length[], int Max_len, int n) {
  if (n == 0 Max_len == 0) {
    return 0;
  }
  if (length[n - 1] <= Max_len) {
    t[n][Max_len] =
        max(price[n - 1] + un_kp(price, length, Max_len - length[n - 1], n),
            un_kp(price, length, Max_len, n - 1));
  } else {
    t[n][Max_len] = un_kp(price, length, Max_len, n - 1);
  }
  return t[n][Max_len];
}
int main() {
  int price[] = {1, 5, 8, 9, 10, 17, 17, 20};
  int n = sizeof(price) / sizeof(price[0]);
  int length[n];
  for (int i = 0; i < n; i++) {
    length[i] = i + 1;
  }
  int Max_len = n;
  cout << ""Maximum obtained value is "" << un_kp(price, length, n, Max_len)
       << endl;
}",Cutting a Rod.
346,"Multiply two integers without using multiplication , division and bitwise operators , and no loops | C ++ program to Multiply two integers without using multiplication , division and bitwise operators , and no loops ; function to multiply two numbers x and y ; 0 multiplied with anything gives 0 ; Add x one by one ; the case where y is negative ; Driver code","#include <iostream>
using namespace std;
class GFG {
public:
  int multiply(int x, int y) {
    if (y == 0)
      return 0;
    if (y > 0)
      return (x + multiply(x, y - 1));
    if (y < 0)
      return -multiply(x, -y);
  }
};
int main() {
  GFG g;
  cout << endl << g.multiply(5, -11);
  getchar();
  return 0;
}","Multiply two integers without using multiplication , division and bitwise operators , and no loops."
347,"Sieve of Eratosthenes | C ++ program to print all primes smaller than or equal to n using Sieve of Eratosthenes ; Create a boolean array "" prime [ 0 . . n ] "" and initialize all entries it as true . A value in prime [ i ] will finally be false if i is Not a prime , else true . ; If prime [ p ] is not changed , then it is a prime ; Update all multiples of p greater than or equal to the square of it numbers which are multiple of p and are less than p ^ 2 are already been marked . ; Print all prime numbers ; Driver Code","#include <bits/stdc++.h>
using namespace std;
void SieveOfEratosthenes(int n) {
  bool prime[n + 1];
  memset(prime, true, sizeof(prime));
  for (int p = 2; p * p <= n; p++) {
    if (prime[p] == true) {
      for (int i = p * p; i <= n; i += p)
        prime[i] = false;
    }
  }
  for (int p = 2; p <= n; p++)
    if (prime[p])
      cout << p << "" "";
}
int main() {
  int n = 30;
  cout << ""Following are the prime numbers smaller ""
       << "" than or equal to "" << n << endl;
  SieveOfEratosthenes(n);
  return 0;
}",Sieve of Eratosthenes.
348,Pascal 's Triangle | C ++ code for Pascal 's Triangle ; binomialCoeff ; Function to print first n lines of Pascal 's Triangle ; Iterate through every line and print entries in it ; Every line has number of integers equal to line number ; Driver program,"#include <stdio.h>
int binomialCoeff(int n, int k);
int binomialCoeff(int n, int k) {
  int res = 1;
  if (k > n - k)
    k = n - k;
  for (int i = 0; i < k; ++i) {
    res *= (n - i);
    res /= (i + 1);
  }
  return res;
}
void printPascal(int n) {
  for (int line = 0; line < n; line++) {
    for (int i = 0; i <= line; i++)
      printf(""%d "", binomialCoeff(line, i));
    printf(""\n"");
  }
}
int main() {
  int n = 7;
  printPascal(n);
  return 0;
}",Pascal 's Triangle.
349,Pascal 's Triangle | C ++ program for Pascals Triangle ; A O ( n ^ 2 ) time and O ( n ^ 2 ) extra space method for Pascal 's Triangle ; An auxiliary array to store generated pscal triangle values ; Iterate through every line and print integer ( s ) in it ; Every line has number of integers equal to line number ; First and last values in every row are 1 ; Other values are sum of values just above and left of above ; Driver code,"#include <bits/stdc++.h>
using namespace std;
void printPascal(int n) {
  int arr[n][n];
  for (int line = 0; line < n; line++) {
    for (int i = 0; i <= line; i++) {
      if (line == i i == 0)
        arr[line][i] = 1;
      else
        arr[line][i] = arr[line - 1][i - 1] + arr[line - 1][i];
      cout << arr[line][i] << "" "";
    }
    cout << ""\n"";
  }
}
int main() {
  int n = 5;
  printPascal(n);
  return 0;
}",Pascal 's Triangle.
350,"Pascal 's Triangle | C ++ program for Pascals Triangle A O ( n ^ 2 ) time and O ( 1 ) extra space function for Pascal 's Triangle ; used to represent C ( line , i ) ; The first value in a line is always 1 ; Driver code","#include <bits/stdc++.h>
using namespace std;
void printPascal(int n) {
  for (int line = 1; line <= n; line++) {
    int C = 1;
    for (int i = 1; i <= line; i++) {
      cout << C << "" "";
      C = C * (line - i) / i;
    }
    cout << ""\n"";
  }
}
int main() {
  int n = 5;
  printPascal(n);
  return 0;
}",Pascal 's Triangle.
351,Add two numbers without using arithmetic operators | C ++ Program to add two numbers without using arithmetic operator ; Iterate till there is no carry ; carry now contains common set bits of x and y ; Sum of bits of x and y where at least one of the bits is not set ; Carry is shifted by one so that adding it to x gives the required sum ; Driver code,"#include <bits/stdc++.h>
using namespace std;
int Add(int x, int y) {
  while (y != 0) {
    int carry = x & y;
    x = x ^ y;
    y = carry << 1;
  }
  return x;
}
int main() {
  cout << Add(15, 32);
  return 0;
}",Add two numbers without using arithmetic operators.
352,"Compute modulus division by a power |  ; This function will return n % d . d must be one of : 1 , 2 , 4 , 8 , 16 , 32 , ... ; Driver Code ; d must be a power of 2","#include <stdio.h>
unsigned int getModulo(unsigned int n, unsigned int d) { return (n & (d - 1)); }
int main() {
  unsigned int n = 6;
  unsigned int d = 4;
  printf(""%u moduo %u is %u"", n, d, getModulo(n, d));
  getchar();
  return 0;
}",Compute modulus division by a power.
353,Count set bits in an integer | C ++ program to Count set bits in an integer ; Function to get no of set bits in binary representation of positive integer n ; Program to test function countSetBits,"#include <bits/stdc++.h>
using namespace std;
unsigned int countSetBits(unsigned int n) {
  unsigned int count = 0;
  while (n) {
    count += n & 1;
    n >>= 1;
  }
  return count;
}
int main() {
  int i = 9;
  cout << countSetBits(i);
  return 0;
}",Count set bits in an integer.
354,Count set bits in an integer | CPP implementation for recursive approach to find the number of set bits using Brian Kernighans Algorithm ; recursive function to count set bits ; base case ; driver code ; get value from user ; function calling,"#include <bits/stdc++.h>
using namespace std;
int countSetBits(int n) {
  if (n == 0)
    return 0;
  else
    return 1 + countSetBits(n & (n - 1));
}
int main() {
  int n = 9;
  cout << countSetBits(n);
  return 0;
}",Count set bits in an integer.
355,Count set bits in an integer | C ++ implementation of the approach ; Lookup table ; Function to initialise the lookup table ; To initially generate the table algorithmically ; Function to return the count of set bits in n ; Driver code ; Initialise the lookup table,"#include <bits/stdc++.h>
using namespace std;
int BitsSetTable256[256];
void initialize() {
  BitsSetTable256[0] = 0;
  for (int i = 0; i < 256; i++) {
    BitsSetTable256[i] = (i & 1) + BitsSetTable256[i / 2];
  }
}
int countSetBits(int n) {
  return (BitsSetTable256[n & 0xff] + BitsSetTable256[(n >> 8) & 0xff] +
          BitsSetTable256[(n >> 16) & 0xff] + BitsSetTable256[n >> 24]);
}
int main() {
  initialize();
  int n = 9;
  cout << countSetBits(n);
}",Count set bits in an integer.
356,Count set bits in an integer | C ++ program to demonstrate __builtin_popcount ( ) ; Driver code,"#include <iostream>
using namespace std;
int main() {
  cout << __builtin_popcount(4) << endl;
  cout << __builtin_popcount(15);
  return 0;
}",Count set bits in an integer.
357,Count set bits in an integer | C ++ program to count set bits by pre - storing count set bits in nibbles . ; Recursively get nibble of a given number and map them in the array ; Find last nibble ; Use pre - stored values to find count in last nibble plus recursively add remaining nibbles . ; Driver code,"#include <bits/stdc++.h>
using namespace std;
int num_to_bits[16] = {0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4};
unsigned int countSetBitsRec(unsigned int num) {
  int nibble = 0;
  if (0 == num)
    return num_to_bits[0];
  nibble = num & 0xf;
  return num_to_bits[nibble] + countSetBitsRec(num >> 4);
}
int main() {
  int num = 31;
  cout << countSetBitsRec(num);
  return 0;
}",Count set bits in an integer.
358,"Count set bits in an integer |  ; Check each bit in a number is set or not and return the total count of the set bits . ; ( 1 << i ) = pow ( 2 , i ) ; Driver code","#include <iostream>
using namespace std;
int countSetBits(int N) {
  int count = 0;
  for (int i = 0; i < sizeof(int) * 8; i++) {
    if (N & (1 << i))
      count++;
  }
  return count;
}
int main() {
  int N = 15;
  cout << countSetBits(N) << endl;
  return 0;
}",Count set bits in an integer.
359,"Program to find parity | C ++ program to find parity of an integer ; Function to get parity of number n . It returns 1 if n has odd parity , and returns 0 if n has even parity ; Driver program to test getParity ( )","#include <bits/stdc++.h>
#defineboolint
using namespace std;
bool getParity(unsigned int n) {
  bool parity = 0;
  while (n) {
    parity = !parity;
    n = n & (n - 1);
  }
  return parity;
}
int main() {
  unsigned int n = 7;
  cout << ""Parity of no "" << n << "" = "" << (getParity(n) ? ""odd"" : ""even"");
  getchar();
  return 0;
}",Program to find parity.
360,Program to find whether a no is power of two | C ++ Program to find whether a no is power of two ; Function to check if x is power of 2 ; Driver program,"#include <bits/stdc++.h>
using namespace std;
bool isPowerOfTwo(int n) {
  if (n == 0)
    return false;
  return (ceil(log2(n)) == floor(log2(n)));
}
int main() {
  isPowerOfTwo(31) ? cout << ""Yes"" << endl : cout << ""No"" << endl;
  isPowerOfTwo(64) ? cout << ""Yes"" << endl : cout << ""No"" << endl;
  return 0;
}",Program to find whether a no is power of two.
361,Program to find whether a no is power of two |  ; Function to check if x is power of 2 ; Driver code,"#include <bits/stdc++.h>
using namespace std;
bool isPowerOfTwo(int n) {
  if (n == 0)
    return 0;
  while (n != 1) {
    if (n % 2 != 0)
      return 0;
    n = n / 2;
  }
  return 1;
}
int main() {
  isPowerOfTwo(31) ? cout << ""Yes\n"" : cout << ""No\n"";
  isPowerOfTwo(64) ? cout << ""Yes\n"" : cout << ""No\n"";
  return 0;
}",Program to find whether a no is power of two.
362,Program to find whether a no is power of two | C ++ program for above approach ; Function which checks whether a number is a power of 2 ; base cases '1' is the only odd number which is a power of 2 ( 2 ^ 0 ) ; all other odd numbers are not powers of 2 ; recursive function call ; Driver Code ; True ; False,"#include <bits/stdc++.h>
using namespace std;
bool powerOf2(int n) {
  if (n == 1)
    return true;
  else if (n % 2 != 0 n == 0)
    return false;
  return powerOf2(n / 2);
}
int main() {
  int n = 64;
  int m = 12;
  if (powerOf2(n) == 1)
    cout << ""True"" << endl;
  else
    cout << ""False"" << endl;
  if (powerOf2(m) == 1)
    cout << ""True"" << endl;
  else
    cout << ""False"" << endl;
}",Program to find whether a no is power of two.
363,Program to find whether a no is power of two |  ; Function to check if x is power of 2 ; First x in the below expression is for the case when x is 0 ; Driver code,"#include <bits/stdc++.h>
using namespace std;
#defineboolint bool isPowerOfTwo(int x) { return x && (!(x & (x - 1))); }
int main() {
  isPowerOfTwo(31) ? cout << ""Yes\n"" : cout << ""No\n"";
  isPowerOfTwo(64) ? cout << ""Yes\n"" : cout << ""No\n"";
  return 0;
}",Program to find whether a no is power of two.
364,"Find the maximum repeating number in O ( n ) time and O ( 1 ) extra space | C ++ program to find the maximum repeating number ; Returns maximum repeating element in arr [ 0. . n - 1 ] . The array elements are in range from 0 to k - 1 ; Iterate though input array , for every element arr [ i ] , increment arr [ arr [ i ] % k ] by k ; Find index of the maximum repeating element ; Return index of the maximum element ; Driver program to test above function","#include <iostream>
using namespace std;
int maxRepeating(int *arr, int n, int k) {
  for (int i = 0; i < n; i++)
    arr[arr[i] % k] += k;
  int max = arr[0], result = 0;
  for (int i = 1; i < n; i++) {
    if (arr[i] > max) {
      max = arr[i];
      result = i;
    }
  }
  return result;
}
int main() {
  int arr[] = {2, 3, 3, 5, 3, 4, 1, 7};
  int n = sizeof(arr) / sizeof(arr[0]);
  int k = 8;
  cout << ""The maximum repeating number is "" << maxRepeating(arr, n, k) << endl;
  return 0;
}",Find the maximum repeating number in O ( n ) time and O ( 1 ) extra space.
365,Range Query on array whose each element is XOR of index value and previous element | CPP Program to solve range query on array whose each element is XOR of index value and previous element . ; function return derived formula value . ; finding xor value of range [ y ... x ] ; function to solve query for l and r . ; if l or r is 0. ; finding x is divisible by 2 or not . ; Driven Program,"#include <bits/stdc++.h>
using namespace std;
int fun(int x) {
  int y = (x / 4) * 4;
  int ans = 0;
  for (int i = y; i <= x; i++)
    ans ^= i;
  return ans;
}
int query(int x) {
  if (x == 0)
    return 0;
  int k = (x + 1) / 2;
  return (x %= 2) ? 2 * fun(k) : ((fun(k - 1) * 2) ^ (k & 1));
}
void allQueries(int q, int l[], int r[]) {
  for (int i = 0; i < q; i++)
    cout << (query(r[i]) ^ query(l[i] - 1)) << endl;
}
int main() {
  int q = 3;
  int l[] = {2, 2, 5};
  int r[] = {4, 8, 9};
  allQueries(q, l, r);
  return 0;
}",Range Query on array whose each element is XOR of index value and previous element.
366,Queries on XOR of greatest odd divisor of the range |  ; Precompute the prefix XOR of greatest odd divisor ; Finding the Greatest Odd divisor ; Finding prefix XOR ; Return XOR of the range ; Driven Program,"#include <bits/stdc++.h>
using namespace std;
void prefixXOR(int arr[], int preXOR[], int n) {
  for (int i = 0; i < n; i++) {
    while (arr[i] % 2 != 1)
      arr[i] /= 2;
    preXOR[i] = arr[i];
  }
  for (int i = 1; i < n; i++)
    preXOR[i] = preXOR[i - 1] ^ preXOR[i];
}
int query(int preXOR[], int l, int r) {
  if (l == 0)
    return preXOR[r];
  else
    return preXOR[r] ^ preXOR[l - 1];
}
int main() {
  int arr[] = {3, 4, 5};
  int n = sizeof(arr) / sizeof(arr[0]);
  int preXOR[n];
  prefixXOR(arr, preXOR, n);
  cout << query(preXOR, 0, 2) << endl;
  cout << query(preXOR, 1, 2) << endl;
  return 0;
}",Queries on XOR of greatest odd divisor of the range.
367,Minimum adjacent swaps required to Sort Binary array | C ++ code to find minimum number of swaps to sort a binary array ; Function to find minimum swaps to sort an array of 0 s and 1 s . ; Array to store count of zeroes ; Count number of zeroes on right side of every one . ; Count total number of swaps by adding number of zeroes on right side of every one . ; Driver code,"#include <bits/stdc++.h>
using namespace std;
int findMinSwaps(int arr[], int n) {
  int noOfZeroes[n];
  memset(noOfZeroes, 0, sizeof(noOfZeroes));
  int i, count = 0;
  noOfZeroes[n - 1] = 1 - arr[n - 1];
  for (i = n - 2; i >= 0; i--) {
    noOfZeroes[i] = noOfZeroes[i + 1];
    if (arr[i] == 0)
      noOfZeroes[i]++;
  }
  for (i = 0; i < n; i++) {
    if (arr[i] == 1)
      count += noOfZeroes[i];
  }
  return count;
}
int main() {
  int arr[] = {0, 0, 1, 0, 1, 0, 1, 1};
  int n = sizeof(arr) / sizeof(arr[0]);
  cout << findMinSwaps(arr, n);
  return 0;
}",Minimum adjacent swaps required to Sort Binary array.
368,Minimum adjacent swaps required to Sort Binary array |  ; Driver Code,"#include <iostream>
using namespace std;
int minswaps(int arr[], int n) {
  int count = 0;
  int num_unplaced_zeros = 0;
  for (int index = n - 1; index >= 0; index--) {
    if (arr[index] == 0)
      num_unplaced_zeros += 1;
    else
      count += num_unplaced_zeros;
  }
  return count;
}
int main() {
  int arr[] = {0, 0, 1, 0, 1, 0, 1, 1};
  cout << minswaps(arr, 9);
  return 0;
}",Minimum adjacent swaps required to Sort Binary array.
369,Program to check if an array is sorted or not ( Iterative and Recursive ) | C ++ program to check if an Array is sorted or not ; Function that returns true if array is sorted in non - decreasing order . ; Array has one or no element ; Unsorted pair found ; No unsorted pair found ; Driver code,"#include <bits/stdc++.h>
using namespace std;
bool arraySortedOrNot(int arr[], int n) {
  if (n == 0 n == 1)
    return true;
  for (int i = 1; i < n; i++)
    if (arr[i - 1] > arr[i])
      return false;
  return true;
}
int main() {
  int arr[] = {20, 23, 23, 45, 78, 88};
  int n = sizeof(arr) / sizeof(arr[0]);
  if (arraySortedOrNot(arr, n))
    cout << ""Yes\n"";
  else
    cout << ""No\n"";
}",Program to check if an array is sorted or not ( Iterative and Recursive ).
370,Find the two numbers with odd occurrences in an unsorted array | C ++ Program to find the two odd occurring elements ; Prints two numbers that occur odd number of times . The function assumes that the array size is at least 2 and there are exactly two numbers occurring odd number of times . ; Will hold XOR of two odd occurring elements ; Will have only single set bit of xor2 ; Get the xor of all elements in arr [ ] . The xor will basically be xor of two odd occurring elements ; Get one set bit in the xor2 . We get rightmost set bit in the following line as it is easy to get ; Now divide elements in two sets : 1 ) The elements having the corresponding bit as 1. 2 ) The elements having the corresponding bit as 0. ; XOR of first set is finally going to hold one odd occurring number x ; XOR of second set is finally going to hold the other odd occurring number y ; Driver code,"#include <bits/stdc++.h>
using namespace std;
void printTwoOdd(int arr[], int size) {
  int xor2 = arr[0];
  int set_bit_no;
  int i;
  int n = size - 2;
  int x = 0, y = 0;
  for (i = 1; i < size; i++)
    xor2 = xor2 ^ arr[i];
  set_bit_no = xor2 & ~(xor2 - 1);
  for (i = 0; i < size; i++) {
    if (arr[i] & set_bit_no)
      x = x ^ arr[i];
    else
      y = y ^ arr[i];
  }
  cout << ""The two ODD elements are "" << x << "" & "" << y;
}
int main() {
  int arr[] = {4, 2, 4, 5, 2, 3, 3, 1};
  int arr_size = sizeof(arr) / sizeof(arr[0]);
  printTwoOdd(arr, arr_size);
  return 0;
}",Find the two numbers with odd occurrences in an unsorted array.
371,Find the two numbers with odd occurrences in an unsorted array | C ++ Program to find the two odd occurring elements ; Prints two numbers that occur odd number of times . The function assumes that the array size is at least 2 and there are exactly two numbers occurring odd number of times . ; Create map and calculate frequency of array of * elements using array . ; Traverse through the map and check if its second element that is the frequency is odd or not . Then this is the odd occurring element . Its is clearly mentioned in problem that there are only two odd occurring elements so this will print those two elements . ; Driver code,"#include <bits/stdc++.h>
using namespace std;
void printTwoOdd(int arr[], int size) {
  map<int, int> m;
  for (int i = 0; i < size; i++) {
    m[arr[i]]++;
  }
  cout << ""The two ODD elements are "";
  for (auto &x : m) {
    if (x.second % 2 != 0)
      cout << x.first << "", "";
  }
}
int main() {
  int arr[] = {4, 2, 4, 5, 2, 3, 3, 1};
  int arr_size = sizeof(arr) / sizeof(arr[0]);
  printTwoOdd(arr, arr_size);
  return 0;
}",Find the two numbers with odd occurrences in an unsorted array.
372,Find a pair with the given difference | C ++ program to find a pair with the given difference ; The function assumes that the array is sorted ; Initialize positions of two elements ; Search for a pair ; Driver program to test above function,"#include <bits/stdc++.h>
using namespace std;
bool findPair(int arr[], int size, int n) {
  int i = 0;
  int j = 1;
  while (i < size && j < size) {
    if (i != j && arr[j] - arr[i] == n) {
      cout << ""Pair Found: ("" << arr[i] << "", "" << arr[j] << "")"";
      return true;
    } else if (arr[j] - arr[i] < n)
      j++;
    else
      i++;
  }
  cout << ""No such pair"";
  return false;
}
int main() {
  int arr[] = {1, 8, 30, 40, 100};
  int size = sizeof(arr) / sizeof(arr[0]);
  int n = 60;
  findPair(arr, size, n);
  return 0;
}",Find a pair with the given difference.
373,Find k maximum elements of array in original order | C ++ program to find k maximum elements of array in original order ; Function to print m Maximum elements ; vector to store the copy of the original array ; Sorting the vector in descending order . Please refer below link for details www . geeksforgeeks . org / sort - c - stl / https : ; Traversing through original array and printing all those elements that are in first k of sorted vector . goo . gl / 44 Rwgt Please refer https : for details of binary_search ( ) ; Driver code,"#include <bits/stdc++.h>
using namespace std;
void printMax(int arr[], int k, int n) {
  vector<int> brr(arr, arr + n);
  sort(brr.begin(), brr.end(), greater<int>());
  for (int i = 0; i < n; ++i)
    if (binary_search(brr.begin(), brr.begin() + k, arr[i], greater<int>()))
      cout << arr[i] << "" "";
}
int main() {
  int arr[] = {50, 8, 45, 12, 25, 40, 84};
  int n = sizeof(arr) / sizeof(arr[0]);
  int k = 3;
  printMax(arr, k, n);
  return 0;
}",Find k maximum elements of array in original order.
374,Print n smallest elements from given array in their original order | CPP for printing smallest n number in order ; Function to print smallest n numbers ; Make copy of array ; Sort copy array ; For each arr [ i ] find whether it is a part of n - smallest with binary search ; Driver program,"#include <bits/stdc++.h>
using namespace std;
void printSmall(int arr[], int asize, int n) {
  vector<int> copy_arr(arr, arr + asize);
  sort(copy_arr.begin(), copy_arr.begin() + asize);
  for (int i = 0; i < asize; ++i)
    if (binary_search(copy_arr.begin(), copy_arr.begin() + n, arr[i]))
      cout << arr[i] << "" "";
}
int main() {
  int arr[] = {1, 5, 8, 9, 6, 7, 3, 4, 2, 0};
  int asize = sizeof(arr) / sizeof(arr[0]);
  int n = 5;
  printSmall(arr, asize, n);
  return 0;
}",Print n smallest elements from given array in their original order.
375,"Check whether Arithmetic Progression can be formed from the given array | C ++ program to check if a given array can form arithmetic progression ; Returns true if a permutation of arr [ 0. . n - 1 ] can form arithmetic progression ; Sort array ; After sorting , difference between consecutive elements must be same . ; Driven Program","#include <bits/stdc++.h>
using namespace std;
bool checkIsAP(int arr[], int n) {
  if (n == 1)
    return true;
  sort(arr, arr + n);
  int d = arr[1] - arr[0];
  for (int i = 2; i < n; i++)
    if (arr[i] - arr[i - 1] != d)
      return false;
  return true;
}
int main() {
  int arr[] = {20, 15, 5, 0, 10};
  int n = sizeof(arr) / sizeof(arr[0]);
  (checkIsAP(arr, n)) ? (cout << ""Yes"" << endl) : (cout << ""No"" << endl);
  return 0;
}",Check whether Arithmetic Progression can be formed from the given array.
376,"Check whether Arithmetic Progression can be formed from the given array | C ++ program to check if a given array can form arithmetic progression ; Returns true if a permutation of arr [ 0. . n - 1 ] can form arithmetic progression ; Find the smallest and and update second smallest ; Find second smallest ; Check if the duplicate element found or not ; If duplicate found then return false ; Find the difference between smallest and second smallest ; As we have used smallest and second smallest , so we should now only check for n - 2 elements ; Driven Program","#include <bits/stdc++.h>
using namespace std;
bool checkIsAP(int arr[], int n) {
  unordered_map<int, int> hm;
  int smallest = INT_MAX, second_smallest = INT_MAX;
  for (int i = 0; i < n; i++) {
    if (arr[i] < smallest) {
      second_smallest = smallest;
      smallest = arr[i];
    } else if (arr[i] != smallest && arr[i] < second_smallest)
      second_smallest = arr[i];
    if (hm.find(arr[i]) == hm.end())
      hm[arr[i]]++;
    else
      return false;
  }
  int diff = second_smallest - smallest;
  for (int i = 0; i < n - 1; i++) {
    if (hm.find(second_smallest) == hm.end())
      return false;
    second_smallest += diff;
  }
  return true;
}
int main() {
  int arr[] = {20, 15, 5, 0, 10};
  int n = sizeof(arr) / sizeof(arr[0]);
  (checkIsAP(arr, n)) ? (cout << ""Yes"" << endl) : (cout << ""No"" << endl);
  return 0;
}",Check whether Arithmetic Progression can be formed from the given array.
377,Count ways of choosing a pair with maximum difference | CPP Code to find no . of Ways of choosing a pair with maximum difference ; To find minimum and maximum of the array ; to find the count of minimum and maximum elements ; Count variables ; condition for all elements equal ; Driver code,"#include <bits/stdc++.h>
using namespace std;
int countPairs(int a[], int n) {
  int mn = INT_MAX;
  int mx = INT_MIN;
  for (int i = 0; i < n; i++) {
    mn = min(mn, a[i]);
    mx = max(mx, a[i]);
  }
  int c1 = 0;
  int c2 = 0;
  for (int i = 0; i < n; i++) {
    if (a[i] == mn)
      c1++;
    if (a[i] == mx)
      c2++;
  }
  if (mn == mx)
    return n * (n - 1) / 2;
  else
    return c1 * c2;
}
int main() {
  int a[] = {3, 2, 1, 1, 3};
  int n = sizeof(a) / sizeof(a[0]);
  cout << countPairs(a, n);
  return 0;
}",Count ways of choosing a pair with maximum difference.
378,Rearrange a given linked list in | C ++ code to rearrange linked list in place ; function for rearranging a linked list with high and low value . ; Base case . ; two pointer variable . ; swap function for swapping data . ; swap function for swapping data . ; function to insert a node in the linked list at the beginning . ; function to display node of linked list . ; driver code ; let create a linked list . 9 -> 6 -> 8 -> 3 -> 7,"#include <bits/stdc++.h>
using namespace std;
struct node {
  int data;
  struct node *next;
};
typedef struct node Node;
void rearrange(Node *head) {
  if (head == NULL)
    return;
  Node *prev = head, *curr = head->next;
  while (curr) {
    if (prev->data > curr->data)
      swap(prev->data, curr->data);
    if (curr->next && curr->next->data > curr->data)
      swap(curr->next->data, curr->data);
    prev = curr->next;
    if (!curr->next)
      break;
    curr = curr->next->next;
  }
}
void push(Node **head, int k) {
  Node *tem = (Node *)malloc(sizeof(Node));
  tem->data = k;
  tem->next = *head;
  *head = tem;
}
void display(Node *head) {
  Node *curr = head;
  while (curr != NULL) {
    printf(""%d "", curr->data);
    curr = curr->next;
  }
}
int main() {
  Node *head = NULL;
  push(&head, 7);
  push(&head, 3);
  push(&head, 8);
  push(&head, 6);
  push(&head, 9);
  rearrange(head);
  display(head);
  return 0;
}",Rearrange a given linked list in.
379,"Subtract Two Numbers represented as Linked Lists | C ++ program to subtract smaller valued list from larger valued list and return result as a list . ; A linked List Node ; A utility function to get length of linked list ; A Utility that padds zeros in front of the Node , with the given diff ; Subtract LinkedList Helper is a recursive function , move till the last Node , and subtract the digits and create the Node and return the Node . If d1 < d2 , we borrow the number from previous digit . ; if you have given the value value to next digit then reduce the d1 by 1 ; If d1 < d2 , then borrow the number from previous digit . Add 10 to d1 and set borrow = true ; ; subtract the digits ; Create a Node with sub value ; Set the Next pointer as Previous ; This API subtracts two linked lists and returns the linked list which shall have the subtracted result . ; Base Case . ; In either of the case , get the lengths of both Linked list . ; If lengths differ , calculate the smaller Node and padd zeros for smaller Node and ensure both larger Node and smaller Node has equal length . ; If both list lengths are equal , then calculate the larger and smaller list . If 5 - 6 - 7 & 5 - 6 - 8 are linked list , then walk through linked list at last Node as 7 < 8 , larger Node is 5 - 6 - 8 and smaller Node is 5 - 6 - 7. ; After calculating larger and smaller Node , call subtractLinkedListHelper which returns the subtracted linked list . ; A utility function to print linked list ; Driver program to test above functions","#include <bits/stdc++.h>
using namespace std;
struct Node {
  int data;
  struct Node *next;
};
Node *newNode(int data) {
  Node *temp = new Node;
  temp->data = data;
  temp->next = NULL;
  return temp;
}
int getLength(Node *Node) {
  int size = 0;
  while (Node != NULL) {
    Node = Node->next;
    size++;
  }
  return size;
}
Node *paddZeros(Node *sNode, int diff) {
  if (sNode == NULL)
    return NULL;
  Node *zHead = newNode(0);
  diff--;
  Node *temp = zHead;
  while (diff--) {
    temp->next = newNode(0);
    temp = temp->next;
  }
  temp->next = sNode;
  return zHead;
}
Node *subtractLinkedListHelper(Node *l1, Node *l2, bool &borrow) {
  if (l1 == NULL && l2 == NULL && borrow == 0)
    return NULL;
  Node *previous = subtractLinkedListHelper(l1 ? l1->next : NULL,
                                            l2 ? l2->next : NULL, borrow);
  int d1 = l1->data;
  int d2 = l2->data;
  int sub = 0;
  if (borrow) {
    d1--;
    borrow = false;
  }
  if (d1 < d2) {
    borrow = true;
    d1 = d1 + 10;
  }
  sub = d1 - d2;
  Node *current = newNode(sub);
  current->next = previous;
  return current;
}
Node *subtractLinkedList(Node *l1, Node *l2) {
  if (l1 == NULL && l2 == NULL)
    return NULL;
  int len1 = getLength(l1);
  int len2 = getLength(l2);
  Node *lNode = NULL, *sNode = NULL;
  Node *temp1 = l1;
  Node *temp2 = l2;
  if (len1 != len2) {
    lNode = len1 > len2 ? l1 : l2;
    sNode = len1 > len2 ? l2 : l1;
    sNode = paddZeros(sNode, abs(len1 - len2));
  } else {
    while (l1 && l2) {
      if (l1->data != l2->data) {
        lNode = l1->data > l2->data ? temp1 : temp2;
        sNode = l1->data > l2->data ? temp2 : temp1;
        break;
      }
      l1 = l1->next;
      l2 = l2->next;
    }
  }
  bool borrow = false;
  return subtractLinkedListHelper(lNode, sNode, borrow);
}
void printList(struct Node *Node) {
  while (Node != NULL) {
    printf(""%d "", Node->data);
    Node = Node->next;
  }
  printf(""\n"");
}
int main() {
  Node *head1 = newNode(1);
  head1->next = newNode(0);
  head1->next->next = newNode(0);
  Node *head2 = newNode(1);
  Node *result = subtractLinkedList(head1, head2);
  printList(result);
  return 0;
}",Subtract Two Numbers represented as Linked Lists.
380,"Insert node into the middle of the linked list | C ++ implementation to insert node at the middle of the linked list ; structure of a node ; function to create and return a node ; function to insert node at the middle of the linked list ; if list is empty ; get a new node ; calculate length of the linked list , i . e , the number of nodes ; ' count ' the number of nodes after which the new node is to be inserted ; ' ptr ' points to the node after which the new node is to be inserted ; insert the ' newNode ' and adjust the required links ; function to display the linked list ; Driver program to test above ; Creating the list 1 -> 2 -> 4 -> 5","#include <bits/stdc++.h>
using namespace std;
struct Node {
  int data;
  Node *next;
};
Node *getNode(int data) {
  Node *newNode = (Node *)malloc(sizeof(Node));
  newNode->data = data;
  newNode->next = NULL;
  return newNode;
}
void insertAtMid(Node **head_ref, int x) {
  if (*head_ref == NULL)
    *head_ref = getNode(x);
  else {
    Node *newNode = getNode(x);
    Node *ptr = *head_ref;
    int len = 0;
    while (ptr != NULL) {
      len++;
      ptr = ptr->next;
    }
    int count = ((len % 2) == 0) ? (len / 2) : (len + 1) / 2;
    ptr = *head_ref;
    while (count-- > 1)
      ptr = ptr->next;
    newNode->next = ptr->next;
    ptr->next = newNode;
  }
}
void display(Node *head) {
  while (head != NULL) {
    cout << head->data << "" "";
    head = head->next;
  }
}
int main() {
  Node *head = NULL;
  head = getNode(1);
  head->next = getNode(2);
  head->next->next = getNode(4);
  head->next->next->next = getNode(5);
  cout << ""Linked list before insertion: "";
  display(head);
  int x = 3;
  insertAtMid(&head, x);
  cout << ""Linkedlistafterinsertion:"" display(head);
  return 0;
}",Insert node into the middle of the linked list.
381,Insert node into the middle of the linked list | C ++ implementation to insert node at the middle of the linked list ; structure of a node ; function to insert node at the middle of the linked list ; if list is empty ; get a new node ; assign values to the slow and fast pointers ; move slow pointer to next node ; move fast pointer two nodes at a time ; insert the ' newNode ' and adjust the required links ; function to display the linked list ; Driver program to test above ; Creating the list 1 -> 2 -> 4 -> 5,"#include <bits/stdc++.h>
using namespace std;
struct Node {
  int data;
  Node *next;
};
Node *getNode(int data) {
  Node *newNode = (Node *)malloc(sizeof(Node));
  newNode->data = data;
  newNode->next = NULL;
  return newNode;
}
void insertAtMid(Node **head_ref, int x) {
  if (*head_ref == NULL)
    *head_ref = getNode(x);
  else {
    Node *newNode = getNode(x);
    Node *slow = *head_ref;
    Node *fast = (*head_ref)->next;
    while (fast && fast->next) {
      slow = slow->next;
      fast = fast->next->next;
    }
    newNode->next = slow->next;
    slow->next = newNode;
  }
}
void display(Node *head) {
  while (head != NULL) {
    cout << head->data << "" "";
    head = head->next;
  }
}
int main() {
  Node *head = NULL;
  head = getNode(1);
  head->next = getNode(2);
  head->next->next = getNode(4);
  head->next->next->next = getNode(5);
  cout << ""Linked list before insertion: "";
  display(head);
  int x = 3;
  insertAtMid(&head, x);
  cout << ""Linkedlistafterinsertion:"" display(head);
  return 0;
}",Insert node into the middle of the linked list.
382,Insertion Sort for Doubly Linked List | C ++ implementation for insertion Sort on a doubly linked list ; Node of a doubly linked list ; function to create and return a new node of a doubly linked list ; allocate node ; put in the data ; function to insert a new node in sorted way in a sorted doubly linked list ; if list is empty ; if the node is to be inserted at the beginning of the doubly linked list ; locate the node after which the new node is to be inserted ; Make the appropriate links ; if the new node is not inserted at the end of the list ; function to sort a doubly linked list using insertion sort ; Initialize ' sorted ' - a sorted doubly linked list ; Traverse the given doubly linked list and insert every node to ' sorted ' ; Store next for next iteration ; removing all the links so as to create ' current ' as a new node for insertion ; insert current in ' sorted ' doubly linked list ; Update current ; Update head_ref to point to sorted doubly linked list ; function to print the doubly linked list ; function to insert a node at the beginning of the doubly linked list ; allocate node ; put in the data ; Make next of new node as head and previous as NULL ; change prev of head node to new node ; move the head to point to the new node ; Driver program to test above ; start with the empty doubly linked list ; insert the following data,"#include <bits/stdc++.h>
using namespace std;
struct Node {
  int data;
  struct Node *prev, *next;
};
struct Node *getNode(int data) {
  struct Node *newNode = (struct Node *)malloc(sizeof(struct Node));
  newNode->data = data;
  newNode->prev = newNode->next = NULL;
  return newNode;
}
void sortedInsert(struct Node **head_ref, struct Node *newNode) {
  struct Node *current;
  if (*head_ref == NULL)
    *head_ref = newNode;
  else if ((*head_ref)->data >= newNode->data) {
    newNode->next = *head_ref;
    newNode->next->prev = newNode;
    *head_ref = newNode;
  } else {
    current = *head_ref;
    while (current->next != NULL && current->next->data < newNode->data)
      current = current->next;
    newNode->next = current->next;
    if (current->next != NULL)
      newNode->next->prev = newNode;
    current->next = newNode;
    newNode->prev = current;
  }
}
void insertionSort(struct Node **head_ref) {
  struct Node *sorted = NULL;
  struct Node *current = *head_ref;
  while (current != NULL) {
    struct Node *next = current->next;
    current->prev = current->next = NULL;
    sortedInsert(&sorted, current);
    current = next;
  }
  *head_ref = sorted;
}
void printList(struct Node *head) {
  while (head != NULL) {
    cout << head->data << "" "";
    head = head->next;
  }
}
void push(struct Node **head_ref, int new_data) {
  struct Node *new_node = (struct Node *)malloc(sizeof(struct Node));
  new_node->data = new_data;
  new_node->next = (*head_ref);
  new_node->prev = NULL;
  if ((*head_ref) != NULL)
    (*head_ref)->prev = new_node;
  (*head_ref) = new_node;
}
int main() {
  struct Node *head = NULL;
  push(&head, 9);
  push(&head, 3);
  push(&head, 5);
  push(&head, 10);
  push(&head, 12);
  push(&head, 8);
  cout << ""Doubly Linked List Before Sortingn"";
  printList(head);
  insertionSort(&head);
  cout << ""nDoubly Linked List After Sortingn"";
  printList(head);
  return 0;
}",Insertion Sort for Doubly Linked List.
383,Print all possible rotations of a given Array | C ++ program to print all possible rotations of the given array ; Global declaration of array ; Function to reverse array between indices s and e ; Function to generate all possible rotations of array ; Driver code,"#include <iostream>
using namespace std;
int arr[10000];
void reverse(int arr[], int s, int e) {
  while (s < e) {
    int tem = arr[s];
    arr[s] = arr[e];
    arr[e] = tem;
    s = s + 1;
    e = e - 1;
  }
}
void fun(int arr[], int k) {
  int n = 4 - 1;
  int v = n - k;
  if (v >= 0) {
    reverse(arr, 0, v);
    reverse(arr, v + 1, n);
    reverse(arr, 0, n);
  }
}
int main() {
  arr[0] = 1;
  arr[1] = 2;
  arr[2] = 3;
  arr[3] = 4;
  for (int i = 0; i < 4; i++) {
    fun(arr, i);
    cout << (""["");
    for (int j = 0; j < 4; j++) {
      cout << (arr[j]) << "", "";
    }
    cout << (""]"");
  }
}",Print all possible rotations of a given Array.
384,"Find array sum using Bitwise OR after splitting given array in two halves after K circular shifts | C ++ Program to find Bitwise OR of two equal halves of an array after performing K right circular shifts ; Array for storing the segment tree ; Function to build the segment tree ; Function to return the OR of elements in the range [ l , r ] ; Check for out of bound condition ; Find middle of the range ; Recurse for all the elements in array ; Function to find the OR sum ; Function to build the segment Tree ; Loop to handle q queries ; Effective number of right circular shifts ; OR of second half of the array [ n / 2 - i , n - 1 - i ] ; OR of first half of the array [ n - i , n - 1 ] OR [ 0 , n / 2 - 1 - i ] ; Print final answer to the query ; Driver Code","#include <bits/stdc++.h>
const int MAX = 100005;
using namespace std;
int seg[4 * MAX];
void build(int node, int l, int r, int a[]) {
  if (l == r)
    seg[node] = a[l];
  else {
    int mid = (l + r) / 2;
    build(2 * node, l, mid, a);
    build(2 * node + 1, mid + 1, r, a);
    seg[node] = (seg[2 * node] seg[2 * node + 1]);
  }
}
int query(int node, int l, int r, int start, int end, int a[]) {
  if (l > end or r < start)
    return 0;
  if (start <= l and r <= end)
    return seg[node];
  int mid = (l + r) / 2;
  return ((query(2 * node, l, mid, start, end, a)) |
          (query(2 * node + 1, mid + 1, r, start, end, a)));
}
void orsum(int a[], int n, int q, int k[]) {
  build(1, 0, n - 1, a);
  for (int j = 0; j < q; j++) {
    int i = k[j] % (n / 2);
    int sec = query(1, 0, n - 1, n / 2 - i, n - i - 1, a);
    int first = (query(1, 0, n - 1, 0, n / 2 - 1 - i, a) |
                 query(1, 0, n - 1, n - i, n - 1, a));
    int temp = sec + first;
    cout << temp << endl;
  }
}
int main() {
  int a[] = {7, 44, 19, 86, 65, 39, 75, 101};
  int n = sizeof(a) / sizeof(a[0]);
  int q = 2;
  int k[q] = {4, 2};
  orsum(a, n, q, k);
  return 0;
}",Find array sum using Bitwise OR after splitting given array in two halves after K circular shifts.
385,Maximize count of corresponding same elements in given Arrays by Rotation | C ++ program of the above approach ; Function that prints maximum equal elements ; Vector to store the index of elements of array b ; Storing the positions of array B ; frequency array to keep count of elements with similar difference in distances ; Iterate through all element in arr1 [ ] ; Calculate number of shift required to make current element equal ; If d is less than 0 ; Store the frequency of current diff ; Compute the maximum frequency stored ; Printing the maximum number of equal elements ; Driver Code ; Given two arrays ; Function Call,"#include <bits/stdc++.h>
using namespace std;
void maximumEqual(int a[], int b[], int n) {
  vector<int> store(1e5);
  for (int i = 0; i < n; i++) {
    store[b[i]] = i + 1;
  }
  vector<int> ans(1e5);
  for (int i = 0; i < n; i++) {
    int d = abs(store[a[i]] - (i + 1));
    if (store[a[i]] < i + 1) {
      d = n - d;
    }
    ans[d]++;
  }
  int finalans = 0;
  for (int i = 0; i < 1e5; i++)
    finalans = max(finalans, ans[i]);
  cout << finalans << ""\n"";
}
int main() {
  int A[] = {6, 7, 3, 9, 5};
  int B[] = {7, 3, 9, 5, 6};
  int size = sizeof(A) / sizeof(A[0]);
  maximumEqual(A, B, size);
  return 0;
}",Maximize count of corresponding same elements in given Arrays by Rotation.
386,Print array after it is right rotated K times | C ++ implementation of right rotation of an array K number of times ; Function to rightRotate array ; If rotation is greater than size of array ; Printing rightmost kth elements ; Prints array after ' k ' elements ; Driver code,"#include <bits/stdc++.h>
using namespace std;
void RightRotate(int a[], int n, int k) {
  k = k % n;
  for (int i = 0; i < n; i++) {
    if (i < k) {
      cout << a[n + i - k] << "" "";
    } else {
      cout << (a[i - k]) << "" "";
    }
  }
  cout << ""\n"";
}
int main() {
  int Array[] = {1, 2, 3, 4, 5};
  int N = sizeof(Array) / sizeof(Array[0]);
  int K = 2;
  RightRotate(Array, N, K);
}",Print array after it is right rotated K times.
387,"Sort a Rotated Sorted Array | C ++ implementation for restoring original sort in rotated sorted array ; Function to restore the Original Sort ; In reverse ( ) , the first parameter is iterator to beginning element and second parameter is iterator to last element plus one . ; Function to print the Array ; Driver function","#include <bits/stdc++.h>
using namespace std;
void restoreSortedArray(int arr[], int n) {
  for (int i = 0; i < n; i++) {
    if (arr[i] > arr[i + 1]) {
      reverse(arr, arr + i + 1);
      reverse(arr + i + 1, arr + n);
      reverse(arr, arr + n);
    }
  }
}
void printArray(int arr[], int size) {
  for (int i = 0; i < size; i++)
    cout << arr[i] << "" "";
}
int main() {
  int arr[] = {3, 4, 5, 1, 2};
  int n = sizeof(arr) / sizeof(arr[0]);
  restoreSortedArray(arr, n);
  printArray(arr, n);
  return 0;
}",Sort a Rotated Sorted Array.
388,"Sort a Rotated Sorted Array | C ++ implementation for restoring original sort in rotated sorted array using binary search ; Function to find start index of array ; Function to restore the Original Sort ; array is already sorted ; In reverse ( ) , the first parameter is iterator to beginning element and second parameter is iterator to last element plus one . ; Function to print the Array ; Driver function","#include <bits/stdc++.h>
using namespace std;
int findStartIndexOfArray(int arr[], int low, int high) {
  if (low > high) {
    return -1;
  }
  if (low == high) {
    return low;
  }
  int mid = low + (high - low) / 2;
  if (arr[mid] > arr[mid + 1])
    return mid + 1;
  if (arr[mid - 1] > arr[mid])
    return mid;
  if (arr[low] > arr[mid])
    return findStartIndexOfArray(arr, low, mid - 1);
  else
    return findStartIndexOfArray(arr, mid + 1, high);
}
void restoreSortedArray(int arr[], int n) {
  if (arr[0] < arr[n - 1])
    return;
  int start = findStartIndexOfArray(arr, 0, n - 1);
  reverse(arr, arr + start);
  reverse(arr + start, arr + n);
  reverse(arr, arr + n);
}
void printArray(int arr[], int size) {
  for (int i = 0; i < size; i++)
    cout << arr[i] << "" "";
}
int main() {
  int arr[] = {1, 2, 3, 4, 5};
  int n = sizeof(arr) / sizeof(arr[0]);
  restoreSortedArray(arr, n);
  printArray(arr, n);
  return 0;
}",Sort a Rotated Sorted Array.
389,Left Rotation and Right Rotation of a String | C program for Left Rotation and Right Rotation of a String ; In - place rotates s towards left by d ; In - place rotates s towards right by d ; Driver code,"#include <bits/stdc++.h>
using namespace std;
void leftrotate(string &s, int d) {
  reverse(s.begin(), s.begin() + d);
  reverse(s.begin() + d, s.end());
  reverse(s.begin(), s.end());
}
void rightrotate(string &s, int d) { leftrotate(s, s.length() - d); }
int main() {
  string str1 = ""GeeksforGeeks"";
  leftrotate(str1, 2);
  cout << str1 << endl;
  string str2 = ""GeeksforGeeks"";
  rightrotate(str2, 2);
  cout << str2 << endl;
  return 0;
}",Left Rotation and Right Rotation of a String.
390,"Search an Element in Doubly Circular Linked List | C ++ program to illustrate inserting a Node in a Cicular Doubly Linked list in begging , end and middle ; Structure of a Node ; Function to insert a node at the end ; If the list is empty , create a single node circular and doubly list ; Find last node ; Create Node dynamically ; Start is going to be next of new_node ; Make new node previous of start ; Make last preivous of new node ; Make new node next of old last ; Function to display the circular doubly linked list ; Function to search the particular element from the list ; Declare the temp variable ; Declare other control variable for the searching ; If start is NULL return - 1 ; Move the temp pointer until , temp -> next doesn 't move  start address (Circular Fashion) ; Increment count for location ; If it is found raise the flag and break the loop ; Increment temp pointer ; Check whether last element in the list content the value if contain , raise a flag and increment count ; If flag is true , then element found , else not ; Driver code ; Start with the empty list ; Insert 4. So linked list becomes 4 -> NULL ; Insert 5. So linked list becomes 4 -> 5 ; Insert 7. So linked list becomes 4 -> 5 -> 7 ; Insert 8. So linked list becomes 4 -> 5 -> 7 -> 8 ; Insert 6. So linked list becomes 4 -> 5 -> 7 -> 8 -> 6","#include <bits/stdc++.h>
using namespace std;
struct Node {
  int data;
  struct Node *next;
  struct Node *prev;
};
void insertNode(struct Node **start, int value) {
  if (*start == NULL) {
    struct Node *new_node = new Node;
    new_node->data = value;
    new_node->next = new_node->prev = new_node;
    *start = new_node;
    return;
  }
  Node *last = (*start)->prev;
  struct Node *new_node = new Node;
  new_node->data = value;
  new_node->next = *start;
  (*start)->prev = new_node;
  new_node->prev = last;
  last->next = new_node;
}
void displayList(struct Node *start) {
  struct Node *temp = start;
  while (temp->next != start) {
    printf(""%d "", temp->data);
    temp = temp->next;
  }
  printf(""%d "", temp->data);
}
int searchList(struct Node *start, int search) {
  struct Node *temp = start;
  int count = 0, flag = 0, value;
  if (temp == NULL)
    return -1;
  else {
    while (temp->next != start) {
      count++;
      if (temp->data == search) {
        flag = 1;
        count--;
        break;
      }
      temp = temp->next;
    }
    if (temp->data == search) {
      count++;
      flag = 1;
    }
    if (flag == 1)
      cout << ""\n"" << search << "" found at location "" << count << endl;
    else
      cout << ""\n"" << search << "" not found"" << endl;
  }
}
int main() {
  struct Node *start = NULL;
  insertNode(&start, 4);
  insertNode(&start, 5);
  insertNode(&start, 7);
  insertNode(&start, 8);
  insertNode(&start, 6);
  printf(""Created circular doubly linked list is: "");
  displayList(start);
  searchList(start, 5);
  return 0;
}",Search an Element in Doubly Circular Linked List.
391,"Reverse a doubly circular linked list | C ++ implementation to revesre a doubly circular linked list ; structure of a node of linked list ; function to create and return a new node ; Function to insert at the end ; If the list is empty , create a single node circular and doubly list ; Find last node ; Start is going to be next of new_node ; Make new node previous of start ; Make last preivous of new node ; Make new node next of old last ; Uitlity function to revesre a doubly circular linked list ; Initialize a new head pointer ; get pointer to the the last node ; set ' curr ' to last node ; traverse list in backward direction ; insert ' curr ' at the end of the list starting with the ' new _ head ' pointer ; head pointer of the reversed list ; function to display a doubly circular list in forward and backward direction ; Driver program to test above","#include <bits/stdc++.h>
using namespace std;
struct Node {
  int data;
  Node *next, *prev;
};
Node *getNode(int data) {
  Node *newNode = (Node *)malloc(sizeof(Node));
  newNode->data = data;
  return newNode;
}
void insertEnd(Node **head, Node *new_node) {
  if (*head == NULL) {
    new_node->next = new_node->prev = new_node;
    *head = new_node;
    return;
  }
  Node *last = (*head)->prev;
  new_node->next = *head;
  (*head)->prev = new_node;
  new_node->prev = last;
  last->next = new_node;
}
Node *reverse(Node *head) {
  if (!head)
    return NULL;
  Node *new_head = NULL;
  Node *last = head->prev;
  Node *curr = last, *prev;
  while (curr->prev != last) {
    prev = curr->prev;
    insertEnd(&new_head, curr);
    curr = prev;
  }
  insertEnd(&new_head, curr);
  return new_head;
}
void display(Node *head) {
  if (!head)
    return;
  Node *temp = head;
  cout << ""Forward direction: "";
  while (temp->next != head) {
    cout << temp->data << "" "";
    temp = temp->next;
  }
  cout << temp->data;
  Node *last = head->prev;
  temp = last;
  cout << ""Backwarddirection:"" while (temp->prev != last) {
    cout << temp->data << "" "";
    temp = temp->prev;
  }
  cout << temp->data;
}
int main() {
  Node *head = NULL;
  insertEnd(&head, getNode(1));
  insertEnd(&head, getNode(2));
  insertEnd(&head, getNode(3));
  insertEnd(&head, getNode(4));
  insertEnd(&head, getNode(5));
  cout << ""Current list:\n"";
  display(head);
  head = reverse(head);
  cout << ""Reversedlist:"" display(head);
  return 0;
}",Reverse a doubly circular linked list.
392,Sqrt ( or Square Root ) Decomposition | Set 2 ( LCA of Tree in O ( sqrt ( height ) ) time ) | Naive C ++ implementation to find LCA in a tree ; stores depth for each node ; stores first parent for each node ; marking parent for each node ; marking depth for each node ; propogating marking down the tree ; a dummy node ; precalclating 1 ) depth . 2 ) parent . for each node ; Time Complexity : O ( Height of tree ) recursively jumps one node above till both the nodes become equal ; Driver function to call the above functions ; adding edges to the tree,"#include <bits/stdc++.h>
using namespace std;
#defineMAXN1001 int depth[MAXN];
int parent[MAXN];
vector<int> adj[MAXN];
void addEdge(int u, int v) {
  adj[u].push_back(v);
  adj[v].push_back(u);
}
void dfs(int cur, int prev) {
  parent[cur] = prev;
  depth[cur] = depth[prev] + 1;
  for (int i = 0; i < adj[cur].size(); i++)
    if (adj[cur][i] != prev)
      dfs(adj[cur][i], cur);
}
void preprocess() {
  depth[0] = -1;
  dfs(1, 0);
}
int LCANaive(int u, int v) {
  if (u == v)
    return u;
  if (depth[u] > depth[v])
    swap(u, v);
  v = parent[v];
  return LCANaive(u, v);
}
int main(int argc, char const *argv[]) {
  addEdge(1, 2);
  addEdge(1, 3);
  addEdge(1, 4);
  addEdge(2, 5);
  addEdge(2, 6);
  addEdge(3, 7);
  addEdge(4, 8);
  addEdge(4, 9);
  addEdge(9, 10);
  addEdge(9, 11);
  addEdge(7, 12);
  addEdge(7, 13);
  preprocess();
  cout << ""LCA(11,8) : "" << LCANaive(11, 8) << endl;
  cout << ""LCA(3,13) : "" << LCANaive(3, 13) << endl;
  return 0;
}",Sqrt ( or Square Root ) Decomposition.
393,Sqrt ( or Square Root ) Decomposition | Set 2 ( LCA of Tree in O ( sqrt ( height ) ) time ) | C ++ program to find LCA using Sqrt decomposition ; block size = sqrt ( height ) ; stores depth for each node ; stores first parent for each node ; stores first ancestor in previous block ; precalculating the required parameters associated with every node ; marking depth of cur node ; marking parent of cur node ; making jump_parent of cur node ; if it is first node of the block then its jump_parent is its cur parent ; if it is not the first node of this block then its jump_parent is jump_parent of its parent ; propogating the marking down the subtree ; using sqrt decomposition trick ; maintaining depth [ v ] > depth [ u ] ; climb to its jump parent ; u and v have same jump_parent ; precalclating 1 ) depth . 2 ) parent . 3 ) jump_parent for each node ; Driver function to call the above functions ; adding edges to the tree ; here we are directly taking height = 4 according to the given tree but we can pre - calculate height = max depth in one more dfs,"#include ""iostream""
#include ""math.h""
#include ""vector""
using namespace std;
#defineMAXN1001 int block_sz;
int depth[MAXN];
int parent[MAXN];
int jump_parent[MAXN];
vector<int> adj[MAXN];
void addEdge(int u, int v) {
  adj[u].push_back(v);
  adj[v].push_back(u);
}
int LCANaive(int u, int v) {
  if (u == v)
    return u;
  if (depth[u] > depth[v])
    swap(u, v);
  v = parent[v];
  return LCANaive(u, v);
}
void dfs(int cur, int prev) {
  depth[cur] = depth[prev] + 1;
  parent[cur] = prev;
  if (depth[cur] % block_sz == 0)
    jump_parent[cur] = parent[cur];
  else
    jump_parent[cur] = jump_parent[prev];
  for (int i = 0; i < adj[cur].size(); ++i)
    if (adj[cur][i] != prev)
      dfs(adj[cur][i], cur);
}
int LCASQRT(int u, int v) {
  while (jump_parent[u] != jump_parent[v]) {
    if (depth[u] > depth[v])
      swap(u, v);
    v = jump_parent[v];
  }
  return LCANaive(u, v);
}
void preprocess(int height) {
  block_sz = sqrt(height);
  depth[0] = -1;
  dfs(1, 0);
}
int main(int argc, char const *argv[]) {
  addEdge(1, 2);
  addEdge(1, 3);
  addEdge(1, 4);
  addEdge(2, 5);
  addEdge(2, 6);
  addEdge(3, 7);
  addEdge(4, 8);
  addEdge(4, 9);
  addEdge(9, 10);
  addEdge(9, 11);
  addEdge(7, 12);
  addEdge(7, 13);
  int height = 4;
  preprocess(height);
  cout << ""LCA(11,8) : "" << LCASQRT(11, 8) << endl;
  cout << ""LCA(3,13) : "" << LCASQRT(3, 13) << endl;
  return 0;
}",Sqrt ( or Square Root ) Decomposition.
394,Expected Number of Trials to get N Consecutive Heads | C ++ implementation of the above approach ; Driver Code ; Formula for number of trails for N consecutive heads,"#include ""bits/stdc++.h""
using namespace std;
int main() {
  int N = 3;
  cout << pow(2, N + 1) - 2;
  return 0;
}",Expected Number of Trials to get N Consecutive Heads.
395,"Find and Count total factors of co | C ++ implementation of the above approach ; Function to return the count of numbers which are divisible by both A and B in the range [ 1 , N ] in constant time ; Compute the count of numbers divisible by A in the range [ 1 , N ] ; Compute the count of numbers divisible by B in the range [ 1 , N ] ; Adding the counts which are divisible by A and B ; The above value might contain repeated values which are divisible by both A and B . Therefore , the count of numbers which are divisible by both A and B are found ; The count computed above is subtracted to compute the final count ; Function to return the sum of numbers which are divisible by both A and B in the range [ 1 , N ] ; Set to store the numbers so that the numbers are not repeated ; For loop to find the numbers which are divisible by A and insert them into the set ; For loop to find the numbers which are divisible by A and insert them into the set ; For loop to iterate through the set and find the sum ; Driver code","#include <algorithm>
#include <iostream>
#include <set>
#definelllonglong
using namespace std;
ll int countOfNum(ll int n, ll int a, ll int b) {
  ll int cnt_of_a, cnt_of_b, cnt_of_ab, sum;
  cnt_of_a = n / a;
  cnt_of_b = n / b;
  sum = cnt_of_b + cnt_of_a;
  cnt_of_ab = n / (a * b);
  sum = sum - cnt_of_ab;
  return sum;
}
ll int sumOfNum(ll int n, ll int a, ll int b) {
  ll int i;
  ll int sum = 0;
  set<ll int> ans;
  for (i = a; i <= n; i = i + a) {
    ans.insert(i);
  }
  for (i = b; i <= n; i = i + b) {
    ans.insert(i);
  }
  for (auto it = ans.begin(); it != ans.end(); it++) {
    sum = sum + *it;
  }
  return sum;
}
int main() {
  ll int N = 88;
  ll int A = 11;
  ll int B = 8;
  ll int count = countOfNum(N, A, B);
  ll int sumofnum = sumOfNum(N, A, B);
  cout << sumofnum % count << endl;
  return 0;
}",Find and Count total factors of co.
396,Find Range Value of the Expression | C ++ implementation of the approach ; Function to return the value of the given expression ; Value of the first term ; Value of the last term ; Driver code ; Get the result,"#include <bits/stdc++.h>
using namespace std;
double get(double L, double R) {
  double x = 1.0 / L;
  double y = 1.0 / (R + 1.0);
  return (x - y);
}
int main() {
  int L = 6, R = 12;
  double ans = get(L, R);
  cout << fixed << setprecision(2) << ans;
  return 0;
}",Find Range Value of the Expression.
397,Find next greater element with no consecutive 1 in it 's binary representation | C ++ implementation of the approach ; To store the pre - computed integers ; Function that returns true if the binary representation of x contains consecutive 1 s ; To store the previous bit ; Check whether the previous bit and the current bit are both 1 ; Update previous bit ; Go to the next bit ; Function to pre - compute the valid numbers from 0 to MAX ; Store all the numbers which do not have consecutive 1 s ; Function to return the minimum number greater than n which does not contain consecutive 1 s ; Search for the next greater element with no consecutive 1 s ; Function to perform the queries ; Driver code ; Pre - compute the numbers ; Perform the queries,"#include <bits/stdc++.h>
using namespace std;
const int MAX = 100000;
vector<int> v;
int consecutiveOnes(int x) {
  int p = 0;
  while (x > 0) {
    if (x % 2 == 1 and p == 1)
      return true;
    p = x % 2;
    x /= 2;
  }
  return false;
}
void preCompute() {
  for (int i = 0; i <= MAX; i++) {
    if (!consecutiveOnes(i))
      v.push_back(i);
  }
}
int nextValid(int n) {
  int it = upper_bound(v.begin(), v.end(), n) - v.begin();
  int val = v[it];
  return val;
}
void performQueries(int queries[], int q) {
  for (int i = 0; i < q; i++)
    cout << nextValid(queries[i]) << ""\n"";
}
int main() {
  int queries[] = {4, 6};
  int q = sizeof(queries) / sizeof(int);
  preCompute();
  performQueries(queries, q);
  return 0;
}",Find next greater element with no consecutive 1 in it 's binary representation.
398,"Minimum given operations required to convert a given binary string to all 1 's | C ++ implementation of the approach ; Function to return the number of operations required ; ctr will store the number of consecutive ones at the end of the given binary string ; Loop to find number of 1 s at the end of the string ; If the current character is 1 ; If we encounter the first 0 from the LSB position then we 'll break the loop ; Number of operations required is ( l - ctr ) ; Function to remove leading zeroes from the string ; Loop until s [ i ] becomes not equal to 1 ; If we reach the end of the string , it means that string contains only 0 's ; Return the string without leading zeros ; Driver code ; Removing the leading zeroes","#include <bits/stdc++.h>
using namespace std;
int changeToOnes(string str) {
  int i, l, ctr = 0;
  l = str.length();
  for (i = l - 1; i >= 0; i--) {
    if (str[i] == '1')
      ctr++;
    else
      break;
  }
  return l - ctr;
}
string removeZeroesFromFront(string str) {
  string s;
  int i = 0;
  while (i < str.length() && str[i] == '0')
    i++;
  if (i == str.length())
    s = ""0"";
  else
    s = str.substr(i, str.length() - i);
  return s;
}
int main() {
  string str = ""10010111"";
  str = removeZeroesFromFront(str);
  cout << changeToOnes(str);
  return 0;
}",Minimum given operations required to convert a given binary string to all 1 's.
399,Minimum deletions required such that any number X will occur exactly X times | C ++ implementation of the approach ; Function to return the minimum deletions required ; To store the frequency of the array elements ; Store frequency of each element ; To store the minimum deletions required ; Value ; It 's frequency ; If number less than or equal to it 's frequency ; Delete extra occurrences ; Delete every occurrence of x ; Driver code,"#include <bits/stdc++.h>
using namespace std;
int MinDeletion(int a[], int n) {
  unordered_map<int, int> map;
  for (int i = 0; i < n; i++)
    map[a[i]]++;
  int ans = 0;
  for (auto i : map) {
    int x = i.first;
    int frequency = i.second;
    if (x <= frequency) {
      ans += (frequency - x);
    } else
      ans += frequency;
  }
  return ans;
}
int main() {
  int a[] = {2, 3, 2, 3, 4, 4, 4, 4, 5};
  int n = sizeof(a) / sizeof(a[0]);
  cout << MinDeletion(a, n);
  return 0;
}",Minimum deletions required such that any number X will occur exactly X times.
400,"Concatenate strings in any order to get Maximum Number of "" AB "" | C ++ implementation of above approach ; Function to find maximum number of ABs ; variable A , B , AB for count strings that end with ' A ' but not end with ' B ' , ' B ' but does not end with ' A ' and ' B ' and ends with ' A ' respectively . ; ' AB ' is already present in string before concatenate them ; count of strings that begins with ' B ' and ends with 'A ; count of strings that begins with ' B ' but does not end with ' A ' ; count of strings that ends with ' A ' but not end with ' B ' ; updating the value of ans and add extra count of ' AB ' ; Driver Code","#include <bits/stdc++.h>
using namespace std;
int maxCountAB(string s[], int n) {
  int A = 0, B = 0, BA = 0, ans = 0;
  for (int i = 0; i < n; i++) {
    string S = s[i];
    int L = S.size();
    for (int j = 0; j < L - 1; j++) {
      if (S.at(j) == 'A' && S.at(j + 1) == 'B') {
        ans++;
      }
    }
    if (S.at(0) == 'B' && S.at(L - 1) == 'A')
      BA++;
    else if (S.at(0) == 'B')
      B++;
    else if (S.at(L - 1) == 'A')
      A++;
  }
  if (BA == 0)
    ans += min(B, A);
  else if (A + B == 0)
    ans += BA - 1;
  else
    ans += BA + min(B, A);
  return ans;
}
int main() {
  string s[] = {""ABCA"", ""BOOK"", ""BAND""};
  int n = sizeof(s) / sizeof(s[0]);
  cout << maxCountAB(s, n);
  return 0;
}","Concatenate strings in any order to get Maximum Number of "" AB ""."
401,Minimum operations to make sum of neighbouring elements <= X | C ++ implementation of the approach ; Function to return the minimum number of operations required ; To store total operations required ; First make all elements equal to x which are currenctly greater ; Left scan the array ; Update the current element such that neighbouring sum is < x ; Driver code,"#include <bits/stdc++.h>
using namespace std;
int MinOperations(int n, int x, int *arr) {
  int total = 0;
  for (int i = 0; i < n; ++i) {
    if (arr[i] > x) {
      int difference = arr[i] - x;
      total = total + difference;
      arr[i] = x;
    }
  }
  for (int i = 1; i < n; ++i) {
    int LeftNeigbouringSum = arr[i] + arr[i - 1];
    if (LeftNeigbouringSum > x) {
      int current_diff = LeftNeigbouringSum - x;
      arr[i] = max(0, arr[i] - current_diff);
      total = total + current_diff;
    }
  }
  return total;
}
int main() {
  int X = 1;
  int arr[] = {1, 6, 1, 2, 0, 4};
  int N = sizeof(arr) / sizeof(int);
  cout << MinOperations(N, X, arr);
  return 0;
}",Minimum operations to make sum of neighbouring elements <= X.
402,Find the repeating and the missing number using two equations | C ++ implementation of the approach ; Function to print the required numbers ; Sum of first n natural numbers ; Sum of squares of first n natural numbers ; To store the sum and sum of squares of the array elements ; Driver code,"#include <bits/stdc++.h>
#include <cmath>
#include <iostream>
using namespace std;
void findNumbers(int arr[], int n) {
  int sumN = (n * (n + 1)) / 2;
  int sumSqN = (n * (n + 1) * (2 * n + 1)) / 6;
  int sum = 0, sumSq = 0, i;
  for (i = 0; i < n; i++) {
    sum += arr[i];
    sumSq = sumSq + (pow(arr[i], 2));
  }
  int B = (((sumSq - sumSqN) / (sum - sumN)) + sumN - sum) / 2;
  int A = sum - sumN + B;
  cout << ""A = "";
  cout << A << endl;
  cout << ""B = "";
  cout << B << endl;
}
int main() {
  int arr[] = {1, 2, 2, 3, 4};
  int n = sizeof(arr) / sizeof(arr[0]);
  findNumbers(arr, n);
  return 0;
}",Find the repeating and the missing number using two equations.
403,"Lexicographically smallest string with given string as prefix | C ++ program for the above approach ; Function to find the whether the string temp starts with str or not ; Base Case ; Check for the corresponding characters in temp & str ; Function to find lexicographic smallest string consisting of the string str as prefix ; Sort the given array string arr [ ] ; If the i - th string contains given string as a prefix , then print the result ; If no string exists then return "" - 1"" ; Driver Code","#include <bits/stdc++.h>
using namespace std;
bool is_prefix(string temp, string str) {
  if (temp.length() < str.length())
    return 0;
  else {
    for (int i = 0; i < str.length(); i++) {
      if (str[i] != temp[i])
        return 0;
    }
    return 1;
  }
}
string lexicographicallyString(string input[], int n, string str) {
  sort(input, input + n);
  for (int i = 0; i < n; i++) {
    string temp = input[i];
    if (is_prefix(temp, str)) {
      return temp;
    }
  }
  return ""-1"";
}
int main() {
  string arr[] = {""apple"", ""appe"", ""apl"", ""aapl"", ""appax""};
  string S = ""app"";
  int N = 5;
  cout << lexicographicallyString(arr, N, S);
  return 0;
}",Lexicographically smallest string with given string as prefix.
404,"Rearrange Array to find K using Binary Search algorithm without sorting | C ++ program for the above approach ; Function to rearrange the array ; Stores the rearranged array ; Stores whether the arrangement is possible or not ; Update K with the position of K ; Stores all elements lesser than and greater than in vector smaller and greater respectively ; Traverse the array arr [ ] ; If arr [ i ] is less than arr [ K ] ; Else ; Iterate unil low is less than or equal to high ; Stores mid point ; If mid is equal to K ; If mid is less than K ; If mid is greater than K ; If f is - 1 ; Iterate in the range [ 1 , N ] ; If ans [ i ] is equal to - 1 ; Print the rearranged array ; Driver Code ; Input ; Function Call","#include <bits/stdc++.h>
using namespace std;
void Rearrange(int arr[], int K, int N) {
  int ans[N + 1];
  int f = -1;
  for (int i = 0; i < N; i++) {
    ans[i] = -1;
  }
  K = find(arr, arr + N, K) - arr;
  vector<int> smaller, greater;
  for (int i = 0; i < N; i++) {
    if (arr[i] < arr[K])
      smaller.push_back(arr[i]);
    else if (arr[i] > arr[K])
      greater.push_back(arr[i]);
  }
  int low = 0, high = N - 1;
  while (low <= high) {
    int mid = (low + high) / 2;
    if (mid == K) {
      ans[mid] = arr[K];
      f = 1;
      break;
    } else if (mid < K) {
      if (smaller.size() == 0) {
        break;
      }
      ans[mid] = smaller.back();
      smaller.pop_back();
      low = mid + 1;
    } else {
      if (greater.size() == 0) {
        break;
      }
      ans[mid] = greater.back();
      greater.pop_back();
      high = mid - 1;
    }
  }
  if (f == -1) {
    cout << -1 << endl;
    return;
  }
  for (int i = 0; i < N; i++) {
    if (ans[i] == -1) {
      if (smaller.size()) {
        ans[i] = smaller.back();
        smaller.pop_back();
      } else if (greater.size()) {
        ans[i] = greater.back();
        greater.pop_back();
      }
    }
  }
  for (int i = 0; i < N; i++)
    cout << ans[i] << "" "";
  cout << endl;
}
int main() {
  int arr[] = {10, 7, 2, 5, 3, 8};
  int K = 7;
  int N = sizeof(arr) / sizeof(arr[0]);
  Rearrange(arr, K, N);
  return 0;
}",Rearrange Array to find K using Binary Search algorithm without sorting.
405,"Minimize K to let Person A consume at least ceil ( N / ( M + 1 ) ) candies based on given rules | C ++ program for the above approach ; Function to find minimum value of K such that the first person gets at least ( N / ( M + 1 ) ) candies ; Find the minimum required value of candies for the first person ; Iterate K from [ 1 , n ] ; Total number of candies ; Candies taken by Person 1 ; Candies taken by 1 st person is minimum of K and candies left ; Traverse the array arr [ ] ; Amount consumed by the person j ; Update the number of candies ; Good share of candies achieved ; Driver Code","#include <bits/stdc++.h>
using namespace std;
void minimumK(vector<int> &arr, int M, int N) {
  int good = ceil((N * 1.0) / ((M + 1) * 1.0));
  for (int i = 1; i <= N; i++) {
    int K = i;
    int candies = N;
    int taken = 0;
    while (candies > 0) {
      taken += min(K, candies);
      candies -= min(K, candies);
      for (int j = 0; j < M; j++) {
        int consume = (arr[j] * candies) / 100;
        candies -= consume;
      }
    }
    if (taken >= good) {
      cout << i;
      return;
    }
  }
}
int main() {
  int N = 13, M = 1;
  vector<int> arr = {50};
  minimumK(arr, M, N);
  return 0;
}",Minimize K to let Person A consume at least ceil ( N / ( M + 1 ) ) candies based on given rules.
406,"Minimize K to let Person A consume at least ceil ( N / ( M + 1 ) ) candies based on given rules | C ++ program for the above approach ; Function to check if the value of mid gives at least ( N / ( M + 1 ) ) candies or not ; Candies taken by 1 st person is minimum of K and candies left ; Traverse the given array ; Amount consumed by person j ; Update the count of candies ; Check if person 1 gets the good share of candies ; Function to find minimum value of K such that the first person gets at least ( N / ( M + 1 ) ) candies ; Find the minimum required value of candies for the first person ; Iterate until low is less than or equal to mid ; Find the value of mid ; Check for mid , whether it can be the possible value of K or not ; Update the value of hi ; Otherwise , update the value of lo ; Print the resultant minimum value of K ; Driver Code","#include <bits/stdc++.h>
using namespace std;
bool check(int K, int n, int m, vector<int> arr, int good_share) {
  int candies = n, taken = 0;
  while (candies > 0) {
    taken += min(K, candies);
    candies -= min(K, candies);
    for (int j = 0; j < m; j++) {
      int consume = (arr[j] * candies) / 100;
      candies -= consume;
    }
  }
  return (taken >= good_share);
}
void minimumK(vector<int> &arr, int N, int M) {
  int good_share = ceil((N * 1.0) / ((M + 1) * 1.0));
  int lo = 1, hi = N;
  while (lo < hi) {
    int mid = (lo + hi) / 2;
    if (check(mid, N, M, arr, good_share)) {
      hi = mid;
    } else {
      lo = mid + 1;
    }
  }
  cout << hi;
}
int main() {
  int N = 13, M = 1;
  vector<int> arr = {50};
  minimumK(arr, N, M);
  return 0;
}",Minimize K to let Person A consume at least ceil ( N / ( M + 1 ) ) candies based on given rules.
407,Total time required to travel a path denoted by a given string | C ++ code for the above approach ; Function to calculate time taken to travel the path ; Stores total time ; Initial position ; Stores visited segments ; Check whether segment is present in the set ; Increment the value of time by 2 ; Insert segment into the set ; Print the value of time ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
void calcTotalTime(string path) {
  int time = 0;
  int x = 0, y = 0;
  set<pair<int, int>> s;
  for (int i = 0; i < path.size(); i++) {
    int p = x;
    int q = y;
    if (path[i] == 'N')
      y++;
    else if (path[i] == 'S')
      y--;
    else if (path[i] == 'E')
      x++;
    else if (path[i] == 'W')
      x--;
    if (s.find({p + x, q + y}) == s.end()) {
      time += 2;
      s.insert({p + x, q + y});
    } else
      time += 1;
  }
  cout << time << endl;
}
int main() {
  string path = ""NSE"";
  calcTotalTime(path);
  return 0;
}",Total time required to travel a path denoted by a given string.
408,Cost required to make all array elements equal to 1 | C ++ program for the above approach ; Function to calculate the cost required to make all array elements equal to 1 ; Stores the total cost ; Traverse the array arr [ ] ; If current element is 0 ; Convert 0 to 1 ; Add the cost ; Return the total cost ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
int findCost(int A[], int N) {
  int totalCost = 0;
  for (int i = 0; i < N; i++) {
    if (A[i] == 0) {
      A[i] = 1;
      totalCost += i;
    }
  }
  return totalCost;
}
int main() {
  int arr[] = {1, 0, 1, 0, 1, 0};
  int N = sizeof(arr) / sizeof(arr[0]);
  cout << findCost(arr, N);
  return 0;
}",Cost required to make all array elements equal to 1.
409,"Find the peak index of a given array | C ++ program for the above approach ; Function to find the peak index for the given array ; Base Case ; Check for strictly increasing array ; If the strictly increasing condition is violated , then break ; Stores the value of i , which is a potential peak index ; Second traversal , for strictly decreasing array ; When the strictly decreasing condition is violated , then break ; If i = N - 1 , it means that ans is the peak index ; Otherwise , peak index doesn 't exist ; Driver Code","#include <bits/stdc++.h>
using namespace std;
int peakIndex(int arr[], int N) {
  if (N < 3)
    return -1;
  int i = 0;
  while (i + 1 < N) {
    if (arr[i + 1] < arr[i] arr[i] == arr[i + 1])
      break;
    i++;
  }
  if (i == 0 i == N - 1)
    return -1;
  int ans = i;
  while (i < N - 1) {
    if (arr[i] < arr[i + 1] arr[i] == arr[i + 1])
      break;
    i++;
  }
  if (i == N - 1)
    return ans;
  return -1;
}
int main() {
  int arr[] = {0, 1, 0};
  int N = sizeof(arr) / sizeof(arr[0]);
  cout << peakIndex(arr, N) << ""\n"";
  return 0;
}",Find the peak index of a given array.
410,"Given an array A [ ] and a number x , check for pair in A [ ] with sum as x | Set 2 | C ++ program for the above approach ; Function to check if the array has 2 elements whose sum is equal to the given value ; Sort the array in increasing order ; Traverse the array , nums [ ] ; Store the required number to be found ; Perform binary search ; Store the mid value ; If nums [ mid ] is greater than x , then update high to mid - 1 ; If nums [ mid ] is less than x , then update low to mid + 1 ; Otherwise ; If mid is equal i , check mid - 1 and mid + 1 ; Otherwise , print the pair and return ; If no such pair is found , then print - 1 ; Driver Code ; Function Call","#include <bits/stdc++.h>
using namespace std;
void hasArrayTwoPairs(int nums[], int n, int target) {
  sort(nums, nums + n);
  for (int i = 0; i < n; i++) {
    int x = target - nums[i];
    int low = 0, high = n - 1;
    while (low <= high) {
      int mid = low + ((high - low) / 2);
      if (nums[mid] > x) {
        high = mid - 1;
      } else if (nums[mid] < x) {
        low = mid + 1;
      } else {
        if (mid == i) {
          if ((mid - 1 >= 0) && nums[mid - 1] == x) {
            cout << nums[i] << "", "";
            cout << nums[mid - 1];
            return;
          }
          if ((mid + 1 < n) && nums[mid + 1] == x) {
            cout << nums[i] << "", "";
            cout << nums[mid + 1];
            return;
          }
          break;
        } else {
          cout << nums[i] << "", "";
          cout << nums[mid];
          return;
        }
      }
    }
  }
  cout << -1;
}
int main() {
  int A[] = {0, -1, 2, -3, 1};
  int X = -2;
  int N = sizeof(A) / sizeof(A[0]);
  hasArrayTwoPairs(A, N, X);
  return 0;
}","Given an array A [ ] and a number x , check for pair in A [ ] with sum as x."
411,Smallest divisor of N closest to X | C ++ program for the above approach ; Function to find the divisor of N closest to the target ; Iterate till square root of N ; Check if divisors are equal ; Check if i is the closest ; Check if i is the closest ; Check if n / i is the closest ; Print the closest value ; Driver Code ; Given N & X ; Function Call,"#include <bits/stdc++.h>
using namespace std;
int findClosest(int N, int target) {
  int closest = -1;
  int diff = INT_MAX;
  for (int i = 1; i <= sqrt(N); i++) {
    if (N % i == 0) {
      if (N / i == i) {
        if (abs(target - i) < diff) {
          diff = abs(target - i);
          closest = i;
        }
      } else {
        if (abs(target - i) < diff) {
          diff = abs(target - i);
          closest = i;
        }
        if (abs(target - N / i) < diff) {
          diff = abs(target - N / i);
          closest = N / i;
        }
      }
    }
  }
  cout << closest;
}
int main() {
  int N = 16, X = 5;
  findClosest(N, X);
  return 0;
}",Smallest divisor of N closest to X.
412,"Find a pair ( a , b ) such that Aa + Bb = N | C ++ program for the above approach ; Function to calculate the minimum power of A and B greater than N ; Stores the power of A which is greater than N ; Increment count by 1 ; Divide N by A ; Function to find a pair ( a , b ) such that A ^ a + B ^ b = N ; Calculate the minimum power of A greater than N ; Calculate the minimum power of B greater than N ; Make copy of A and B ; Traverse for every pair ( i , j ) ; Check if B ^ j + A ^ i = N To overcome the overflow problem use B = N - A rather than B + A = N ; Increment power B by 1 ; Increment power A by 1 ; Finally print - 1 if no pair is found ; Driver Code ; Given A , B and N ; Function Call","#include <bits/stdc++.h>
using namespace std;
int power(long long int A, long long int N) {
  int count = 0;
  if (A == 1)
    return 0;
  while (N) {
    count++;
    N /= A;
  }
  return count;
}
void Pairs(long long int N, long long int A, long long int B) {
  int powerA, powerB;
  powerA = power(A, N);
  powerB = power(B, N);
  long long int intialB = B, intialA = A;
  A = 1;
  for (int i = 0; i <= powerA; i++) {
    B = 1;
    for (int j = 0; j <= powerB; j++) {
      if (B == N - A) {
        cout << i << "" "" << j << endl;
        return;
      }
      B *= intialB;
    }
    A *= intialA;
  }
  cout << -1 << endl;
  return;
}
int main() {
  long long int N = 106, A = 3, B = 5;
  Pairs(N, A, B);
  return 0;
}","Find a pair ( a , b ) such that Aa + Bb = N."
413,"Count numbers from a given range that are not divisible by any of the array elements | C ++ program for the above approach ; Function to find the non - multiples till k ; Stores all unique multiples ; Iterate the array ; For finding duplicates only once ; Inserting all multiples into the set ; Returning only the count of numbers that are not divisible by any of the array elements ; Function to count the total values in the range [ L , R ] ; Count all values in the range using exclusion principle ; Driver Code ; Function Call","#include <bits/stdc++.h>
using namespace std;
int findNonMultiples(int arr[], int n, int k) {
  set<int> multiples;
  for (int i = 0; i < n; ++i) {
    if (multiples.find(arr[i]) == multiples.end()) {
      for (int j = 1; j <= k / arr[i]; j++) {
        multiples.insert(arr[i] * j);
      }
    }
  }
  return k - multiples.size();
}
int countValues(int arr[], int N, int L, int R) {
  return findNonMultiples(arr, N, R) - findNonMultiples(arr, N, L - 1);
}
int main() {
  int arr[] = {2, 3, 4, 5, 6};
  int N = sizeof(arr) / sizeof(arr[0]);
  int L = 1, R = 20;
  cout << countValues(arr, N, L, R);
  return 0;
}",Count numbers from a given range that are not divisible by any of the array elements.
414,Minimum number of coins to be collected per hour to empty N piles in at most H hours | C ++ program for the above approach ; Function to find the minimum number of coins to be collected per hour to empty N piles in H hours ; Stores the minimum coins to be removed per hour ; Find the maximum array element ; Perform Binary Search ; Store the mid value of the range in K ; Find the total time taken to empty N piles by removing K coins per hour ; If total time does not exceed H ; Otherwise ; Print the required result ; Driver Code ; Function Call,"#include <bits/stdc++.h>
using namespace std;
int minCollectingSpeed(vector<int> &piles, int H) {
  int ans = -1;
  int low = 1, high;
  high = *max_element(piles.begin(), piles.end());
  while (low <= high) {
    int K = low + (high - low) / 2;
    int time = 0;
    for (int ai : piles) {
      time += (ai + K - 1) / K;
    }
    if (time <= H) {
      ans = K;
      high = K - 1;
    } else {
      low = K + 1;
    }
  }
  cout << ans;
}
int main() {
  vector<int> arr = {3, 6, 7, 11};
  int H = 8;
  minCollectingSpeed(arr, H);
  return 0;
}",Minimum number of coins to be collected per hour to empty N piles in at most H hours.
415,Count distinct pairs with given sum | C ++ program to implement the above approach ; Function to count distinct pairs in array whose sum equal to K ; Stores count of distinct pairs whose sum equal to K ; Sort the array ; Stores index of the left pointer ; Stores index of the right pointer ; Calculate count of distinct pairs whose sum equal to K ; If sum of current pair is equal to K ; Remove consecutive duplicate array elements ; Update i ; Remove consecutive duplicate array elements ; Update j ; Update cntPairs ; Update i ; Update j ; if sum of current pair less than K ; Update i ; Update j ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
int cntDisPairs(int arr[], int N, int K) {
  int cntPairs = 0;
  sort(arr, arr + N);
  int i = 0;
  int j = N - 1;
  while (i < j) {
    if (arr[i] + arr[j] == K) {
      while (i < j && arr[i] == arr[i + 1]) {
        i++;
      }
      while (i < j && arr[j] == arr[j - 1]) {
        j--;
      }
      cntPairs += 1;
      i++;
      j--;
    } else if (arr[i] + arr[j] < K) {
      i++;
    } else {
      j--;
    }
  }
  return cntPairs;
}
int main() {
  int arr[] = {5, 6, 5, 7, 7, 8};
  int N = sizeof(arr) / sizeof(arr[0]);
  int K = 13;
  cout << cntDisPairs(arr, N, K);
}",Count distinct pairs with given sum.
416,Count distinct pairs with given sum | C ++ program to implement the above approach ; Function to count distinct pairs in array whose sum equal to K ; Stores count of distinct pairs whose sum equal to K ; Store frequency of each distinct element of the array ; Update frequency of arr [ i ] ; Traverse the map ; Stores key value of the map ; If i is the half of K ; If frequency of i greater than 1 ; Update cntPairs ; Update cntPairs ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
int cntDisPairs(int arr[], int N, int K) {
  int cntPairs = 0;
  unordered_map<int, int> cntFre;
  for (int i = 0; i < N; i++) {
    cntFre[arr[i]]++;
  }
  for (auto it : cntFre) {
    int i = it.first;
    if (2 * i == K) {
      if (cntFre[i] > 1)
        cntPairs += 2;
    } else {
      if (cntFre[K - i]) {
        cntPairs += 1;
      }
    }
  }
  cntPairs = cntPairs / 2;
  return cntPairs;
}
int main() {
  int arr[] = {5, 6, 5, 7, 7, 8};
  int N = sizeof(arr) / sizeof(arr[0]);
  int K = 13;
  cout << cntDisPairs(arr, N, K);
}",Count distinct pairs with given sum.
417,"Queries to find longest subsequence having no similar adjacent elements with updates | C ++ program for the above approach ; Function to find the length of the longest subsequence such that no two adjacent elements are equal ; Replace element at index x with y ; Since x is 1 - indexed , decrement x by 1 ; Keep track of number of elements in subsequence ; If previous element is not same as current element ; Print the desired count ; Driver Code ; Function Call","#include <bits/stdc++.h>
using namespace std;
void longestSubsequence(int N, int Q, int arr[], int Queries[][2]) {
  for (int i = 0; i < Q; i++) {
    int x = Queries[i][0];
    int y = Queries[i][1];
    arr[x - 1] = y;
    int count = 1;
    for (int j = 1; j < N; j++) {
      if (arr[j] != arr[j - 1]) {
        count += 1;
      }
    }
    cout << count << ' ';
  }
}
int main() {
  int arr[] = {1, 1, 2, 5, 2};
  int N = sizeof(arr) / sizeof(arr[0]);
  int Q = 2;
  int Queries[Q][2] = {{1, 3}, {4, 2}};
  longestSubsequence(N, Q, arr, Queries);
  return 0;
}",Queries to find longest subsequence having no similar adjacent elements with updates.
418,Queries to find longest subsequence having no similar adjacent elements with updates | C ++ program for the above approach ; Traverse the array arr [ ] ; If previous element is not same as current element ; Traverse the queries ; Replace element at index x with y ; Recalculate for index x ; Subtract contribution of element at index x ; Add contribution of y ; Recalculate for index x + 1 ; Subtract contribution of element at index x + 1 ; Adds contribution of y ; Replace the element ; Driver Code ; Function Call,"#include <bits/stdc++.h>
using namespace std;
void longestSubsequence(int N, int Q, int arr[], int Queries[][2]) {
  int count = 1;
  for (int i = 1; i < N; i++) {
    if (arr[i] != arr[i - 1]) {
      count += 1;
    }
  }
  for (int i = 0; i < Q; i++) {
    int x = Queries[i][0];
    int y = Queries[i][1];
    if (x > 1) {
      if (arr[x - 1] != arr[x - 2]) {
        count -= 1;
      }
      if (arr[x - 2] != y) {
        count += 1;
      }
    }
    if (x < N) {
      if (arr[x] != arr[x - 1]) {
        count -= 1;
      }
      if (y != arr[x]) {
        count += 1;
      }
    }
    cout << count << ' ';
    arr[x - 1] = y;
  }
}
int main() {
  int arr[] = {1, 1, 2, 5, 2};
  int N = sizeof(arr) / sizeof(arr[0]);
  int Q = 2;
  int Queries[Q][2] = {{1, 3}, {4, 2}};
  longestSubsequence(N, Q, arr, Queries);
  return 0;
}",Queries to find longest subsequence having no similar adjacent elements with updates.
419,Sum of absolute differences of indices of occurrences of each array element | C ++ program for the above approach ; Function to find sum of differences of indices of occurrences of each unique array element ; Stores indices of each array element ; Store the indices ; Stores the sums ; Traverse the array ; Find sum for each element ; Iterate over the Map ; Calculate sum of occurrences of arr [ i ] ; Store sum for current element ; Print answer for each element ; Driver Code ; Given array ; Given size ; Function call,"#include <bits/stdc++.h>
using namespace std;
void sum(int arr[], int n) {
  map<int, vector<int>> mp;
  for (int i = 0; i < n; i++) {
    mp[arr[i]].push_back(i);
  }
  int ans[n];
  for (int i = 0; i < n; i++) {
    int sum = 0;
    for (auto it : mp[arr[i]]) {
      sum += abs(it - i);
    }
    ans[i] = sum;
  }
  for (int i = 0; i < n; i++) {
    cout << ans[i] << "" "";
  }
  return;
}
int main() {
  int arr[] = {1, 3, 1, 1, 2};
  int n = sizeof(arr) / sizeof(arr[0]);
  sum(arr, n);
  return 0;
}",Sum of absolute differences of indices of occurrences of each array element.
420,Convert vowels into upper case character in a given string | C ++ program to implement the above approach ; Function to convert vowels into uppercase ; Stores the length of str ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
string conVowUpp(string &str) {
  int N = str.length();
  for (int i = 0; i < N; i++) {
    if (str[i] == 'a' str[i] == 'e' str[i] == 'i' str[i] == 'o' str[i] == 'u') {
      str[i] = str[i] - 'a' + 'A';
    }
  }
  return str;
}
int main() {
  string str = ""eutopia"";
  cout << conVowUpp(str);
}",Convert vowels into upper case character in a given string.
421,"Maximize number of days for which P chocolates can be distributed consecutively to N people | C ++ program to implement the above approach ; Stores the frequency of each type of chocolate ; Function to check if chocolates can be eaten for ' mid ' no . of days ; If cnt exceeds N , return true ; Function to find the maximum number of days for which chocolates can be eaten ; Store the frequency of each type of chocolate ; Initialize start and end with 0 and P respectively ; Calculate mid ; Check if chocolates can be distributed for mid days ; Check if chocolates can be distributed for more than mid consecutive days ; Driver code ; Function call","#include <bits/stdc++.h>
using namespace std;
map<int, int> mp;
int N, P;
bool helper(int mid) {
  int cnt = 0;
  for (auto i : mp) {
    int temp = i.second;
    while (temp >= mid) {
      temp -= mid;
      cnt++;
    }
  }
  return cnt >= N;
}
int findMaximumDays(int arr[]) {
  for (int i = 0; i < P; i++) {
    mp[arr[i]]++;
  }
  int start = 0, end = P, ans = 0;
  while (start <= end) {
    int mid = start + ((end - start) / 2);
    if (mid != 0 and helper(mid)) {
      ans = mid;
      start = mid + 1;
    } else if (mid == 0) {
      start = mid + 1;
    } else {
      end = mid - 1;
    }
  }
  return ans;
}
int main() {
  N = 3, P = 10;
  int arr[] = {1, 2, 2, 1, 1, 3, 3, 3, 2, 4};
  cout << findMaximumDays(arr);
  return 0;
}",Maximize number of days for which P chocolates can be distributed consecutively to N people.
422,Count subarrays having sum modulo K same as the length of the subarray | C ++ program of the above approach ; Function that counts the subarrays having sum modulo k equal to the length of subarray ; Stores the count of subarrays ; Stores prefix sum of the array ; Calculate prefix sum array ; Generate all the subarrays ; Check if this subarray is a valid subarray or not ; Total count of subarrays ; Driver Code ; Given arr [ ] ; Size of the array ; Given K ; Function Call,"#include <bits/stdc++.h>
using namespace std;
long long int countSubarrays(int a[], int n, int k) {
  int ans = 0;
  vector<int> pref;
  pref.push_back(0);
  for (int i = 0; i < n; i++)
    pref.push_back((a[i] + pref[i]) % k);
  for (int i = 1; i <= n; i++) {
    for (int j = i; j <= n; j++) {
      if ((pref[j] - pref[i - 1] + k) % k == j - i + 1) {
        ans++;
      }
    }
  }
  cout << ans << ' ';
}
int main() {
  int arr[] = {2, 3, 5, 3, 1, 5};
  int N = sizeof(arr) / sizeof(arr[0]);
  int K = 4;
  countSubarrays(arr, N, K);
  return 0;
}",Count subarrays having sum modulo K same as the length of the subarray.
423,Count subarrays having sum modulo K same as the length of the subarray | C ++ program of the above approach ; Function that counts the subarrays s . t . sum of elements in the subarray modulo k is equal to size of subarray ; Stores the count of ( pref [ i ] - i ) % k ; Stores the count of subarray ; Stores prefix sum of the array ; Find prefix sum array ; Base Condition ; Remove the index at present after K indices from the current index ; Update the answer for subarrays ending at the i - th index ; Add the calculated value of current index to count ; Print the count of subarrays ; Driver Code ; Given arr [ ] ; Size of the array ; Given K ; Function Call,"#include <bits/stdc++.h>
using namespace std;
long long int countSubarrays(int a[], int n, int k) {
  unordered_map<int, int> cnt;
  long long int ans = 0;
  vector<int> pref;
  pref.push_back(0);
  for (int i = 0; i < n; i++)
    pref.push_back((a[i] + pref[i]) % k);
  cnt[0] = 1;
  for (int i = 1; i <= n; i++) {
    int remIdx = i - k;
    if (remIdx >= 0) {
      cnt[(pref[remIdx] - remIdx % k + k) % k]--;
    }
    ans += cnt[(pref[i] - i % k + k) % k];
    cnt[(pref[i] - i % k + k) % k]++;
  }
  cout << ans << ' ';
}
int main() {
  int arr[] = {2, 3, 5, 3, 1, 5};
  int N = sizeof(arr) / sizeof(arr[0]);
  int K = 4;
  countSubarrays(arr, N, K);
  return 0;
}",Count subarrays having sum modulo K same as the length of the subarray.
424,Check if all substrings of length K of a Binary String has equal count of 0 s and 1 s | C ++ program for the above approach ; Function to check if the substring of length K has equal 0 and 1 ; Traverse the string ; Check if every K - th character is the same or not ; Traverse substring of length K ; If current character is 0 ; Increment count ; Otherwise ; Decrement count ; Check for equal 0 s and 1 s ; Driver code,"#include <iostream>
using namespace std;
int check(string &s, int k) {
  int n = s.size();
  for (int i = 0; i < k; i++) {
    for (int j = i; j < n; j += k) {
      if (s[i] != s[j])
        return false;
    }
  }
  int c = 0;
  for (int i = 0; i < k; i++) {
    if (s[i] == '0')
      c++;
    else
      c--;
  }
  if (c == 0)
    return true;
  else
    return false;
}
int main() {
  string s = ""101010"";
  int k = 2;
  if (check(s, k))
    cout << ""Yes"" << endl;
  else
    cout << ""No"" << endl;
  return 0;
}",Check if all substrings of length K of a Binary String has equal count of 0 s and 1 s.
425,Check if characters of a given string can be used to form any N equal strings | C ++ program for the above approach ; Function to check if the freq of any character is divisible by N ; Stores the frequency of characters ; If frequency of a character is not divisible by n ; If no character has frequency at least N ; Driver Code ; Function Call,"#include <bits/stdc++.h>
using namespace std;
bool isSame(string str, int n) {
  map<int, int> mp;
  for (int i = 0; i < str.length(); i++) {
    mp[str[i] - 'a']++;
  }
  for (auto it : mp) {
    if ((it.second) >= n) {
      return true;
    }
  }
  return false;
}
int main() {
  string str = ""ccabcba"";
  int n = 4;
  if (isSame(str, n)) {
    cout << ""Yes"";
  } else {
    cout << ""No"";
  }
}",Check if characters of a given string can be used to form any N equal strings.
426,"Find the root of given non decreasing function between A and B | C ++ program for the above approach ; Given function ; Function to find the root of the given non - decreasing Function ; To get the minimum possible answer for the root ; Find mid ; Search in [ low , x ] ; Search in [ x , high ] ; Return the required answer ; Function to find the roots of the given equation within range [ a , b ] ; If root doesn 't exists ; Else find the root upto 4 decimal places ; Driver Code ; Given range ; Function Call","#include <bits/stdc++.h>
using namespace std;
#defineeps1e - 6 double func(double a, double b, double c, double x) {
  return a * x * x + b * x + c;
}
double findRoot(double a, double b, double c, double low, double high) {
  double x;
  while (fabs(high - low) > eps) {
    x = (low + high) / 2;
    if (func(a, b, c, low) * func(a, b, c, x) <= 0) {
      high = x;
    } else {
      low = x;
    }
  }
  return x;
}
void solve(double a, double b, double c, double A, double B) {
  if (func(a, b, c, A) * func(a, b, c, B) > 0) {
    cout << ""No solution"";
  } else {
    cout << fixed << setprecision(4) << findRoot(a, b, c, A, B);
  }
}
int main() {
  double a = 2, b = -3, c = -2, A = 0, B = 3;
  solve(a, b, c, A, B);
  return 0;
}",Find the root of given non decreasing function between A and B.
427,Median of difference of all pairs from an Array | C ++ Program to implement the above approach ; Function check if mid can be median index of the difference array ; Size of the array ; Total possible no of pair possible ; The index of the element in the difference of all pairs from the array ; Count the number of pairs having difference <= mid ; If the difference between end and first element is less then or equal to mid ; Checking for the no of element less than or equal to mid is greater than median or not ; Function to calculate the median of differences of all pairs from the array ; Size of the array ; Initialising the low and high ; Binary search ; Calculate mid ; If mid can be the median of the array ; Returning the median of the differences of pairs from the array ; Driver Code,"#include <bits/stdc++.h>
#definelllonglong
using namespace std;
bool possible(ll mid, vector<ll> &a) {
  ll n = a.size();
  ll total = (n * (n - 1)) / 2;
  ll need = (total + 1) / 2;
  ll count = 0;
  ll start = 0, end = 1;
  while (end < n) {
    if (a[end] - a[start] <= mid) {
      end++;
    } else {
      count += (end - start - 1);
      start++;
    }
  }
  if (end == n && start < end && a[end - 1] - a[start] <= mid) {
    ll t = end - start - 1;
    count += (t * (t + 1) / 2);
  }
  if (count >= need)
    return true;
  else
    return false;
}
ll findMedian(vector<ll> &a) {
  ll n = a.size();
  ll low = 0, high = a[n - 1] - a[0];
  while (low <= high) {
    ll mid = (low + high) / 2;
    if (possible(mid, a))
      high = mid - 1;
    else
      low = mid + 1;
  }
  return high + 1;
}
int main() {
  vector<ll> a = {1, 7, 5, 2};
  sort(a.begin(), a.end());
  cout << findMedian(a) << endl;
}",Median of difference of all pairs from an Array.
428,Print all Strings from array A [ ] having all strings from array B [ ] as subsequence | C ++ Program to implement the above approach ; Function to find strings from A [ ] having all strings in B [ ] as subsequence ; Calculate respective sizes ; Stores the answer ; Stores the frequency of each character in strings of A [ ] ; Compute the frequencies of characters of all strings ; Stores the frequency of each character in strings of B [ ] each character of a string in B [ ] ; If the frequency of a character in B [ ] exceeds that in A [ ] ; A string exists in B [ ] which is not a proper subset of A [ i ] ; If all strings in B [ ] are proper subset of A [ ] ; Push the string in resultant vector ; If any string is found ; Print those strings ; Otherwise ; Driver code,"#include <bits/stdc++.h>
using namespace std;
void UniversalSubset(vector<string> A, vector<string> B) {
  int n1 = A.size();
  int n2 = B.size();
  vector<string> res;
  int A_fre[n1][26];
  for (int i = 0; i < n1; i++) {
    for (int j = 0; j < 26; j++)
      A_fre[i][j] = 0;
  }
  for (int i = 0; i < n1; i++) {
    for (int j = 0; j < A[i].size(); j++) {
      A_fre[i][A[i][j] - 'a']++;
    }
  }
  int B_fre[26] = {0};
  for (int i = 0; i < n2; i++) {
    int arr[26] = {0};
    for (int j = 0; j < B[i].size(); j++) {
      arr[B[i][j] - 'a']++;
      B_fre[B[i][j] - 'a'] = max(B_fre[B[i][j] - 'a'], arr[B[i][j] - 'a']);
    }
  }
  for (int i = 0; i < n1; i++) {
    int flag = 0;
    for (int j = 0; j < 26; j++) {
      if (A_fre[i][j] < B_fre[j]) {
        flag = 1;
        break;
      }
    }
    if (flag == 0)
      res.push_back(A[i]);
  }
  if (res.size()) {
    for (int i = 0; i < res.size(); i++) {
      for (int j = 0; j < res[i].size(); j++)
        cout << res[i][j];
    }
    cout << "" "";
  } else
    cout << ""-1"";
}
int main() {
  vector<string> A = {""geeksforgeeks"", ""topcoder"", ""leetcode""};
  vector<string> B = {""geek"", ""ee""};
  UniversalSubset(A, B);
  return 0;
}",Print all Strings from array A [ ] having all strings from array B [ ] as subsequence.
429,Closest pair in an Array such that one number is multiple of the other | C ++ program for the above approach ; Function to find the minimum distance pair where one is the multiple of the other ; Initialize the variables ; Iterate for all the elements ; Loop to make pairs ; Check for minimum distance ; Check if one is a multiple of other ; Update the distance ; Store indexes ; If no such pair exists ; Print the answer ; Driver Code ; Given array arr [ ] ; Function Call,"#include <bits/stdc++.h>
using namespace std;
void findPair(int a[], int n) {
  int min_dist = INT_MAX;
  int index_a = -1, index_b = -1;
  for (int i = 0; i < n; i++) {
    for (int j = i + 1; j < n; j++) {
      if (j - i < min_dist) {
        if (a[i] % a[j] == 0 a[j] % a[i] == 0) {
          min_dist = j - i;
          index_a = i;
          index_b = j;
        }
      }
    }
  }
  if (index_a == -1) {
    cout << (""-1"");
  } else {
    cout << ""("" << a[index_a] << "", "" << a[index_b] << "")"";
  }
}
int main() {
  int a[] = {2, 3, 4, 5, 6};
  int n = sizeof(a) / sizeof(int);
  findPair(a, n);
}",Closest pair in an Array such that one number is multiple of the other.
430,"Print all numbers in given range having digits in strictly increasing order | C ++ program for the above approach ; Function to print all numbers in the range [ L , R ] having digits in strictly increasing order ; Iterate over the range ; Iterate over the digits ; Check if the current digit is >= the previous digit ; If the digits are in ascending order ; Driver Code ; Given range L and R ; Function Call","#include <bits/stdc++.h>
using namespace std;
void printNum(int L, int R) {
  for (int i = L; i <= R; i++) {
    int temp = i;
    int c = 10;
    int flag = 0;
    while (temp > 0) {
      if (temp % 10 >= c) {
        flag = 1;
        break;
      }
      c = temp % 10;
      temp /= 10;
    }
    if (flag == 0)
      cout << i << "" "";
  }
}
int main() {
  int L = 10, R = 15;
  printNum(L, R);
  return 0;
}",Print all numbers in given range having digits in strictly increasing order.
431,"Find the missing number in unordered Arithmetic Progression | C ++ program for the above approach ; Function to find the missing element ; Fix left and right boundary for binary search ; Find index of middle element ; Check if the element just after the middle element is missing ; Check if the element just before mid is missing ; Check if the elements till mid follow the AP , then recur for right half ; Else recur for left half ; Function to find the missing element in AP series ; Sort the array arr [ ] ; Calculate Common Difference ; Binary search for the missing ; Driver Code ; Given array arr [ ] ; Function Call","#include <bits/stdc++.h>
using namespace std;
int findMissing(int arr[], int left, int right, int diff) {
  if (right <= left)
    return INT_MAX;
  int mid = left + (right - left) / 2;
  if (arr[mid + 1] - arr[mid] != diff)
    return (arr[mid] + diff);
  if (mid > 0 && arr[mid] - arr[mid - 1] != diff)
    return (arr[mid - 1] + diff);
  if (arr[mid] == arr[0] + mid * diff)
    return findMissing(arr, mid + 1, right, diff);
  return findMissing(arr, left, mid - 1, diff);
}
int missingElement(int arr[], int n) {
  sort(arr, arr + n);
  int diff = (arr[n - 1] - arr[0]) / n;
  return findMissing(arr, 0, n - 1, diff);
}
int main() {
  int arr[] = {2, 8, 6, 10};
  int n = sizeof(arr) / sizeof(arr[0]);
  cout << missingElement(arr, n);
  return 0;
}",Find the missing number in unordered Arithmetic Progression.
432,Floor value Kth root of a number using Recursive Binary Search | C ++ program for the above approach ; Function to calculate x raised to the power y in O ( logn ) ; Function to find the Kth root of the number N using BS ; If the range is still valid ; Find the mid - value of range ; Base Case ; Condition to check if the left search space is useless ; Driver Code ; Given N and K ; Function Call,"#include <bits/stdc++.h>
using namespace std;
int power(int x, unsigned int y) {
  int temp;
  if (y == 0)
    return 1;
  temp = power(x, y / 2);
  if (y % 2 == 0)
    return temp * temp;
  else
    return x * temp * temp;
}
int nthRootSearch(int low, int high, int N, int K) {
  if (low <= high) {
    int mid = (low + high) / 2;
    if ((power(mid, K) <= N) && (power(mid + 1, K) > N)) {
      return mid;
    } else if (power(mid, K) < N) {
      return nthRootSearch(mid + 1, high, N, K);
    } else {
      return nthRootSearch(low, mid - 1, N, K);
    }
  }
  return low;
}
int main() {
  int N = 16, K = 4;
  cout << nthRootSearch(0, N, N, K) << endl;
  return 0;
}",Floor value Kth root of a number using Recursive Binary Search.
433,Count of subsets having sum of min and max element less than K | C ++ program to print count of subsets S such that min ( S ) + max ( S ) < K ; Function that return the count of subset such that min ( S ) + max ( S ) < K ; Sorting the array ; ans stores total number of subsets ; add all possible subsets between i and j ; Decrease the sum ; Driver code,"#include <bits/stdc++.h>
using namespace std;
int get_subset_count(int arr[], int K, int N) {
  sort(arr, arr + N);
  int left, right;
  left = 0;
  right = N - 1;
  int ans = 0;
  while (left <= right) {
    if (arr[left] + arr[right] < K) {
      ans += 1 << (right - left);
      left++;
    } else {
      right--;
    }
  }
  return ans;
}
int main() {
  int arr[] = {2, 4, 5, 7};
  int K = 8;
  int N = sizeof(arr) / sizeof(arr[0]);
  cout << get_subset_count(arr, K, N);
  return 0;
}",Count of subsets having sum of min and max element less than K.
434,Minimize the maximum difference of adjacent elements after at most K insertions | C ++ Program to find the minimum of maximum differerence between adjacent elements after at most K insertions ; Calculate the maximum adjacent difference ; If the maximum adjacent difference is already zero ; best and worst specifies range of the maximum adjacent difference ; To store the no of insertions required for respective values of mid ; If the number of insertions required exceeds K ; Otherwise ; Driver code,"#include <bits/stdc++.h>
using namespace std;
int minMaxDiff(int arr[], int n, int k) {
  int max_adj_dif = INT_MIN;
  for (int i = 0; i < n - 1; i++)
    max_adj_dif = max(max_adj_dif, abs(arr[i] - arr[i + 1]));
  if (max_adj_dif == 0)
    return 0;
  int best = 1;
  int worst = max_adj_dif;
  int mid, required;
  while (best < worst) {
    mid = (best + worst) / 2;
    required = 0;
    for (int i = 0; i < n - 1; i++) {
      required += (abs(arr[i] - arr[i + 1]) - 1) / mid;
    }
    if (required > k)
      best = mid + 1;
    else
      worst = mid;
  }
  return worst;
}
int main() {
  int arr[] = {3, 12, 25, 50};
  int n = sizeof(arr) / sizeof(arr[0]);
  int k = 7;
  cout << minMaxDiff(arr, n, k);
  return 0;
}",Minimize the maximum difference of adjacent elements after at most K insertions.
435,"Check if minimum element in array is less than or equals half of every other element | C ++ implementation to Check if the minimum element in the array is greater than or equal to half of every other elements ; Function to Check if the minimum element in the array is greater than or equal to half of every other element ; Initialise the variables to store smallest and second smallest ; Check if current element is smaller than smallest , the current smallest will become secondSmallest and current element will be the new smallest ; Check if current element is smaller than secondSmallest simply update the latter ; Driver code","#include <bits/stdc++.h>
using namespace std;
void checkMin(int arr[], int len) {
  int smallest = INT_MAX, secondSmallest = INT_MAX;
  for (int i = 0; i < len; i++) {
    if (arr[i] < smallest) {
      secondSmallest = smallest;
      smallest = arr[i];
    } else if (arr[i] < secondSmallest) {
      secondSmallest = arr[i];
    }
  }
  if (2 * smallest <= secondSmallest)
    cout << ""Yes"";
  else
    cout << ""No"";
}
int main() {
  int arr[] = {2, 3, 4, 5};
  int len = sizeof(arr) / sizeof(arr[0]);
  checkMin(arr, len);
}",Check if minimum element in array is less than or equals half of every other element.
436,Largest and smallest Fibonacci numbers in an Array | C ++ program to find minimum and maximum fibonacci number in given array ; Function to create hash table to check Fibonacci numbers ; Insert initial two numbers in the hash table ; Sum of previous two numbers ; Update the variable each time ; Function to find minimum and maximum fibonacci number in given array ; Find maximum value in the array ; Creating a set containing all Fibonacci numbers up to maximum value in the array ; For storing the Minimum and Maximum Fibonacci number ; Check if current element is a fibonacci number ; Update the maximum and minimum accordingly ; Driver code,"#include <bits/stdc++.h>
using namespace std;
void createHash(set<int> &hash, int maxElement) {
  int prev = 0, curr = 1;
  hash.insert(prev);
  hash.insert(curr);
  while (curr <= maxElement) {
    int temp = curr + prev;
    hash.insert(temp);
    prev = curr;
    curr = temp;
  }
}
void fibonacci(int arr[], int n) {
  int max_val = *max_element(arr, arr + n);
  set<int> hash;
  createHash(hash, max_val);
  int minimum = INT_MAX;
  int maximum = INT_MIN;
  for (int i = 0; i < n; i++) {
    if (hash.find(arr[i]) != hash.end()) {
      minimum = min(minimum, arr[i]);
      maximum = max(maximum, arr[i]);
    }
  }
  cout << minimum << "", "" << maximum << endl;
}
int main() {
  int arr[] = {1, 2, 3, 4, 5, 6, 7};
  int n = sizeof(arr) / sizeof(arr[0]);
  fibonacci(arr, n);
  return 0;
}",Largest and smallest Fibonacci numbers in an Array.
437,Longest substring with K unique characters using Binary Search | C ++ implementation of the approach ; Function that returns true if there is a substring of length len with <= k unique characters ; Size of the string ; Map to store the characters and their frequency ; Update the map for the first substring ; Check for the rest of the substrings ; Add the new character ; Remove the first character of the previous window ; Update the map ; Function to return the length of the longest substring which has K unique characters ; Check if the complete string contains K unique characters ; Size of the string ; Apply binary search ; Driver code,"#include <bits/stdc++.h>
using namespace std;
bool isValidLen(string s, int len, int k) {
  int n = s.size();
  unordered_map<char, int> mp;
  int right = 0;
  while (right < len) {
    mp[s[right]]++;
    right++;
  }
  if (mp.size() <= k)
    return true;
  while (right < n) {
    mp[s[right]]++;
    mp[s[right - len]]--;
    if (mp[s[right - len]] == 0)
      mp.erase(s[right - len]);
    if (mp.size() <= k)
      return true;
    right++;
  }
  return mp.size() <= k;
}
int maxLenSubStr(string s, int k) {
  set<char> uni;
  for (auto x : s)
    uni.insert(x);
  if (uni.size() < k)
    return -1;
  int n = s.size();
  int lo = -1, hi = n + 1;
  while (hi - lo > 1) {
    int mid = lo + hi >> 1;
    if (isValidLen(s, mid, k))
      lo = mid;
    else
      hi = mid;
  }
  return lo;
}
int main() {
  string s = ""aabacbebebe"";
  int k = 3;
  cout << maxLenSubStr(s, k);
  return 0;
}",Longest substring with K unique characters using Binary Search.
438,Largest area square in an array when elements can be shuffled | C ++ implementation of the approach ; Function that returns true if it is possible to make a square with side equal to l ; To store the count of elements greater than or equal to l ; Increment the count ; If the count becomes greater than or equal to l ; Function to return the maximum area of the square that can be obtained ; If square is possible with side length m ; Try to find a square with smaller side length ; Return the area ; Driver code,"#include <bits/stdc++.h>
using namespace std;
bool isSquarePossible(int arr[], int n, int l) {
  int cnt = 0;
  for (int i = 0; i < n; i++) {
    if (arr[i] >= l)
      cnt++;
    if (cnt >= l)
      return true;
  }
  return false;
}
int maxArea(int arr[], int n) {
  int l = 0, r = n;
  int len = 0;
  while (l <= r) {
    int m = l + ((r - l) / 2);
    if (isSquarePossible(arr, n, m)) {
      len = m;
      l = m + 1;
    } else
      r = m - 1;
  }
  return (len * len);
}
int main() {
  int arr[] = {1, 3, 4, 5, 5};
  int n = sizeof(arr) / sizeof(int);
  cout << maxArea(arr, n);
  return 0;
}",Largest area square in an array when elements can be shuffled.
439,Check duplicates in a stream of strings | C ++ implementation of the approach ; Function to insert the names and check whether they appear for the first time ; To store the names of the employees ; If current name is appearing for the first time ; Driver code,"#include <bits/stdc++.h>
using namespace std;
void insertNames(string arr[], int n) {
  unordered_set<string> set;
  for (int i = 0; i < n; i++) {
    if (set.find(arr[i]) == set.end()) {
      cout << ""No\n"";
      set.insert(arr[i]);
    } else {
      cout << ""Yes\n"";
    }
  }
}
int main() {
  string arr[] = {""geeks"", ""for"", ""geeks""};
  int n = sizeof(arr) / sizeof(string);
  insertNames(arr, n);
  return 0;
}",Check duplicates in a stream of strings.
440,Count the triplets such that A [ i ] < B [ j ] < C [ k ] | C ++ implementation of the approach ; Function to return the count of elements in arr [ ] which are less than the given key ; Modified binary search ; Function to return the count of elements in arr [ ] which are greater than the given key ; Modified binary search ; Function to return the count of the required triplets ; Sort all three arrays ; Iterate for all the elements of array B ; Count of elements in A [ ] which are less than the chosen element from B [ ] ; Count of elements in C [ ] which are greater than the chosen element from B [ ] ; Update the count ; Driver code,"#include <bits/stdc++.h>
using namespace std;
int countLessThan(int arr[], int n, int key) {
  int l = 0, r = n - 1;
  int index = -1;
  while (l <= r) {
    int m = (l + r) / 2;
    if (arr[m] < key) {
      l = m + 1;
      index = m;
    } else {
      r = m - 1;
    }
  }
  return (index + 1);
}
int countGreaterThan(int arr[], int n, int key) {
  int l = 0, r = n - 1;
  int index = -1;
  while (l <= r) {
    int m = (l + r) / 2;
    if (arr[m] <= key) {
      l = m + 1;
    } else {
      r = m - 1;
      index = m;
    }
  }
  if (index == -1)
    return 0;
  return (n - index);
}
int countTriplets(int n, int *a, int *b, int *c) {
  sort(a, a + n);
  sort(b, b + n);
  sort(c, c + n);
  int count = 0;
  for (int i = 0; i < n; ++i) {
    int current = b[i];
    int a_index = -1, c_index = -1;
    int low = countLessThan(a, n, current);
    int high = countGreaterThan(c, n, current);
    count += (low * high);
  }
  return count;
}
int main() {
  int a[] = {1, 5};
  int b[] = {2, 4};
  int c[] = {3, 6};
  int size = sizeof(a) / sizeof(a[0]);
  cout << countTriplets(size, a, b, c);
  return 0;
}",Count the triplets such that A [ i ] < B [ j ] < C [ k ].
441,Cost to Balance the parentheses | CPP code to calculate the minimum cost to make the given parentheses balanced ; To store absolute count of balanced and unbalanced parenthesis ; o ( open bracket ) stores count of ' ( ' and c ( close bracket ) stores count of ' ) ' ; Driver code,"#include <bits/stdc++.h>
using namespace std;
int costToBalance(string s) {
  if (s.length() == 0)
    cout << 0 << endl;
  int ans = 0;
  int o = 0, c = 0;
  for (int i = 0; i < s.length(); i++) {
    if (s[i] == '(')
      o++;
    if (s[i] == ')')
      c++;
  }
  if (o != c)
    return -1;
  int a[s.size()];
  if (s[0] == '(')
    a[0] = 1;
  else
    a[0] = -1;
  if (a[0] < 0)
    ans += abs(a[0]);
  for (int i = 1; i < s.length(); i++) {
    if (s[i] == '(')
      a[i] = a[i - 1] + 1;
    else
      a[i] = a[i - 1] - 1;
    if (a[i] < 0)
      ans += abs(a[i]);
  }
  return ans;
}
int main() {
  string s;
  s = "")))((("";
  cout << costToBalance(s) << endl;
  s = ""))(("";
  cout << costToBalance(s) << endl;
  return 0;
}",Cost to Balance the parentheses.
442,Middle of three using minimum comparisons | CPP program to find middle of three distinct numbers ; Function to find the middle of three number ; x is positive if a is greater than b . x is negative if b is greater than a . ; Similar to x ; Similar to x and y . ; Checking if b is middle ( x and y both are positive ) ; Checking if c is middle ( x and z both are positive ) ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
int middleOfThree(int a, int b, int c) {
  int x = a - b;
  int y = b - c;
  int z = a - c;
  if (x * y > 0)
    return b;
  else if (x * z > 0)
    return c;
  else
    return a;
}
int main() {
  int a = 20, b = 30, c = 40;
  cout << middleOfThree(a, b, c);
  return 0;
}",Middle of three using minimum comparisons.
443,"Find four missing numbers in an array containing elements from 1 to N | CPP program to find missing 4 elements in an array of size N where elements are in range from 1 to N + 4. ; Finds missing 4 numbers in O ( N ) time and O ( 1 ) auxiliary space . ; To keep track of 4 possible numbers greater than length of input array In Java , helper is automatically initialized as 0. ; Traverse the input array and mark visited elements either by marking them as negative in arr [ ] or in helper [ ] . ; If element is smaller than or equal to length , mark its presence in arr [ ] ; Mark presence in helper [ ] ; Print all those elements whose presence is not marked . ; Driver code","#include <bits/stdc++.h>
using namespace std;
void missing4(int arr[], int n) {
  int helper[4];
  for (int i = 0; i < n; i++) {
    int temp = abs(arr[i]);
    if (temp <= n)
      arr[temp - 1] *= (-1);
    else if (temp > n) {
      if (temp % n != 0)
        helper[temp % n - 1] = -1;
      else
        helper[(temp % n) + n - 1] = -1;
    }
  }
  for (int i = 0; i < n; i++)
    if (arr[i] > 0)
      cout << (i + 1) << "" "";
  for (int i = 0; i < 4; i++)
    if (helper[i] >= 0)
      cout << (n + i + 1) << "" "";
  return;
}
int main() {
  int arr[] = {1, 7, 3, 12, 5, 10, 8, 4, 9};
  int n = sizeof(arr) / sizeof(arr[0]);
  missing4(arr, n);
  return 0;
}",Find four missing numbers in an array containing elements from 1 to N.
444,"Permutation present at the middle of lexicographic ordering of permutations of at most length N made up integers up to K | C ++ program for the above approach ; Function that finds the middle the lexicographical smallest sequence ; If K is even ; First element is K / 2 ; Remaining elements of the sequence are all integer K ; Stores the sequence when K is odd ; Iterate over the range [ 0 , N / 2 ] ; Check if the sequence ends with in 1 or not ; Remove the sequence ending in 1 ; If it doesn 't end in 1 ; Decrement by 1 ; Insert K to the sequence till its size is N ; Print the sequence stored in the vector ; Driver Code","#include <bits/stdc++.h>
using namespace std;
void lexiMiddleSmallest(int K, int N) {
  if (K % 2 == 0) {
    cout << K / 2 << "" "";
    for (int i = 0; i < N - 1; ++i) {
      cout << K << "" "";
    }
    cout << ""\n"";
    exit(0);
  }
  vector<int> a(N, (K + 1) / 2);
  for (int i = 0; i < N / 2; ++i) {
    if (a.back() == 1) {
      a.pop_back();
    } else {
      --a.back();
      while ((int)a.size() < N) {
        a.push_back(K);
      }
    }
  }
  for (auto i : a) {
    cout << i << "" "";
  }
  cout << ""\n"";
}
int main() {
  int K = 2, N = 4;
  lexiMiddleSmallest(K, N);
  return 0;
}",Permutation present at the middle of lexicographic ordering of permutations of at most length N made up integers up to K.
445,Remaining array element after repeated removal of the smallest element from pairs with absolute difference of 2 or 0 | C ++ program for the above approach ; Function to find the last remaining array element after repeatedly removing the smallest from pairs having absolute difference 2 or 0 ; Sort the given array in ascending order ; Traverse the array ; If difference between adjacent elements is not equal to 0 or 2 ; If operations can be performed ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
void findLastElement(int arr[], int N) {
  sort(arr, arr + N);
  int i = 0;
  for (i = 1; i < N; i++) {
    if (arr[i] - arr[i - 1] != 0 && arr[i] - arr[i - 1] != 2) {
      cout << ""-1"" << endl;
      return;
    }
  }
  cout << arr[N - 1] << endl;
}
int main() {
  int arr[] = {2, 4, 6, 8, 0, 8};
  int N = sizeof(arr) / sizeof(arr[0]);
  findLastElement(arr, N);
  return 0;
}",Remaining array element after repeated removal of the smallest element from pairs with absolute difference of 2 or 0.
446,Maximize count of subsets into which the given array can be split such that it satisfies the given condition | C ++ program for the above approach ; Function to count maximum subsets into which the given array can be split such that it satisfies the given condition ; Sort the array in decreasing order ; Stores count of subsets possible ; Stores count of elements in current subset ; Traverse the array arr [ ] ; Update size ; If product of the smallest element present in the current subset and size of current subset is >= K ; Update maxSub ; Update size ; Driver Code ; Given array ; Size of the array ; Given value of X,"#include <bits/stdc++.h>
using namespace std;
void maxDivisions(int arr[], int N, int X) {
  sort(arr, arr + N, greater<int>());
  int maxSub = 0;
  int size = 0;
  for (int i = 0; i < N; i++) {
    size++;
    if (arr[i] * size >= X) {
      maxSub++;
      size = 0;
    }
  }
  cout << maxSub << endl;
}
int main() {
  int arr[] = {1, 3, 3, 7};
  int N = sizeof(arr) / sizeof(arr[0]);
  int X = 3;
  maxDivisions(arr, N, X);
  return 0;
}",Maximize count of subsets into which the given array can be split such that it satisfies the given condition.
447,Maximize sum of second minimums in all quadruples of a given array | C ++ program for the above approach ; Function to find maximum possible sum of second minimums in each quadruple ; Sort the array ; Add the second minimum ; Print maximum possible sum ; Driver Code ; Given array ; Size of the array,"#include <bits/stdc++.h>
#include <iostream>
using namespace std;
void maxPossibleSum(int arr[], int N) {
  sort(arr, arr + N);
  int sum = 0;
  int j = N - 3;
  while (j >= 0) {
    sum += arr[j];
    j -= 3;
  }
  cout << sum;
}
int main() {
  int arr[] = {7, 4, 5, 2, 3, 1, 5, 9};
  int N = 8;
  maxPossibleSum(arr, N);
  return 0;
}",Maximize sum of second minimums in all quadruples of a given array.
448,"Difference between Insertion sort and Selection sort | C ++ program for the insertion sort ; Function to sort an array using insertion sort ; Move elements of arr [ 0. . i - 1 ] , that are greater than key to one position ahead of their current position ; Function to print an array of size N ; Print the array ; Driver Code ; Function Call","#include <bits/stdc++.h>
using namespace std;
void insertionSort(int arr[], int n) {
  int i, key, j;
  for (i = 1; i < n; i++) {
    key = arr[i];
    j = i - 1;
    while (j >= 0 && arr[j] > key) {
      arr[j + 1] = arr[j];
      j = j - 1;
    }
    arr[j + 1] = key;
  }
}
void printArray(int arr[], int n) {
  int i;
  for (i = 0; i < n; i++) {
    cout << arr[i] << "" "";
  }
  cout << endl;
}
int main() {
  int arr[] = {12, 11, 13, 5, 6};
  int N = sizeof(arr) / sizeof(arr[0]);
  insertionSort(arr, N);
  printArray(arr, N);
  return 0;
}",Difference between Insertion sort and Selection sort.
449,"Count pairs ( i , j ) from given array such that i K * arr [ j ] | C ++ program for the above approach ; Function to find the count required pairs ; Stores count of pairs ; Traverse the array ; Check if the condition is satisfied or not ; Driver Code ; Function Call","#include <bits/stdc++.h>
using namespace std;
int getPairs(int arr[], int N, int K) {
  int count = 0;
  for (int i = 0; i < N; i++) {
    for (int j = i + 1; j < N; j++) {
      if (arr[i] > K * arr[i + 1])
        count++;
    }
  }
  cout << count;
}
int main() {
  int arr[] = {5, 6, 2, 1};
  int N = sizeof(arr) / sizeof(arr[0]);
  int K = 2;
  getPairs(arr, N, K);
  return 0;
}","Count pairs ( i , j ) from given array such that i K * arr [ j ]."
450,"Count pairs ( i , j ) from given array such that i K * arr [ j ] | C ++ program for the above approach ; Function to merge two sorted arrays ; i : index to left subarray ; j : index to right subarray ; Stores count of pairs that satisfy the given condition ; Traverse to check for the valid conditions ; If condition satisfies ; All elements in the right side of the left subarray also satisfies ; Sort the two given arrays and store in the resultant array ; Elements which are left in the left subarray ; Elements which are left in the right subarray ; Return the count obtained ; Function to partition array into two halves ; Same as ( l + r ) / 2 , but avoids overflow for large l and h ; Sort first and second halves ; Call the merging function ; Function to print the count of required pairs using Merge Sort ; Driver code ; Function Call","#include <bits/stdc++.h>
using namespace std;
int merge(int arr[], int temp[], int l, int m, int r, int K) {
  int i = l;
  int j = m + 1;
  int cnt = 0;
  for (int l = 0; i <= m; i++) {
    bool found = false;
    while (j <= r) {
      if (arr[i] >= K * arr[j]) {
        found = true;
      } else
        break;
      j++;
    }
    if (found) {
      cnt += j - (m + 1);
      j--;
    }
  }
  int k = l;
  i = l;
  j = m + 1;
  while (i <= m && j <= r) {
    if (arr[i] <= arr[j])
      temp[k++] = arr[i++];
    else
      temp[k++] = arr[j++];
  }
  while (i <= m)
    temp[k++] = arr[i++];
  while (j <= r)
    temp[k++] = arr[j++];
  for (int i = l; i <= r; i++)
    arr[i] = temp[i];
  return cnt;
}
int mergeSortUtil(int arr[], int temp[], int l, int r, int K) {
  int cnt = 0;
  if (l < r) {
    int m = (l + r) / 2;
    cnt += mergeSortUtil(arr, temp, l, m, K);
    cnt += mergeSortUtil(arr, temp, m + 1, r, K);
    cnt += merge(arr, temp, l, m, r, K);
  }
  return cnt;
}
int mergeSort(int arr[], int N, int K) {
  int temp[N];
  cout << mergeSortUtil(arr, temp, 0, N - 1, K);
}
int main() {
  int arr[] = {5, 6, 2, 5};
  int N = sizeof(arr) / sizeof(arr[0]);
  int K = 2;
  mergeSort(arr, N, K);
  return 0;
}","Count pairs ( i , j ) from given array such that i K * arr [ j ]."
451,Minimize consecutive removals of elements of the same type to empty given array | C ++ implementation of the above approach ; Function to count minimum consecutive removals of elements of the same type ; Sort the array ; Stores the maximum element present in the array ; Stores sum of the array ; Calculate sum of the array ; Driver Code ; Function call,"#include <bits/stdc++.h>
using namespace std;
void minRemovals(int A[], int N) {
  sort(A, A + N);
  int mx = A[N - 1];
  int sum = 1;
  for (int i = 0; i < N; i++) {
    sum += A[i];
  }
  if (sum - mx >= mx) {
    cout << 0 << ""\n"";
  } else {
    cout << 2 * mx - sum << ""\n"";
  }
}
int main() {
  int A[] = {3, 3, 2};
  int N = sizeof(A) / sizeof(A[0]);
  minRemovals(A, N);
  return 0;
}",Minimize consecutive removals of elements of the same type to empty given array.
452,"Rearrange given array such that no array element is same as its index | C ++ program for the above approach ; Function to rearrange the array a [ ] such that none of the array elements is same as its index ; Sort the array ; Traverse the indices [ 0 , N - 2 ] of the given array ; Check if the current element is equal to its index ; If found to be true , swap current element with the next element ; Check if the last element is same as its index ; If found to be true , swap current element with the previous element ; Print the modified array ; Driver Code ; Function Call","#include <bits/stdc++.h>
using namespace std;
void rearrangeArray(int a[], int n) {
  sort(a, a + n);
  for (int i = 0; i < n - 1; i++) {
    if (a[i] == i + 1) {
      swap(a[i], a[i + 1]);
    }
  }
  if (a[n - 1] == n) {
    swap(a[n - 1], a[n - 2]);
  }
  for (int i = 0; i < n; i++) {
    cout << a[i] << "" "";
  }
}
int main() {
  int arr[] = {1, 5, 3, 2, 4};
  int N = sizeof(arr) / sizeof(arr[0]);
  rearrangeArray(arr, N);
  return 0;
}",Rearrange given array such that no array element is same as its index.
453,"Count minimum number of moves to front or end to sort an array | C ++ program for the above approach ; Function that counts the minimum moves required to covert arr [ ] to brr [ ] ; Base Case ; If arr [ i ] < arr [ j ] ; Include the current element ; Otherwise , excluding the current element ; Function that counts the minimum moves required to sort the array ; If both the arrays are equal ; No moves required ; Otherwise ; Print minimum operations required ; Driver code","#include <bits/stdc++.h>
using namespace std;
int minOperations(int arr1[], int arr2[], int i, int j, int n) {
  int f = 0;
  for (int i = 0; i < n; i++) {
    if (arr1[i] != arr2[i])
      f = 1;
    break;
  }
  if (f == 0)
    return 0;
  if (i >= n j >= n)
    return 0;
  if (arr1[i] < arr2[j])
    return 1 + minOperations(arr1, arr2, i + 1, j + 1, n);
  return max(minOperations(arr1, arr2, i, j + 1, n),
             minOperations(arr1, arr2, i + 1, j, n));
}
void minOperationsUtil(int arr[], int n) {
  int brr[n];
  for (int i = 0; i < n; i++)
    brr[i] = arr[i];
  sort(brr, brr + n);
  int f = 0;
  for (int i = 0; i < n; i++) {
    if (arr[i] != brr[i])
      f = 1;
    break;
  }
  if (f == 1)
    cout << (minOperations(arr, brr, 0, 0, n));
  else
    cout << ""0"";
}
int main() {
  int arr[] = {4, 7, 2, 3, 9};
  int n = sizeof(arr) / sizeof(arr[0]);
  minOperationsUtil(arr, n);
}",Count minimum number of moves to front or end to sort an array.
454,Check if a string can be transformed to another by sorting substrings | C ++ Program to implement the above approach ; Function to check if str1 can be transformed to t by sorting substrings ; Occur [ i ] stores the indices of char ( ' a ' + i ) in string s ; idx [ i ] stores the next available index of char ( ' a ' + i ) in occur [ i ] ; If this char is not available anymore ; Conversion not possible ; If one of the smaller characters is available and occurs before ; Conversion not possible ; Print the answer ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
void canTransform(string &s, string &t) {
  int n = s.length();
  vector<int> occur[26];
  for (int x = 0; x < n; x++) {
    char ch = s[x] - 'a';
    occur[ch].push_back(x);
  }
  vector<int> idx(26, 0);
  bool poss = true;
  for (int x = 0; x < n; x++) {
    char ch = t[x] - 'a';
    if (idx[ch] >= occur[ch].size()) {
      poss = false;
      break;
    }
    for (int small = 0; small < ch; small++) {
      if (idx[small] < occur[small].size() &&
          occur[small][idx[small]] < occur[ch][idx[ch]]) {
        poss = false;
        break;
      }
    }
    idx[ch]++;
  }
  if (poss) {
    cout << ""Yes"" << endl;
  } else {
    cout << ""No"" << endl;
  }
}
int main() {
  string s, t;
  s = ""hdecb"";
  t = ""cdheb"";
  canTransform(s, t);
  return 0;
}",Check if a string can be transformed to another by sorting substrings.
455,"Check whether two strings can be made equal by reversing substring of equal length from both strings | C ++ program for the above approach ; function to count inversion count of the string ; for storing frequency ; Add all the characters which are less than the ith character before i . ; adding the count to inversion count ; updating the character in the frequency array ; function to check whether any of the string have a repeated character ; function to check whether the string S1 and S2 can be made equal by reversing sub strings of same size in both strings ; frequency array to check whether both string have same character or not ; adding the frequency ; ; if the character is not in S1 ; decrementing the frequency ; If both string doesnot have same characters or not ; finding inversion count of both strings ; If inversion count is same , or have same parity or if any of the string have a repeated character then the answer is Yes else No ; driver code","#include <bits/stdc++.h>
using namespace std;
int inversionCount(string &s) {
  int freq[26] = {0};
  int inv = 0;
  for (int i = 0; i < s.length(); i++) {
    int temp = 0;
    for (int j = 0; j < int(s[i] - 'a'); j++)
      temp += freq[j];
    inv += (i - temp);
    freq[s[i] - 'a']++;
  }
  return inv;
}
bool haveRepeated(string &S1, string &S2) {
  int freq[26] = {0};
  for (char i : S1) {
    if (freq[i - 'a'] > 0)
      return true;
    freq[i - 'a']++;
  }
  for (int i = 0; i < 26; i++)
    freq[i] = 0;
  for (char i : S2) {
    if (freq[i - 'a'] > 0)
      return true;
    freq[i - 'a']++;
  }
  return false;
}
void checkToMakeEqual(string S1, string S2) {
  int freq[26] = {0};
  for (int i = 0; i < S1.length(); i++) {
    freq[S1[i] - 'a']++;
  }
  bool flag = 0;
  for (int i = 0; i < S2.length(); i++) {
    if (freq[S2[i] - 'a'] == 0) {
      flag = true;
      break;
    }
    freq[S2[i] - 'a']--;
  }
  if (flag == true) {
    cout << ""No\n"";
    return;
  }
  int invCount1 = inversionCount(S1);
  int invCount2 = inversionCount(S2);
  if (invCount1 == invCount2 || (invCount1 & 1) == (invCount2 & 1) ||
      haveRepeated(S1, S2)) {
    cout << ""Yes\n"";
  } else
    cout << ""No\n"";
}
int main() {
  string S1 = ""abbca"", S2 = ""acabb"";
  checkToMakeEqual(S1, S2);
  return 0;
}",Check whether two strings can be made equal by reversing substring of equal length from both strings.
456,Sort a Bitonic Array | C ++ program for the above approach ; Function to Sort a Bitonic array in constant space ; Initialize the value of k ; In each iteration compare elements k distance apart and swap if they are not in order ; k is reduced to half after every iteration ; Print the array elements ; Driver Code ; Given array arr [ ] ; Function Call,"#include <bits/stdc++.h>
using namespace std;
void sortArr(int a[], int n) {
  int i, k;
  k = (int)log2(n);
  k = pow(2, k);
  while (k > 0) {
    for (i = 0; i + k < n; i++)
      if (a[i] > a[i + k])
        swap(a[i], a[i + k]);
    k = k / 2;
  }
  for (i = 0; i < n; i++) {
    cout << a[i] << "" "";
  }
}
int main() {
  int arr[] = {5, 20, 30, 40, 36, 33, 25, 15, 10};
  int n = sizeof(arr) / sizeof(arr[0]);
  sortArr(arr, n);
  return 0;
}",Sort a Bitonic Array.
457,Split array into K subsets to maximize their sum of maximums and minimums | C ++ Program to implement the above approach ; Function that prints the maximum sum possible ; Find elements in each group ; Sort all elements in non - descending order ; Add K largest elements ; For sum of minimum elements from each subset ; Printing the maximum sum ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
void maximumSum(int arr[], int n, int k) {
  int elt = n / k;
  int sum = 0;
  sort(arr, arr + n);
  int count = 0;
  int i = n - 1;
  while (count < k) {
    sum += arr[i];
    i--;
    count++;
  }
  count = 0;
  i = 0;
  while (count < k) {
    sum += arr[i];
    i += elt - 1;
    count++;
  }
  cout << sum << ""\n"";
}
int main() {
  int Arr[] = {1, 13, 7, 17, 6, 5};
  int K = 2;
  int size = sizeof(Arr) / sizeof(Arr[0]);
  maximumSum(Arr, size, K);
  return 0;
}",Split array into K subsets to maximize their sum of maximums and minimums.
458,Minimize sum of smallest elements from K subsequences of length L | C ++ Program to find the minimum possible sum of the smallest elements from K subsequences ; Function to find the minimum sum ; Sort the array ; Calculate sum of smallest K elements ; Return the sum ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
int findMinSum(int arr[], int K, int L, int size) {
  if (K * L > size)
    return -1;
  int minsum = 0;
  sort(arr, arr + size);
  for (int i = 0; i < K; i++)
    minsum += arr[i];
  return minsum;
}
int main() {
  int arr[] = {2, 15, 5, 1, 35, 16, 67, 10};
  int K = 3;
  int L = 2;
  int length = sizeof(arr) / sizeof(arr[0]);
  cout << findMinSum(arr, K, L, length);
  return 0;
}",Minimize sum of smallest elements from K subsequences of length L.
459,Kth smallest or largest element in unsorted Array | Set 4 | C ++ program for the above approach ; Function to find the Kth smallest element in Unsorted Array ; Initialize the max Element as 0 ; Iterate arr [ ] and find the maximum element in it ; Frequency array to store the frequencies ; Counter variable ; Counting the frequencies ; Iterate through the freq [ ] ; Check if num is present in the array ; Increment the counter with the frequency of num ; Checking if we have reached the Kth smallest element ; Return the Kth smallest element ; Driver Code ; Given array ; Function Call,"#include <iostream>
using namespace std;
int findKthSmallest(int arr[], int n, int k) {
  int max = 0;
  for (int i = 0; i < n; i++) {
    if (arr[i] > max)
      max = arr[i];
  }
  int counter[max + 1] = {0};
  int smallest = 0;
  for (int i = 0; i < n; i++) {
    counter[arr[i]]++;
  }
  for (int num = 1; num <= max; num++) {
    if (counter[num] > 0) {
      smallest += counter[num];
    }
    if (smallest >= k) {
      return num;
    }
  }
}
int main() {
  int arr[] = {7, 1, 4, 4, 20, 15, 8};
  int N = sizeof(arr) / sizeof(arr[0]);
  int K = 5;
  cout << findKthSmallest(arr, N, K);
  return 0;
}",Kth smallest or largest element in unsorted Array.
460,Generate all numbers up to N in Lexicographical Order | C ++ Program to implement the above approach ; Function to print all the numbers up to n in lexicographical order ; Driver Program,"#include <bits/stdc++.h>
using namespace std;
void lexNumbers(int n) {
  vector<string> s;
  for (int i = 1; i <= n; i++) {
    s.push_back(to_string(i));
  }
  sort(s.begin(), s.end());
  vector<int> ans;
  for (int i = 0; i < n; i++)
    ans.push_back(stoi(s[i]));
  for (int i = 0; i < n; i++)
    cout << ans[i] << "" "";
}
int main() {
  int n = 15;
  lexNumbers(n);
  return 0;
}",Generate all numbers up to N in Lexicographical Order.
461,Sort Matrix in alternating ascending and descending order rowwise | C ++ implementation to print row of matrix in ascending or descending order alternatively ; Iterate matrix rowwise ; Sort even rows in ascending order ; compare adjacent elements ; swap adjacent element ; Sort even rows in descending order ; compare adjacent elements ; swap adjacent element ; Printing the final Output ; Driver code,"#include <stdio.h>
#defineN4
void func(int a[][N]) {
  for (int i = 0; i < N; i++) {
    if (i % 2 == 0) {
      for (int j = 0; j < N; j++) {
        for (int k = j + 1; k < N; ++k) {
          if (a[i][j] > a[i][k]) {
            int temp = a[i][j];
            a[i][j] = a[i][k];
            a[i][k] = temp;
          }
        }
      }
    } else {
      for (int j = 0; j < N; j++) {
        for (int k = j + 1; k < N; ++k) {
          if (a[i][j] < a[i][k]) {
            int temp = a[i][j];
            a[i][j] = a[i][k];
            a[i][k] = temp;
          }
        }
      }
    }
  }
  for (int i = 0; i < N; i++) {
    for (int j = 0; j < N; j++) {
      printf(""%d "", a[i][j]);
    }
    printf(""\n"");
  }
}
int main() {
  int a[N][N] = {{5, 7, 3, 4}, {9, 5, 8, 2}, {6, 3, 8, 1}, {5, 8, 9, 3}};
  func(a);
  return 0;
}",Sort Matrix in alternating ascending and descending order rowwise.
462,Find weight of MST in a complete graph with edge | C ++ Program to find weight of minimum spanning tree in a complete graph where edges have weight either 0 or 1 ; To store the edges of the given graph ; A utility function to perform DFS Traversal ; Check those vertices which are stored in the set ; Vertices are included if the weight of edge is 0 ; A utility function to find the weight of Minimum Spanning Tree ; To count the connected components ; Inserting the initial vertices in the set ; Traversing vertices stored in the set and Run DFS Traversal for each vertices ; Incrementing the zero weight connected components ; DFS Traversal for every vertex remove ; Driver 's Code ; Insert edges ; Function call find the weight of Minimum Spanning Tree,"#include <bits/stdc++.h>
using namespace std;
map<int, int> g[200005];
set<int> s, ns;
void dfs(int x) {
  vector<int> v;
  v.clear();
  ns.clear();
  for (int it : s) {
    if (!g[x][it]) {
      v.push_back(it);
    } else {
      ns.insert(it);
    }
  }
  s = ns;
  for (int i : v) {
    dfs(i);
  }
}
void weightOfMST(int N) {
  int cnt = 0;
  for (int i = 1; i <= N; ++i) {
    s.insert(i);
  }
  for (; s.size();) {
    ++cnt;
    int t = *s.begin();
    s.erase(t);
    dfs(t);
  }
  cout << cnt - 1;
}
int main() {
  int N = 6, M = 11;
  int edges[][] = {{1, 3}, {1, 4}, {1, 5}, {1, 6}, {2, 3}, {2, 4},
                   {2, 5}, {2, 6}, {3, 4}, {3, 5}, {3, 6}};
  for (int i = 0; i < M; ++i) {
    int u = edges[i][0];
    int v = edges[i][1];
    g[u][v] = 1;
    g[v][u] = 1;
  }
  weightOfMST(N);
  return 0;
}",Find weight of MST in a complete graph with edge.
463,Count of distinct possible pairs such that the element from A is greater than the element from B | C ++ Program to count number of distinct pairs possible from the two arrays such that element selected from one array is always greater than the one selected from the other array ; Function to return the count of pairs ; Driver code,"#include <bits/stdc++.h>
using namespace std;
int countPairs(vector<int> A, vector<int> B) {
  int n = A.size();
  sort(A.begin(), A.end());
  sort(B.begin(), B.end());
  int ans = 0, i;
  for (int i = 0; i < n; i++) {
    if (A[i] > B[ans]) {
      ans++;
    }
  }
  return ans;
}
int main() {
  vector<int> A = {30, 28, 45, 22};
  vector<int> B = {35, 25, 22, 48};
  cout << countPairs(A, B);
  return 0;
}",Count of distinct possible pairs such that the element from A is greater than the element from B.
464,Maximum possible remainder when an element is divided by other element in the array | C ++ implementation of the approach ; Function to return the maximum mod value for any pair from the array ; Find the second maximum element from the array ; Driver code,"#include <bits/stdc++.h>
using namespace std;
int maxMod(int arr[], int n) {
  int maxVal = *max_element(arr, arr + n);
  int secondMax = 0;
  for (int i = 0; i < n; i++) {
    if (arr[i] < maxVal && arr[i] > secondMax) {
      secondMax = arr[i];
    }
  }
  return secondMax;
}
int main() {
  int arr[] = {2, 4, 1, 5, 3, 6};
  int n = sizeof(arr) / sizeof(int);
  cout << maxMod(arr, n);
  return 0;
}",Maximum possible remainder when an element is divided by other element in the array.
465,Choose X elements from A [ ] and Y elements from B [ ] which satisfy the given condition | C ++ implementation of the approach ; Function to that returns true if it possible to choose the elements ; If elements can 't be chosen ; Sort both the arrays ; If xth smallest element of A [ ] is smaller than the yth greatest element of B [ ] ; Driver code,"#include <bits/stdc++.h>
using namespace std;
bool isPossible(int A[], int B[], int n, int m, int x, int y) {
  if (x > n y > m)
    return false;
  sort(A, A + n);
  sort(B, B + m);
  if (A[x - 1] < B[m - y])
    return true;
  else
    return false;
}
int main() {
  int A[] = {1, 1, 1, 1, 1};
  int B[] = {2, 2};
  int n = sizeof(A) / sizeof(int);
  int m = sizeof(B) / sizeof(int);
  int x = 3, y = 1;
  if (isPossible(A, B, n, m, x, y))
    cout << ""Yes"";
  else
    cout << ""No"";
  return 0;
}",Choose X elements from A [ ] and Y elements from B [ ] which satisfy the given condition.
466,Find minimum changes required in an array for it to contain k distinct elements | CPP program to minimum changes required in an array for k distinct elements . ; Function to minimum changes required in an array for k distinct elements . ; Store the frequency of each element ; Store the frequency of elements ; Sort frequencies in descending order ; To store the required answer ; Return the required answer ; Driver code,"#include <bits/stdc++.h>
using namespace std;
#defineMAX100005 int Min_Replace(int arr[], int n, int k) {
  sort(arr, arr + n);
  int freq[MAX];
  memset(freq, 0, sizeof freq);
  int p = 0;
  freq[p] = 1;
  for (int i = 1; i < n; i++) {
    if (arr[i] == arr[i - 1])
      ++freq[p];
    else
      ++freq[++p];
  }
  sort(freq, freq + n, greater<int>());
  int ans = 0;
  for (int i = k; i <= p; i++)
    ans += freq[i];
  return ans;
}
int main() {
  int arr[] = {1, 2, 7, 8, 2, 3, 2, 3};
  int n = sizeof(arr) / sizeof(arr[0]);
  int k = 2;
  cout << Min_Replace(arr, n, k);
  return 0;
}",Find minimum changes required in an array for it to contain k distinct elements.
467,"Maximum number of elements without overlapping in a Line | CPP program to find maximum number of elements without overlapping in a line ; Function to find maximum number of elements without overlapping in a line ; If n = 1 , then answer is one ; We can always make 1 st element to cover left segment and nth the right segment ; If left segment for ith element doesnt overlap with i - 1 th element then do left ; else try towards right if possible ; update x [ i ] to right endpoint of segment covered by it ; Return the required answer ; Driver code ; Function call","#include <bits/stdc++.h>
using namespace std;
int Segment(int x[], int l[], int n) {
  if (n == 1)
    return 1;
  int ans = 2;
  for (int i = 1; i < n - 1; i++) {
    if (x[i] - l[i] > x[i - 1])
      ans++;
    else if (x[i] + l[i] < x[i + 1]) {
      x[i] = x[i] + l[i];
      ans++;
    }
  }
  return ans;
}
int main() {
  int x[] = {1, 3, 4, 5, 8}, l[] = {10, 1, 2, 2, 5};
  int n = sizeof(x) / sizeof(x[0]);
  cout << Segment(x, l, n);
  return 0;
}",Maximum number of elements without overlapping in a Line.
468,Delete odd and even numbers at alternate step such that sum of remaining elements is minimized | C ++ implementation of the approach ; Function to find the minimized sum ; If more odd elements ; Sort the elements ; Left - over elements ; Find the sum of leftover elements ; Return the sum ; If more even elements ; Sort the elements ; Left - over elements ; Find the sum of leftover elements ; Return the sum ; If same elements ; Driver code,"#include <bits/stdc++.h>
using namespace std;
int MinimizeleftOverSum(int a[], int n) {
  vector<int> v1, v2;
  for (int i = 0; i < n; i++) {
    if (a[i] % 2)
      v1.push_back(a[i]);
    else
      v2.push_back(a[i]);
  }
  if (v1.size() > v2.size()) {
    sort(v1.begin(), v1.end());
    sort(v2.begin(), v2.end());
    int x = v1.size() - v2.size() - 1;
    int sum = 0;
    int i = 0;
    while (i < x) {
      sum += v1[i++];
    }
    return sum;
  } else if (v2.size() > v1.size()) {
    sort(v1.begin(), v1.end());
    sort(v2.begin(), v2.end());
    int x = v2.size() - v1.size() - 1;
    int sum = 0;
    int i = 0;
    while (i < x) {
      sum += v2[i++];
    }
    return sum;
  } else
    return 0;
}
int main() {
  int a[] = {2, 2, 2, 2};
  int n = sizeof(a) / sizeof(a[0]);
  cout << MinimizeleftOverSum(a, n);
  return 0;
}",Delete odd and even numbers at alternate step such that sum of remaining elements is minimized.
469,Minimum operations to make frequency of all characters equal K | C ++ program to convert the given string ; Function to find the minimum number of operations to convert the given string ; Check if N is divisible by K ; Array to store frequency of characters in given string ; Two arrays with number of operations required ; Checking for all possibility ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
void minOperation(string S, int N, int K) {
  if (N % K) {
    cout << ""Not Possible"" << endl;
    return;
  }
  int count[26] = {0};
  for (int i = 0; i < N; i++) {
    count[S[i] - 97]++;
  }
  int E = N / K;
  vector<int> greaterE;
  vector<int> lessE;
  for (int i = 0; i < 26; i++) {
    if (count[i] < E)
      lessE.push_back(E - count[i]);
    else
      greaterE.push_back(count[i] - E);
  }
  sort(greaterE.begin(), greaterE.end());
  sort(lessE.begin(), lessE.end());
  int mi = INT_MAX;
  for (int i = 0; i <= K; i++) {
    int set1 = i;
    int set2 = K - i;
    if (greaterE.size() >= set1 && lessE.size() >= set2) {
      int step1 = 0;
      int step2 = 0;
      for (int j = 0; j < set1; j++)
        step1 += greaterE[j];
      for (int j = 0; j < set2; j++)
        step2 += lessE[j];
      mi = min(mi, max(step1, step2));
    }
  }
  cout << mi << endl;
}
int main() {
  string S = ""accb"";
  int N = S.size();
  int K = 2;
  minOperation(S, N, K);
  return 0;
}",Minimum operations to make frequency of all characters equal K.
470,Minimum range increment operations to Sort an array | C ++ program to find minimum range increments to sort an array ; Function to find minimum range increments to sort an array ; If current element is found greater than last element Increment all terms in range i + 1 to n - 1 ; mn = arr [ i ] ; Minimum in range i to n - 1 ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
int minMovesToSort(int arr[], int n) {
  int moves = 0;
  int i, mn = arr[n - 1];
  for (i = n - 2; i >= 0; i--) {
    if (arr[i] > mn)
      moves += arr[i] - mn;
  }
  return moves;
}
int main() {
  int arr[] = {3, 5, 2, 8, 4};
  int n = sizeof(arr) / sizeof(arr[0]);
  cout << minMovesToSort(arr, n);
  return 0;
}",Minimum range increment operations to Sort an array.
471,"Sort prime numbers of an array in descending order | C ++ implementation of the approach ; false here indicates that it is not prime ; If prime [ p ] is not changed , then it is a prime ; Update all multiples of p , set them to non - prime ; Function that sorts all the prime numbers from the array in descending ; this vector will contain prime numbers to sort ; if the element is prime ; update the array elements ; Driver code ; print the results .","#include <bits/stdc++.h>
using namespace std;
bool prime[100005];
void SieveOfEratosthenes(int n) {
  memset(prime, true, sizeof(prime));
  prime[1] = false;
  for (int p = 2; p * p <= n; p++) {
    if (prime[p]) {
      for (int i = p * 2; i <= n; i += p)
        prime[i] = false;
    }
  }
}
void sortPrimes(int arr[], int n) {
  SieveOfEratosthenes(100005);
  vector<int> v;
  for (int i = 0; i < n; i++) {
    if (prime[arr[i]])
      v.push_back(arr[i]);
  }
  sort(v.begin(), v.end(), greater<int>());
  int j = 0;
  for (int i = 0; i < n; i++) {
    if (prime[arr[i]])
      arr[i] = v[j++];
  }
}
int main() {
  int arr[] = {4, 3, 2, 6, 100, 17};
  int n = sizeof(arr) / sizeof(arr[0]);
  sortPrimes(arr, n);
  for (int i = 0; i < n; i++) {
    cout << arr[i] << "" "";
  }
  return 0;
}",Sort prime numbers of an array in descending order.
472,Pair formation such that maximum pair sum is minimized | CPP Program to divide the array into N pairs such that maximum pair is minimized ; After Sorting Maintain two variables i and j pointing to start and end of array Such that smallest element of array pairs with largest element ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
void findOptimalPairs(int arr[], int N) {
  sort(arr, arr + N);
  for (int i = 0, j = N - 1; i <= j; i++, j--)
    cout << ""("" << arr[i] << "", "" << arr[j] << "")""
         << "" "";
}
int main() {
  int arr[] = {9, 6, 5, 1};
  int N = sizeof(arr) / sizeof(arr[0]);
  findOptimalPairs(arr, N);
  return 0;
}",Pair formation such that maximum pair sum is minimized.
473,"Sort an array according to count of set bits | C ++ program to implement simple approach to sort an array according to count of set bits . ; a utility function that returns total set bits count in an integer ; Function to simultaneously sort both arrays using insertion sort ( https : www . geeksforgeeks . org / insertion - sort / ) ; use 2 keys because we need to sort both arrays simultaneously ; Move elements of arr [ 0. . i - 1 ] and aux [ 0. . i - 1 ] , such that elements of aux [ 0. . i - 1 ] are greater than key1 , to one position ahead of their current position ; Function to sort according to bit count using an auxiliary array ; Create an array and store count of set bits in it . ; Sort arr [ ] according to values in aux [ ] ; Utility function to print an array ; Driver Code","#include <iostream>
using namespace std;
int countBits(int a) {
  int count = 0;
  while (a) {
    if (a & 1)
      count += 1;
    a = a >> 1;
  }
  return count;
}
void insertionSort(int arr[], int aux[], int n) {
  for (int i = 1; i < n; i++) {
    int key1 = aux[i];
    int key2 = arr[i];
    int j = i - 1;
    while (j >= 0 && aux[j] < key1) {
      aux[j + 1] = aux[j];
      arr[j + 1] = arr[j];
      j = j - 1;
    }
    aux[j + 1] = key1;
    arr[j + 1] = key2;
  }
}
void sortBySetBitCount(int arr[], int n) {
  int aux[n];
  for (int i = 0; i < n; i++)
    aux[i] = countBits(arr[i]);
  insertionSort(arr, aux, n);
}
void printArr(int arr[], int n) {
  for (int i = 0; i < n; i++)
    cout << arr[i] << "" "";
}
int main() {
  int arr[] = {1, 2, 3, 4, 5, 6};
  int n = sizeof(arr) / sizeof(arr[0]);
  sortBySetBitCount(arr, n);
  printArr(arr, n);
  return 0;
}",Sort an array according to count of set bits.
474,Sort an array according to count of set bits | C ++ program to sort an array according to count of set bits using std :: sort ( ) ; a utility function that returns total set bits count in an integer ; Function to sort according to bit count This function assumes that there are 32 bits in an integer . ; Traverse through all bit counts ( Note that we sort array in decreasing order ) ; Utility function to print an array ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
int countBits(int a) {
  int count = 0;
  while (a) {
    if (a & 1)
      count += 1;
    a = a >> 1;
  }
  return count;
}
void sortBySetBitCount(int arr[], int n) {
  vector<vector<int>> count(32);
  int setbitcount = 0;
  for (int i = 0; i < n; i++) {
    setbitcount = countBits(arr[i]);
    count[setbitcount].push_back(arr[i]);
  }
  for (int i = 31; i >= 0; i--) {
    vector<int> v1 = count[i];
    for (int i = 0; i < v1.size(); i++)
      arr[j++] = v1[i];
  }
}
void printArr(int arr[], int n) {
  for (int i = 0; i < n; i++)
    cout << arr[i] << "" "";
}
int main() {
  int arr[] = {1, 2, 3, 4, 5, 6};
  int n = sizeof(arr) / sizeof(arr[0]);
  sortBySetBitCount(arr, n);
  printArr(arr, n);
  return 0;
}",Sort an array according to count of set bits.
475,Lexicographically smallest binary string formed by flipping bits at indices not divisible K1 or K2 such that count of 1 s is always greater than 0 s from left | C ++ program for the above approach ; Function to find lexicographically smallest string having number of 1 s greater than number of 0 s ; C1s And C0s stores the count of 1 s and 0 s at every position ; Traverse the string S ; If the position is not divisible by k1 and k2 ; If C0s >= C1s and pos [ ] is empty then the string can 't  be formed ; If pos [ ] is not empty then flip the bit of last position present in pos [ ] ; Print the result ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
void generateString(int k1, int k2, string s) {
  int C1s = 0, C0s = 0;
  int flag = 0;
  vector<int> pos;
  for (int i = 0; i < s.length(); i++) {
    if (s[i] == '0') {
      C0s++;
      if ((i + 1) % k1 != 0 && (i + 1) % k2 != 0) {
        pos.push_back(i);
      }
    } else {
      C1s++;
    }
    if (C0s >= C1s) {
      if (pos.size() == 0) {
        cout << -1;
        flag = 1;
        break;
      } else {
        int k = pos.back();
        s[k] = '1';
        C0s--;
        C1s++;
        pos.pop_back();
      }
    }
  }
  if (flag == 0) {
    cout << s;
  }
}
int main() {
  int K1 = 2, K2 = 4;
  string S = ""11000100"";
  generateString(K1, K2, S);
  return 0;
}",Lexicographically smallest binary string formed by flipping bits at indices not divisible K1 or K2 such that count of 1 s is always greater than 0 s from left.
476,"Find a pair of numbers with set bit count as at most that of N and whose Bitwise XOR is N | C ++ program for the above approach ; Function to find the pair ( X , Y ) such that X xor Y = N and the count of set bits in X and Y is less than count of set bit in N ; Stores MSB ( Most Significant Bit ) ; Stores the value of X ; Stores the value of Y ; Traversing over all bits of N ; If ith bit of N is 0 ; Set ith bit of X to 1 ; Set ith bit of Y to 1 ; Print Answer ; Driver Code","#include <bits/stdc++.h>
using namespace std;
void maximizeProduct(int N) {
  int MSB = (int)log2(N);
  int X = 1 << MSB;
  int Y = N - (1 << MSB);
  for (int i = 0; i < MSB; i++) {
    if (!(N & (1 << i))) {
      X += 1 << i;
      Y += 1 << i;
    }
  }
  cout << X << "" "" << Y;
}
int main() {
  int N = 45;
  maximizeProduct(N);
  return 0;
}",Find a pair of numbers with set bit count as at most that of N and whose Bitwise XOR is N.
477,"Count of numbers in range [ L , R ] having sum of digits of its square equal to square of sum of digits | C ++ program for the above approach ; Function to check if the number is valid ; Sum of digits of num ; Squared number ; Sum of digits of ( num * num ) ; Function to convert a string to an integer ; Function to generate all possible strings of length len ; Desired string ; Take only valid numbers ; Recurse for all possible digits ; Function to calculate unique numbers in range [ L , R ] ; Initialize a variable to store the answer ; Calculate the maximum possible length ; Set to store distinct valid numbers ; Generate all possible strings of length i ; Iterate the set to get the count of valid numbers in the range [ L , R ] ; Driver Code","#include <bits/stdc++.h>
using namespace std;
bool check(int num) {
  int sm = 0;
  int num2 = num * num;
  while (num) {
    sm += num % 10;
    num /= 10;
  }
  int sm2 = 0;
  while (num2) {
    sm2 += num2 % 10;
    num2 /= 10;
  }
  return ((sm * sm) == sm2);
}
int convert(string s) {
  int val = 0;
  reverse(s.begin(), s.end());
  int cur = 1;
  for (int i = 0; i < s.size(); i++) {
    val += (s[i] - '0') * cur;
    cur *= 10;
  }
  return val;
}
void generate(string s, int len, set<int> &uniq) {
  if (s.size() == len) {
    if (check(convert(s))) {
      uniq.insert(convert(s));
    }
    return;
  }
  for (int i = 0; i <= 3; i++) {
    generate(s + char(i + '0'), len, uniq);
  }
}
int totalNumbers(int L, int R) {
  int ans = 0;
  int max_len = log10(R) + 1;
  set<int> uniq;
  for (int i = 1; i <= max_len; i++) {
    generate("""", i, uniq);
  }
  for (auto x : uniq) {
    if (x >= L && x <= R) {
      ans++;
    }
  }
  return ans;
}
int main() {
  int L = 22, R = 22;
  cout << totalNumbers(L, R);
}","Count of numbers in range [ L , R ] having sum of digits of its square equal to square of sum of digits."
478,Convert X into Y by repeatedly multiplying X with 2 or appending 1 at the end | C ++ program for the above approach ; Function to check if X can be converted to Y by multiplying X by 2 or appending 1 at the end ; Iterate until Y is at least X ; If Y is even ; If the last digit of Y is 1 ; Otherwise ; Check if X is equal to Y ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
void convertXintoY(int X, int Y) {
  while (Y > X) {
    if (Y % 2 == 0)
      Y /= 2;
    else if (Y % 10 == 1)
      Y /= 10;
    else
      break;
  }
  if (X == Y)
    cout << ""Yes"";
  else
    cout << ""No"";
}
int main() {
  int X = 100, Y = 40021;
  convertXintoY(X, Y);
  return 0;
}",Convert X into Y by repeatedly multiplying X with 2 or appending 1 at the end.
479,Lexicographically smallest string of maximum length made up of first K alphabets that does not contain any repeating substring | C ++ program for the above approach ; Function to find the lexicographically smallest string of the first K lower case alphabets having unique substrings ; Stores the resultant string ; Iterate through all the characters ; Inner Loop for making pairs and adding them into string ; Adding first character so that substring consisting of the last the first alphabet is present ; Print the resultant string ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
void generateString(int K) {
  string s = """";
  for (int i = 97; i < 97 + K; i++) {
    s = s + char(i);
    for (int j = i + 1; j < 97 + K; j++) {
      s += char(i);
      s += char(j);
    }
  }
  s += char(97);
  cout << s;
}
int main() {
  int K = 4;
  generateString(K);
  return 0;
}",Lexicographically smallest string of maximum length made up of first K alphabets that does not contain any repeating substring.
480,Generate Quadratic Equation having given sum and product of roots | C ++ program for the above approach ; Function to find the quadratic equation from the given sum and products of roots ; Print the coefficients ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
void findEquation(int S, int M) {
  cout << ""1 "" << (-1) * S << "" "" << M << endl;
}
int main() {
  int S = 5, M = 6;
  findEquation(S, M);
  return 0;
}",Generate Quadratic Equation having given sum and product of roots.
481,Make all array elements equal by replacing adjacent pairs by their sum | C ++ program for the above approach ; Function to count the minimum number of pairs of adjacent elements required to be replaced by their sum to make all array elements equal ; Stores the prefix sum of the array ; Calculate the prefix sum array ; Stores the maximum number of subarrays into which the array can be split ; Iterate over all possible sums ; Traverse the array ; If the sum is equal to the current prefix sum ; Increment count of groups by 1 ; Otherwise discard this subgroup sum ; Update the maximum this of subarrays ; Return the minimum number of operations ; Driver Code ; Function Call,"#include <bits/stdc++.h>
using namespace std;
int minSteps(vector<int> a, int n) {
  vector<int> prefix_sum(n);
  prefix_sum[0] = a[0];
  for (int i = 1; i < n; i++)
    prefix_sum[i] += prefix_sum[i - 1] + a[i];
  int mx = -1;
  for (int subgroupsum : prefix_sum) {
    int sum = 0;
    int i = 0;
    int grp_count = 0;
    while (i < n) {
      sum += a[i];
      if (sum == subgroupsum) {
        grp_count += 1;
        sum = 0;
      } else if (sum > subgroupsum) {
        grp_count = -1;
        break;
      }
      i += 1;
    }
    if (grp_count > mx)
      mx = grp_count;
  }
  return n - mx;
}
int main() {
  vector<int> A = {1, 2, 3, 2, 1, 3};
  int N = A.size();
  cout << minSteps(A, N);
  return 0;
}",Make all array elements equal by replacing adjacent pairs by their sum.
482,"Most frequent character in a string after replacing all occurrences of X in a Binary String | C ++ program for the above approach ; Function to find the most frequent character after replacing X with either '0' or '1' according as per the given conditions ; Store the count of 0 s and 1 s in the string S ; Count the frequency of 0 and 1 ; If the character is 1 ; If the character is 0 ; Stores first occurence of 1 ; Traverse the string to count the number of X between two consecutive 1 s ; If the current character is not X ; If the current character is 1 , add the number of Xs to count1 and set prev to i ; Otherwise ; Find next occurence of 1 in the string ; If it is found , set i to prev ; Otherwise , break out of the loop ; Store the first occurence of 0 ; Repeat the same procedure to count the number of X between two consecutive 0 s ; If the current character is not X ; If the current character is 0 ; Add the count of Xs to count0 ; Set prev to i ; Otherwise ; Find the next occurence of 0 in the string ; If it is found , set i to prev ; Otherwise , break out of the loop ; Count number of X present in the starting of the string as XXXX1 ... ; Store the count of X ; Increment count1 by count if the condition is satisfied ; Count the number of X present in the ending of the string as ... XXXX0 ; Store the count of X ; Increment count0 by count if the condition is satisfied ; If count of 1 is equal to count of 0 , print X ; Otherwise , if count of 1 is greater than count of 0 ; Otherwise , print 0 ; Driver Code","#include <bits/stdc++.h>
using namespace std;
void maxOccuringCharacter(string s) {
  int count0 = 0, count1 = 0;
  for (int i = 0; i < s.length(); i++) {
    if (s[i] == '1') {
      count1++;
    } else if (s[i] == '0') {
      count0++;
    }
  }
  int prev = -1;
  for (int i = 0; i < s.length(); i++) {
    if (s[i] == '1') {
      prev = i;
      break;
    }
  }
  for (int i = prev + 1; i < s.length(); i++) {
    if (s[i] != 'X') {
      if (s[i] == '1') {
        count1 += i - prev - 1;
        prev = i;
      } else {
        bool flag = true;
        for (int j = i + 1; j < s.length(); j++) {
          if (s[j] == '1') {
            flag = false;
            prev = j;
            break;
          }
        }
        if (!flag) {
          i = prev;
        } else {
          i = s.length();
        }
      }
    }
  }
  prev = -1;
  for (int i = 0; i < s.length(); i++) {
    if (s[i] == '0') {
      prev = i;
      break;
    }
  }
  for (int i = prev + 1; i < s.length(); i++) {
    if (s[i] != 'X') {
      if (s[i] == '0') {
        count0 += i - prev - 1;
        prev = i;
      } else {
        bool flag = true;
        for (int j = i + 1; j < s.length(); j++) {
          if (s[j] == '0') {
            prev = j;
            flag = false;
            break;
          }
        }
        if (!flag) {
          i = prev;
        } else {
          i = s.length();
        }
      }
    }
  }
  if (s[0] == 'X') {
    int count = 0;
    int i = 0;
    while (s[i] == 'X') {
      count++;
      i++;
    }
    if (s[i] == '1') {
      count1 += count;
    }
  }
  if (s[(s.length() - 1)] == 'X') {
    int count = 0;
    int i = s.length() - 1;
    while (s[i] == 'X') {
      count++;
      i--;
    }
    if (s[i] == '0') {
      count0 += count;
    }
  }
  if (count0 == count1) {
    cout << ""X"" << endl;
  } else if (count0 > count1) {
    cout << 0 << endl;
  } else
    cout << 1 << endl;
}
int main() {
  string S = ""XX10XX10XXX1XX"";
  maxOccuringCharacter(S);
}",Most frequent character in a string after replacing all occurrences of X in a Binary String.
483,Maximize count of sheets possible by repeatedly reducing its area to half | C ++ program for the above approach ; Function to calculate the maximum number of sheets possible by given operations ; Initial count of sheets ; Keep dividing the sheets into half ; Reduce area by half ; Increase count by twice ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
int maxSheets(int A, int B) {
  int area = A * B;
  int count = 1;
  while (area % 2 == 0) {
    area /= 2;
    count *= 2;
  }
  return count;
}
int main() {
  int A = 5, B = 10;
  cout << maxSheets(A, B);
  return 0;
}",Maximize count of sheets possible by repeatedly reducing its area to half.
484,"Minimum number of steps required to reach origin from a given point | C ++ program for the above approach ; Function to find the minimum moves required to reach origin from ( a , b ) ; Stores the minimum number of moves ; Check if the absolute difference is 1 or 0 ; Store the minimum of a , b ; Store the maximum of a , b ; Print the answer ; Driver Code ; Given co - ordinates ; Function Call","#include <bits/stdc++.h>
using namespace std;
void findMinMoves(int a, int b) {
  int ans = 0;
  if (a == b || abs(a - b) == 1) {
    ans = a + b;
  } else {
    int k = min(a, b);
    int j = max(a, b);
    ans = 2 * k + 2 * (j - k) - 1;
  }
  cout << ans;
}
int main() {
  int a = 3, b = 5;
  findMinMoves(a, b);
  return 0;
}",Minimum number of steps required to reach origin from a given point.
485,Count even sum pairs possible by selecting two integers from two given ranges respectively | C ++ program to implement the above approach ; Function to count even sum pairs in the given range ; Stores the count of even numbers between 1 to X ; Stores the count of odd numbers between 1 to X ; Stores the count of even numbers between 1 to Y ; Stores the count of odd numbers between 1 to Y ; Stores the count of pairs having even sum ; Retuens the count of pairs having even sum ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
long long cntEvenSumPairs(long long X, long long Y) {
  long long cntXEvenNums = X / 2;
  long long cntXOddNums = (X + 1) / 2;
  long long cntYEvenNums = Y / 2;
  long long cntYOddNums = (Y + 1) / 2;
  long long cntPairs =
      (cntXEvenNums * 1 LL * cntYEvenNums) + (cntXOddNums * 1 LL * cntYOddNums);
  return cntPairs;
}
int main() {
  long long X = 2;
  long long Y = 3;
  cout << cntEvenSumPairs(X, Y);
  return 0;
}",Count even sum pairs possible by selecting two integers from two given ranges respectively.
486,Minimize array elements required to be incremented or decremented to convert given array into a Fibonacci Series | C ++ program for the above approach ; Function to calculate minimum number of moves to make the sequence a Fibonacci series ; If number of elements is less than 3 ; Initialize the value of the result ; Try all permutations of the first two elements ; Value of first element after operation ; Value of second element after operation ; Calculate number of moves for rest of the elements of the array ; Element at idx index ; If it is not possible to change the element in atmost one move ; Otherwise ; Update the answer ; Return the answer ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
int minMoves(vector<int> arr) {
  int N = arr.size();
  if (N <= 2)
    return 0;
  int ans = INT_MAX;
  for (int i = -1; i <= 1; i++) {
    for (int j = -1; j <= 1; j++) {
      int num1 = arr[0] + i;
      int num2 = arr[1] + j;
      int flag = 1;
      int moves = abs(i) + abs(j);
      for (int idx = 2; idx < N; idx++) {
        int num = num1 + num2;
        if (abs(arr[idx] - num) > 1)
          flag = 0;
        else
          moves += abs(arr[idx] - num);
        num1 = num2;
        num2 = num;
      }
      if (flag)
        ans = min(ans, moves);
    }
  }
  if (ans == INT_MAX)
    return -1;
  return ans;
}
int main() {
  vector<int> arr = {4, 8, 9, 17, 27};
  cout << minMoves(arr) << endl;
  return 0;
}",Minimize array elements required to be incremented or decremented to convert given array into a Fibonacci Series.
487,Queries to calculate sum of array elements present at every Yth index starting from the index X | C ++ program for the above approach ; Function to Find the sum of arr [ x ] + arr [ x + y ] + arr [ x + 2 * y ] + ... for all queries ; Iterate over each query ; Stores the sum of arr [ x ] + arr [ x + y ] + arr [ x + 2 * y ] + ... ; Traverse the array and calculate the sum of the expression ; Update sum ; Update x ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
void querySum(int arr[], int N, int Q[][2], int M) {
  for (int i = 0; i < M; i++) {
    int x = Q[i][0];
    int y = Q[i][1];
    int sum = 0;
    while (x < N) {
      sum += arr[x];
      x += y;
    }
    cout << sum << "" "";
  }
}
int main() {
  int arr[] = {1, 2, 7, 5, 4};
  int Q[][2] = {{2, 1}, {3, 2}};
  int N = sizeof(arr) / sizeof(arr[0]);
  int M = sizeof(Q) / sizeof(Q[0]);
  querySum(arr, N, Q, M);
  return 0;
}",Queries to calculate sum of array elements present at every Yth index starting from the index X.
488,Calculate Bitwise OR of two integers from their given Bitwise AND and Bitwise XOR values | C ++ program to implement the above approach ; Function to calculate Bitwise OR from given bitwise XOR and bitwise AND values ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
int findBitwiseORGivenXORAND(int X, int Y) { return X + Y; }
int main() {
  int X = 5, Y = 2;
  cout << findBitwiseORGivenXORAND(X, Y);
}",Calculate Bitwise OR of two integers from their given Bitwise AND and Bitwise XOR values.
489,Check if a given value can be reached from another value in a Circular Queue by K | C ++ program for the above approach ; Function to return GCD of two numbers a and b ; Base Case ; Recursively Find the GCD ; Function to check of B can be reaced from A with a jump of K elements in the circular queue ; Find GCD of N and K ; If A - B is divisible by gcd then print Yes ; Otherwise ; Driver Code ; Function Call,"#include <bits/stdc++.h>
using namespace std;
int GCD(int a, int b) {
  if (b == 0)
    return a;
  return GCD(b, a % b);
}
void canReach(int N, int A, int B, int K) {
  int gcd = GCD(N, K);
  if (abs(A - B) % gcd == 0) {
    cout << ""Yes"";
  } else {
    cout << ""No"";
  }
}
int main() {
  int N = 5, A = 2, B = 1, K = 2;
  canReach(N, A, B, K);
  return 0;
}",Check if a given value can be reached from another value in a Circular Queue by K.
490,Count of subarrays having sum equal to its length | Set 2 | C ++ program for the above approach ; Function that counts the subarrays with sum of its elements as its length ; Store count of elements upto current element with length i ; Stores the final count of subarray ; Stores the prefix sum ; If size of subarray is 1 ; Iterate the array ; Find the sum ; Update frequency in map ; Print the total count ; Driver Code ; Given array arr [ ] ; Size of array ; Function Call,"#include <bits/stdc++.h>
using namespace std;
int countOfSubarray(int arr[], int N) {
  unordered_map<int, int> mp;
  int answer = 0;
  int sum = 0;
  mp[1]++;
  for (int i = 0; i < N; i++) {
    sum += arr[i];
    answer += mp[sum - i];
    mp[sum - i]++;
  }
  cout << answer;
}
int main() {
  int arr[] = {1, 0, 2, 1, 2, -2, 2, 4};
  int N = sizeof arr / sizeof arr[0];
  countOfSubarray(arr, N);
  return 0;
}",Count of subarrays having sum equal to its length.
491,Split first N natural numbers into two sets with minimum absolute difference of their sums | C ++ program to implement the above approach ; Function to split the first N natural numbers into two sets having minimum absolute difference of their sums ; Stores the sum of elements of set1 ; Stores the sum of elements of set2 ; Traverse first N natural numbers ; Check if sum of elements of set1 is less than or equal to sum of elements of set2 ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
int minAbsDiff(int N) {
  int sumSet1 = 0;
  int sumSet2 = 0;
  for (int i = N; i > 0; i--) {
    if (sumSet1 <= sumSet2) {
      sumSet1 += i;
    } else {
      sumSet2 += i;
    }
  }
  return abs(sumSet1 - sumSet2);
}
int main() {
  int N = 6;
  cout << minAbsDiff(N);
}",Split first N natural numbers into two sets with minimum absolute difference of their sums.
492,"Check if a number is prime in Flipped Upside Down , Mirror Flipped and Mirror Flipped Upside Down | C ++ program to implement the above approach ; Function to check if N contains digits 0 , 1 , 2 , 5 , 8 only ; Extract digits of N ; Return false if any of these digits are present ; Function to check if N is prime or not ; Check for all factors ; Function to check if n is prime in all the desired forms ; Driver Code","#include <bits/stdc++.h>
using namespace std;
bool checkDigits(int n) {
  do {
    int r = n % 10;
    if (r == 3 r == 4 r == 6 r == 7 r == 9)
      return false;
    n /= 10;
  } while (n != 0);
  return true;
}
bool isPrime(int n) {
  if (n <= 1)
    return false;
  for (int i = 2; i * i <= n; i++) {
    if (n % i == 0)
      return false;
  }
  return true;
}
int isAllPrime(int n) { return isPrime(n) && checkDigits(n); }
int main() {
  int N = 101;
  if (isAllPrime(N))
    cout << ""Yes"";
  else
    cout << ""No"";
  return 0;
}","Check if a number is prime in Flipped Upside Down , Mirror Flipped and Mirror Flipped Upside Down."
493,Minimum Cost required to generate a balanced Bracket Sequence | C ++ Program to implement the above approach ; Function to calculate the minimum cost required to generate a balanced bracket sequence ; Stores the count of unbalanced open brackets ; Stores the count of unbalanced closed brackets ; Stores the count of open brackets ; Stores the count of closed brackets ; If open brace is encountered ; Otherwise ; If no unbalanced open brackets are present ; Increase count of unbalanced closed brackets ; Otherwise ; Reduce count of unbalanced open brackets ; Increase count of closed brackets ; Calculate lower bound of minimum cost ; Reduce excess open or closed brackets to prevent counting them twice ; Update answer by adding minimum of removing both unbalanced open and closed brackets or inserting closed unbalanced brackets to end of string ; Print the result ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
void minCost(string str, int a, int b) {
  int openUnbalanced = 0;
  int closedUnbalanced = 0;
  int openCount = 0;
  int closedCount = 0;
  for (int i = 0; str[i] != '\0'; i++) {
    if (str[i] == '(') {
      openUnbalanced++;
      openCount++;
    } else {
      if (openUnbalanced == 0)
        closedUnbalanced++;
      else
        openUnbalanced--;
      closedCount++;
    }
  }
  int result = a * (abs(openCount - closedCount));
  if (closedCount > openCount)
    closedUnbalanced -= (closedCount - openCount);
  if (openCount > closedCount)
    openUnbalanced -= (openCount - closedCount);
  result += min(a * (openUnbalanced + closedUnbalanced), b * closedUnbalanced);
  cout << result << endl;
}
int main() {
  string str = ""))()(()()("";
  int A = 1, B = 3;
  minCost(str, A, B);
  return 0;
}",Minimum Cost required to generate a balanced Bracket Sequence.
494,Count of permutations such that sum of K numbers from given range is even | C ++ program for the above approach ; Function to return the number of all permutations such that sum of K numbers in range is even ; Find total count of even and odd number in given range ; Iterate loop k times and update even_sum & odd_sum using previous values ; Update the prev_even and odd_sum ; Even sum ; Odd sum ; Return even_sum ; Driver Code ; Given ranges ; Length of permutation ; Function call,"#include <bits/stdc++.h>
using namespace std;
int countEvenSum(int low, int high, int k) {
  int even_count = high / 2 - (low - 1) / 2;
  int odd_count = (high + 1) / 2 - low / 2;
  long even_sum = 1;
  long odd_sum = 0;
  for (int i = 0; i < k; i++) {
    long prev_even = even_sum;
    long prev_odd = odd_sum;
    even_sum = (prev_even * even_count) + (prev_odd * odd_count);
    odd_sum = (prev_even * odd_count) + (prev_odd * even_count);
  }
  cout << (even_sum);
}
int main() {
  int low = 4;
  int high = 5;
  int K = 3;
  countEvenSum(low, high, K);
}",Count of permutations such that sum of K numbers from given range is even.
495,Count of N digit Numbers whose sum of every K consecutive digits is equal | Set 2 | C ++ Program to implement the above approach ; Function to count the number of N - digit numbers such that sum of every K consecutive digits are equal ; Print the answer ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
void count(int n, int k) {
  long count = (long)(pow(10, k) - pow(10, k - 1));
  cout << (count);
}
int main() {
  int n = 2, k = 1;
  count(n, k);
}",Count of N digit Numbers whose sum of every K consecutive digits is equal.
496,Sum of largest divisor of numbers upto N not divisible by given prime number P | C ++ program for the above approach ; Function to find the sum of largest divisors of numbers in range 1 to N not divisible by prime number P ; Total sum upto N ; If no multiple of P exist up to N ; If only P itself is in the range from 1 to N ; Sum of those that are divisible by P ; Recursively function call to find the sum for N / P ; Driver Code ; Given N and P ; Function Call,"#include <bits/stdc++.h>
using namespace std;
int func(int N, int P) {
  int sumUptoN = (N * (N + 1) / 2);
  int sumOfMultiplesOfP;
  if (N < P) {
    return sumUptoN;
  } else if ((N / P) == 1) {
    return sumUptoN - P + 1;
  }
  sumOfMultiplesOfP = ((N / P) * (2 * P + (N / P - 1) * P)) / 2;
  return (sumUptoN + func(N / P, P) - sumOfMultiplesOfP);
}
int main() {
  int N = 10, P = 5;
  cout << func(N, P) << ""\n"";
  return 0;
}",Sum of largest divisor of numbers upto N not divisible by given prime number P.
497,Count of right shifts for each array element to be in its sorted position | C ++ Program to implement the approach ; Function to find the right shifts required for each element to reach its sorted array position in A [ ] ; Stores required number of shifts for each element ; If the element is at sorted position ; Otherwise ; Calculate right shift ; Print the respective shifts ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
void findShifts(int A[], int N) {
  int shift[N];
  for (int i = 0; i < N; i++) {
    if (i == A[i] - 1)
      shift[i] = 0;
    else
      shift[i] = (A[i] - 1 - i + N) % N;
  }
  for (int i = 0; i < N; i++)
    cout << shift[i] << "" "";
}
int main() {
  int arr[] = {1, 4, 3, 2, 5};
  int N = sizeof(arr) / sizeof(arr[0]);
  findShifts(arr, N);
  return 0;
}",Count of right shifts for each array element to be in its sorted position.
498,Construct a matrix with sum equal to the sum of diagonal elements | C ++ program to implement the above approach ; Function to construct matrix with diagonal sum equal to matrix sum ; If diagonal position ; Positive element ; Negative element ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
void constructmatrix(int N) {
  bool check = true;
  for (int i = 0; i < N; i++) {
    for (int j = 0; j < N; j++) {
      if (i == j) {
        cout << 1 << "" "";
      } else if (check) {
        cout << 2 << "" "";
        check = false;
      } else {
        cout << -2 << "" "";
        check = true;
      }
    }
    cout << endl;
  }
}
int main() {
  int N = 5;
  constructmatrix(5);
  return 0;
}",Construct a matrix with sum equal to the sum of diagonal elements.
499,Minimum count of numbers required with unit digit X that sums up to N | C ++ Program to implement the above approach ; Function to calculate and return the minimum number of times a number with unit digit X needs to be added to get a sum N ; Calculate the number of additions required to get unit digit of N ; If unit digit of N cannot be obtained ; Function to return the minimum number required to represent N ; Stores unit digit of N ; Stores minimum addition of X required to obtain unit digit of N ; If unit digit of N cannot be obtained ; Otherwise ; If N is greater than or equal to ( X * times ) ; Minimum count of numbers that needed to represent N ; Representation not possible ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
int check(int unit_digit, int X) {
  int times, digit;
  for (int times = 1; times <= 10; times++) {
    digit = (X * times) % 10;
    if (digit == unit_digit)
      return times;
  }
  return -1;
}
int getNum(int N, int X) {
  int unit_digit;
  unit_digit = N % 10;
  int times = check(unit_digit, X);
  if (times == -1)
    return times;
  else {
    if (N >= (times * X))
      return times;
    else
      return -1;
  }
}
int main() {
  int N = 58, X = 7;
  cout << getNum(N, X) << endl;
  return 0;
}",Minimum count of numbers required with unit digit X that sums up to N.
500,Minimum number of points required to cover all blocks of a 2 | C ++ program for the above approach ; Function to find the minimum number of Points required to cover a grid ; If number of block is even ; Return the minimum points ; Driver Code ; Given size of grid ; Function Call,"#include <bits/stdc++.h>
using namespace std;
int minPoints(int n, int m) {
  int ans = 0;
  if ((n % 2 != 0) && (m % 2 != 0)) {
    ans = ((n * m) / 2) + 1;
  } else {
    ans = (n * m) / 2;
  }
  return ans;
}
int main() {
  int N = 5, M = 7;
  cout << minPoints(N, M);
  return 0;
}",Minimum number of points required to cover all blocks of a 2.
501,Largest lexicographical string with at most K consecutive elements | C ++ code for the above approach ; Function to find the largest lexicographical string with given constraints . ; vector containing frequency of each character . ; assigning frequency to ; empty string of string class type ; loop to iterate over maximum priority first . ; if frequency is greater than or equal to k . ; temporary variable to operate in - place of k . ; concatenating with the resultant string ans . ; handling k case by adjusting with just smaller priority element . ; condition to verify if index j does have frequency greater than 0 ; ; if no such element is found than string can not be processed further . ; if frequency is greater than 0 and less than k . ; here we don 't need to fix K  consecutive element criteria. ; otherwise check for next possible element . ; Driver program,"#include <bits/stdc++.h>
using namespace std;
#definelllonglongint string getLargestString(string s, ll k) {
  vector<int> frequency_array(26, 0);
  for (int i = 0; i < s.length(); i++) {
    frequency_array[s[i] - 'a']++;
  }
  string ans = """";
  for (int i = 25; i >= 0;) {
    if (frequency_array[i] > k) {
      int temp = k;
      string st(1, i + 'a');
      while (temp > 0) {
        ans += st;
        temp--;
      }
      frequency_array[i] -= k;
      int j = i - 1;
      while (frequency_array[j] <= 0 && j >= 0) {
        j--;
      }
      if (frequency_array[j] > 0 && j >= 0) {
        string str(1, j + 'a');
        ans += str;
        frequency_array[j] -= 1;
      } else {
        break;
      }
    } else if (frequency_array[i] > 0) {
      int temp = frequency_array[i];
      frequency_array[i] -= temp;
      string st(1, i + 'a');
      while (temp > 0) {
        ans += st;
        temp--;
      }
    } else {
      i--;
    }
  }
  return ans;
}
int main() {
  string S = ""xxxxzza"";
  int k = 3;
  cout << getLargestString(S, k) << endl;
  return 0;
}",Largest lexicographical string with at most K consecutive elements.
502,Minimum operations to make all elements equal using the second array | C ++ implementation to find the minimum operations make all elements equal using the second array ; Function to find the minimum operations required to make all elements of the array equal ; Minimum element of A [ ] ; Traverse through all final values ; Variable indicating whether all elements can be converted to x or not ; Total operations ; Traverse through all array elements ; All elements can 't  be converted to x ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
int minOperations(int a[], int b[], int n) {
  int minA = *min_element(a, a + n);
  for (int x = minA; x >= 0; x--) {
    bool check = 1;
    int operations = 0;
    for (int i = 0; i < n; i++) {
      if (x % b[i] == a[i] % b[i]) {
        operations += (a[i] - x) / b[i];
      } else {
        check = 0;
        break;
      }
    }
    if (check)
      return operations;
  }
  return -1;
}
int main() {
  int N = 5;
  int A[N] = {5, 7, 10, 5, 15};
  int B[N] = {2, 2, 1, 3, 5};
  cout << minOperations(A, B, N);
  return 0;
}",Minimum operations to make all elements equal using the second array.
503,Find the maximum sum ( a + b ) for a given input integer N satisfying the given condition | C ++ implementation to find the largest value of a + b satisfying the given condition ; Function to return the maximum sum of a + b satisfying the given condition ; Initialize max_sum ; Consider all the possible pairs ; Check if the product is divisible by the sum ; Storing the maximum sum in the max_sum variable ; Return the max_sum value ; Driver code,"#include <bits/stdc++.h>
using namespace std;
int getLargestSum(int N) {
  int max_sum = 0;
  for (int i = 1; i <= N; i++) {
    for (int j = i + 1; j <= N; j++) {
      if (i * j % (i + j) == 0)
        max_sum = max(max_sum, i + j);
    }
  }
  return max_sum;
}
int main() {
  int N = 25;
  int max_sum = getLargestSum(N);
  cout << max_sum << endl;
  return 0;
}",Find the maximum sum ( a + b ) for a given input integer N satisfying the given condition.
504,Maximize the sum of array after multiplying a prefix and suffix by | C ++ implementation to find the maximum sum of the array by multiplying the prefix and suffix of the array by - 1 ; Kadane 's algorithm to find the maximum subarray sum ; Loop to find the maximum subarray array sum in the given array ; Function to find the maximum sum of the array by multiplying the prefix and suffix by - 1 ; Total intital sum ; Loop to find the maximum sum of the array ; Maximum value ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
int maxSubArraySum(int a[], int size) {
  int max_so_far = INT_MIN, max_ending_here = 0;
  for (int i = 0; i < size; i++) {
    max_ending_here = max_ending_here + a[i];
    if (max_ending_here < 0)
      max_ending_here = 0;
    if (max_so_far < max_ending_here)
      max_so_far = max_ending_here;
  }
  return max_so_far;
}
int maxSum(int a[], int n) {
  int S = 0;
  for (int i = 0; i < n; i++)
    S += a[i];
  int X = maxSubArraySum(a, n);
  return 2 * X - S;
}
int main() {
  int a[] = {-1, -2, -3};
  int n = sizeof(a) / sizeof(a[0]);
  int max_sum = maxSum(a, n);
  cout << max_sum;
  return 0;
}",Maximize the sum of array after multiplying a prefix and suffix by.
505,"Count of interesting primes upto N | C ++ program to find the number of interesting primes up to N ; Function to check if a number is prime or not ; If n is divisible by any number between 2 and sqrt ( n ) , it is not prime ; Function to check if a number is perfect square or not ; Find floating point value of square root of x . ; If square root is an integer ; Function to find the number of interesting primes less than equal to N . ; Check whether the number is prime or not ; Iterate for values of b ; Check condition for a ; Return the required answer ; Driver code","#include <bits/stdc++.h>
using namespace std;
bool isPrime(int n) {
  int flag = 1;
  for (int i = 2; i * i <= n; i++) {
    if (n % i == 0) {
      flag = 0;
      break;
    }
  }
  return (flag == 1 ? true : false);
}
bool isPerfectSquare(int x) {
  long double sr = sqrt(x);
  return ((sr - floor(sr)) == 0);
}
int countInterestingPrimes(int n) {
  int answer = 0;
  for (int i = 2; i <= n; i++) {
    if (isPrime(i)) {
      for (int j = 1; j * j * j * j <= i; j++) {
        if (isPerfectSquare(i - j * j * j * j)) {
          answer++;
          break;
        }
      }
    }
  }
  return answer;
}
int main() {
  int N = 10;
  cout << countInterestingPrimes(N);
  return 0;
}",Count of interesting primes upto N.
506,Maximize the number by flipping at most K bits | C ++ implementation of the approach ; Function to convert decimal number n to its binary representation stored as an array arr [ ] ; Function to convert the number represented as a binary array arr [ ] into its decimal equivalent ; Function to return the maximized number by flipping atmost k bits ; Number of bits in n ; Find the binary representation of n ; To count the number of 0 s flipped ; Return the decimal equivalent of the maximized number ; Driver code,"#include <bits/stdc++.h>
using namespace std;
void decBinary(int arr[], int n) {
  int k = log2(n);
  while (n > 0) {
    arr[k--] = n % 2;
    n /= 2;
  }
}
int binaryDec(int arr[], int n) {
  int ans = 0;
  for (int i = 0; i < n; i++)
    ans += arr[i] << (n - i - 1);
  return ans;
}
int maxNum(int n, int k) {
  int l = log2(n) + 1;
  int a[l] = {0};
  decBinary(a, n);
  int cn = 0;
  for (int i = 0; i < l; i++) {
    if (a[i] == 0 && cn < k) {
      a[i] = 1;
      cn++;
    }
  }
  return binaryDec(a, l);
}
int main() {
  int n = 4, k = 1;
  cout << maxNum(n, k);
  return 0;
}",Maximize the number by flipping at most K bits.
507,Find the subsequence with given sum in a superincreasing sequence | C ++ implementation of the approach ; Function to find the required subsequence ; Current element cannot be a part of the required subsequence ; Include current element in the required subsequence So update the sum ; Print the elements of the required subsequence ; If the current element was included in the subsequence ; Driver code,"#include <bits/stdc++.h>
using namespace std;
void findSubSeq(int arr[], int n, int sum) {
  for (int i = n - 1; i >= 0; i--) {
    if (sum < arr[i])
      arr[i] = -1;
    else
      sum -= arr[i];
  }
  for (int i = 0; i < n; i++) {
    if (arr[i] != -1)
      cout << arr[i] << "" "";
  }
}
int main() {
  int arr[] = {17, 25, 46, 94, 201, 400};
  int n = sizeof(arr) / sizeof(int);
  int sum = 272;
  findSubSeq(arr, n, sum);
  return 0;
}",Find the subsequence with given sum in a superincreasing sequence.
508,Find the most valued alphabet in the String | C ++ implementation of the approach ; Function to return the maximum valued alphabet ; To store the first and the last occurrence of all the characters ; Set the first and the last occurrence of all the characters to - 1 ; Update the occurrences of the characters ; Only set the first occurrence if it hasn 't already been set ; To store the result ; For every alphabet ; If current alphabet doesn 't appear  in the given string ; If the current character has the highest value so far ; Driver code,"#include <bits/stdc++.h>
using namespace std;
const int MAX = 26;
char maxAlpha(string str, int len) {
  int first[MAX], last[MAX];
  for (int i = 0; i < MAX; i++) {
    first[i] = -1;
    last[i] = -1;
  }
  for (int i = 0; i < len; i++) {
    int index = (str[i] - 'a');
    if (first[index] == -1)
      first[index] = i;
    last[index] = i;
  }
  int ans = -1, maxVal = -1;
  for (int i = 0; i < MAX; i++) {
    if (first[i] == -1)
      continue;
    if ((last[i] - first[i]) > maxVal) {
      maxVal = last[i] - first[i];
      ans = i;
    }
  }
  return (char)(ans + 'a');
}
int main() {
  string str = ""abbba"";
  int len = str.length();
  cout << maxAlpha(str, len);
  return 0;
}",Find the most valued alphabet in the String.
509,Queries for number of distinct elements from a given index till last index in an array | C ++ implementation of the approach ; Function to perform queries to find number of distinct elements from a given index till last index in an array ; Check if current element already visited or not ; If not visited store current counter and increment it and mark check as 1 ; Otherwise if visited simply store current counter ; Perform queries ; Driver code,"#include <bits/stdc++.h>
using namespace std;
#defineMAX100001 void find_distinct(int a[], int n, int q, int queries[]) {
  int check[MAX] = {0};
  int idx[MAX];
  int cnt = 1;
  for (int i = n - 1; i >= 0; i--) {
    if (check[a[i]] == 0) {
      idx[i] = cnt;
      check[a[i]] = 1;
      cnt++;
    } else {
      idx[i] = cnt - 1;
    }
  }
  for (int i = 0; i < q; i++) {
    int m = queries[i];
    cout << idx[m] << "" "";
  }
}
int main() {
  int a[] = {1, 2, 3, 1, 2, 3, 4, 5};
  int n = sizeof(a) / sizeof(int);
  int queries[] = {0, 3, 5, 7};
  int q = sizeof(queries) / sizeof(int);
  find_distinct(a, n, q, queries);
  return 0;
}",Queries for number of distinct elements from a given index till last index in an array.
510,Convert given integer X to the form 2 ^ N | C ++ implementation of the approach ; Function to return the count of operations required ; To store the powers of 2 ; Temporary variable to store x ; To store the index of smaller number larger than x ; To store the count of operations ; Stores the index of number in the form of 2 ^ n - 1 ; If x is already in the form 2 ^ n - 1 then no operation is required ; If number is less than x increase the index ; Calculate all the values ( x xor 2 ^ n - 1 ) for all possible n ; Only take value which is closer to the number ; If number is in the form of 2 ^ n - 1 then break ; Return the count of operations required to obtain the number ; Driver code,"#include <bits/stdc++.h>
using namespace std;
const int MAX = 24;
int countOp(int x) {
  int arr[MAX];
  arr[0] = 1;
  for (int i = 1; i < MAX; i++)
    arr[i] = arr[i - 1] * 2;
  int temp = x;
  bool flag = true;
  int ans;
  int operations = 0;
  bool flag2 = false;
  for (int i = 0; i < MAX; i++) {
    if (arr[i] - 1 == x)
      flag2 = true;
    if (arr[i] > x) {
      ans = i;
      break;
    }
  }
  if (flag2)
    return 0;
  while (flag) {
    if (arr[ans] < x)
      ans++;
    operations++;
    for (int i = 0; i < MAX; i++) {
      int take = x ^ (arr[i] - 1);
      if (take <= arr[ans] - 1) {
        if (take > temp)
          temp = take;
      }
    }
    if (temp == arr[ans] - 1) {
      flag = false;
      break;
    }
    temp++;
    operations++;
    x = temp;
    if (x == arr[ans] - 1)
      flag = false;
  }
  return operations;
}
int main() {
  int x = 39;
  cout << countOp(x);
  return 0;
}",Convert given integer X to the form 2 ^ N.
511,Minimum number of given operations required to reduce the array to 0 element | C ++ implementation of the approach ; Function to return the minimum operations required ; Count the frequency of each element ; Maximum element from the array ; Find all the multiples of i ; Delete the multiples ; Increment the operations ; Driver code,"#include <bits/stdc++.h>
using namespace std;
int minOperations(int *arr, int n) {
  int maxi, result = 0;
  vector<int> freq(1000001, 0);
  for (int i = 0; i < n; i++) {
    int x = arr[i];
    freq[x]++;
  }
  maxi = *(max_element(arr, arr + n));
  for (int i = 1; i <= maxi; i++) {
    if (freq[i] != 0) {
      for (int j = i * 2; j <= maxi; j = j + i) {
        freq[j] = 0;
      }
      result++;
    }
  }
  return result;
}
int main() {
  int arr[] = {2, 4, 2, 4, 4, 4};
  int n = sizeof(arr) / sizeof(arr[0]);
  cout << minOperations(arr, n);
  return 0;
}",Minimum number of given operations required to reduce the array to 0 element.
512,Minimum LCM and GCD possible among all possible sub | C ++ implementation of the approach ; Function to return minimum GCD among all subarrays ; Minimum GCD among all sub - arrays will be the GCD of all the elements of the array ; Function to return minimum LCM among all subarrays ; Minimum LCM among all sub - arrays will be the minimum element from the array ; Driver code,"#include <bits/stdc++.h>
using namespace std;
int minGCD(int arr[], int n) {
  int minGCD = 0;
  for (int i = 0; i < n; i++)
    minGCD = __gcd(minGCD, arr[i]);
  return minGCD;
}
int minLCM(int arr[], int n) {
  int minLCM = arr[0];
  for (int i = 1; i < n; i++)
    minLCM = min(minLCM, arr[i]);
  return minLCM;
}
int main() {
  int arr[] = {2, 66, 14, 521};
  int n = sizeof(arr) / sizeof(arr[0]);
  cout << ""LCM = "" << minLCM(arr, n) << "", GCD = "" << minGCD(arr, n);
  return 0;
}",Minimum LCM and GCD possible among all possible sub.
513,"Form lexicographically smallest string with minimum replacements having equal number of 0 s , 1 s and 2 s | C ++ implementation of the approach ; Function that returns the modified lexicographically smallest string after performing minimum number of given operations ; Stores the initial frequencies of characters 0 s , 1 s and 2 s ; Stores number of processed characters upto that point of each type ; Required number of characters of each type ; If the current type has already reqd number of characters , no need to perform any operation ; Process all 3 cases ; Check for 1 first ; Else 2 ; Here we need to check processed [ 1 ] only for 2 since 0 is less than 1 and we can replace it anytime ; Here we can replace 2 with 0 and 1 anytime ; keep count of processed characters of each type ; Driver Code","#include <bits/stdc++.h>
using namespace std;
string formStringMinOperations(string s) {
  int count[3] = {0};
  for (auto &c : s)
    count++;
  int processed[3] = {0};
  int reqd = (int)s.size() / 3;
  for (int i = 0; i < s.size(); i++) {
    if (count[s[i] - '0'] == reqd)
      continue;
    if (s[i] == '0' && count[0] > reqd && processed[0] >= reqd) {
      if (count[1] < reqd) {
        s[i] = '1';
        count[1]++;
        count[0]--;
      } else if (count[2] < reqd) {
        s[i] = '2';
        count[2]++;
        count[0]--;
      }
    }
    if (s[i] == '1' && count[1] > reqd) {
      if (count[0] < reqd) {
        s[i] = '0';
        count[0]++;
        count[1]--;
      } else if (count[2] < reqd && processed[1] >= reqd) {
        s[i] = '2';
        count[2]++;
        count[1]--;
      }
    }
    if (s[i] == '2' && count[2] > reqd) {
      if (count[0] < reqd) {
        s[i] = '0';
        count[0]++;
        count[2]--;
      } else if (count[1] < reqd) {
        s[i] = '1';
        count[1]++;
        count[2]--;
      }
    }
    processed[s[i] - '0']++;
  }
  return s;
}
int main() {
  string s = ""011200"";
  cout << formStringMinOperations(s);
  return 0;
}","Form lexicographically smallest string with minimum replacements having equal number of 0 s , 1 s and 2 s."
514,"Minimum number of adjacent swaps for arranging similar elements together | C ++ Program to find the minimum number of adjacent swaps to arrange similar items together ; Function to find minimum swaps ; visited array to check if value is seen already ; If the arr [ i ] is seen first time ; stores the number of swaps required to find the correct position of current element 's partner ; Increment count only if the current element has not been visited yet ( if is visited , means it has already been placed at its correct position ) ; If current element 's partner is found ; Driver Code","#include <bits/stdc++.h>
using namespace std;
int findMinimumAdjacentSwaps(int arr[], int N) {
  bool visited[N + 1];
  int minimumSwaps = 0;
  memset(visited, false, sizeof(visited));
  for (int i = 0; i < 2 * N; i++) {
    if (visited[arr[i]] == false) {
      visited[arr[i]] = true;
      int count = 0;
      for (int j = i + 1; j < 2 * N; j++) {
        if (visited[arr[j]] == false)
          count++;
        else if (arr[i] == arr[j])
          minimumSwaps += count;
      }
    }
  }
  return minimumSwaps;
}
int main() {
  int arr[] = {1, 2, 3, 3, 1, 2};
  int N = sizeof(arr) / sizeof(arr[0]);
  N /= 2;
  cout << findMinimumAdjacentSwaps(arr, N) << endl;
  return 0;
}",Minimum number of adjacent swaps for arranging similar elements together.
515,"Largest palindromic number by permuting digits | CPP program to print the largest palindromic number by permuting digits of a number ; function to check if a number can be permuted to form a palindrome number ; counts the occurrence of number which is odd ; if occurrence is odd ; if number exceeds 1 ; function to print the largest palindromic number by permuting digits of a number ; string length ; map that marks the occurrence of a number ; check the possibility of a palindromic number ; string array that stores the largest permuted palindromic number ; pointer of front ; greedily start from 9 to 0 and place the greater number in front and odd in the middle ; if the occurrence of number is odd ; place one odd occurring number in the middle ; decrease the count ; place the rest of numbers greedily ; if all numbers occur even times , then place greedily ; place greedily at front ; 2 numbers are placed , so decrease the count ; increase placing position ; print the largest string thus formed ; Driver Code","#include <bits/stdc++.h>
using namespace std;
bool possibility(unordered_map<int, int> m, int length, string s) {
  int countodd = 0;
  for (int i = 0; i < length; i++) {
    if (m[s[i] - '0'] & 1)
      countodd++;
    if (countodd > 1)
      return false;
  }
  return true;
}
void largestPalindrome(string s) {
  int l = s.length();
  unordered_map<int, int> m;
  for (int i = 0; i < l; i++)
    m[s[i] - '0']++;
  if (possibility(m, l, s) == false) {
    cout << ""Palindrome cannot be formed"";
    return;
  }
  char largest[l];
  int front = 0;
  for (int i = 9; i >= 0; i--) {
    if (m[i] & 1) {
      largest[l / 2] = char(i + 48);
      m[i]--;
      while (m[i] > 0) {
        largest[front] = char(i + 48);
        largest[l - front - 1] = char(i + 48);
        m[i] -= 2;
        front++;
      }
    } else {
      while (m[i] > 0) {
        largest[front] = char(i + 48);
        largest[l - front - 1] = char(i + 48);
        m[i] -= 2;
        front++;
      }
    }
  }
  for (int i = 0; i < l; i++)
    cout << largest[i];
}
int main() {
  string s = ""313551"";
  largestPalindrome(s);
  return 0;
}",Largest palindromic number by permuting digits.
516,Minimum Swaps for Bracket Balancing | C ++ program to count swaps required to balance string ; Function to calculate swaps required ; Keep track of ' [ ' ; To count number of encountered ' [ ' ; To track position of next ' [ ' in pos ; To store result ; Increment count and move p to next position ; We have encountered an unbalanced part of string ; Increment sum by number of swaps required i . e . position of next ' [ ' - current position ; Reset count to 1 ; Driver code,"#include <algorithm>
#include <iostream>
#include <vector>
using namespace std;
long swapCount(string s) {
  vector<int> pos;
  for (int i = 0; i < s.length(); ++i)
    if (s[i] == '[')
      pos.push_back(i);
  int count = 0;
  int p = 0;
  long sum = 0;
  for (int i = 0; i < s.length(); ++i) {
    if (s[i] == '[') {
      ++count;
      ++p;
    } else if (s[i] == ']')
      --count;
    if (count < 0) {
      sum += pos[p] - i;
      swap(s[i], s[pos[p]]);
      ++p;
      count = 1;
    }
  }
  return sum;
}
int main() {
  string s = ""[]][]["";
  cout << swapCount(s) << ""\n"";
  s = ""[[][]]"";
  cout << swapCount(s) << ""\n"";
  return 0;
}",Minimum Swaps for Bracket Balancing.
517,"Minimum Cost to cut a board into squares | C ++ program to divide a board into m * n squares ; method returns minimum cost to break board into m * n squares ; sort the horizontal cost in reverse order ; sort the vertical cost in reverse order ; initialize current width as 1 ; loop until one or both cost array are processed ; increase current horizontal part count by 1 ; increase current vertical part count by 1 ; loop for horizontal array , if remains ; loop for vertical array , if remains ; Driver code to test above methods","#include <bits/stdc++.h>
using namespace std;
int minimumCostOfBreaking(int X[], int Y[], int m, int n) {
  int res = 0;
  sort(X, X + m, greater<int>());
  sort(Y, Y + n, greater<int>());
  int hzntl = 1, vert = 1;
  int i = 0, j = 0;
  while (i < m && j < n) {
    if (X[i] > Y[j]) {
      res += X[i] * vert;
      hzntl++;
      i++;
    } else {
      res += Y[j] * hzntl;
      vert++;
      j++;
    }
  }
  int total = 0;
  while (i < m)
    total += X[i++];
  res += total * vert;
  total = 0;
  while (j < n)
    total += Y[j++];
  res += total * hzntl;
  return res;
}
int main() {
  int m = 6, n = 4;
  int X[m - 1] = {2, 1, 3, 1, 4};
  int Y[n - 1] = {4, 1, 2};
  cout << minimumCostOfBreaking(X, Y, m - 1, n - 1);
  return 0;
}",Minimum Cost to cut a board into squares.
518,"Minimize the count of characters to be added or removed to make String repetition of same substring | C ++ program for the above approach ; Function to find the minimum of the three numbers ; Function to find the minimum number operations required to convert string str1 to str2 using the operations ; Stores the results of subproblems ; Fill dp [ ] [ ] in bottom up manner ; If str1 is empty , then insert all characters of string str2 ; Minimum operations is j ; If str2 is empty , then remove all characters of string str2 ; Minimum operations is i ; If the last characters are same , then ignore last character ; If the last character is different , then find the minimum ; Perform one of the insert , remove and the replace ; Return the minimum number of steps required ; Function to find the minimum number of steps to modify the string such that first half and second half becomes the same ; Stores the minimum number of operations required ; Traverse the given string S ; Find the minimum operations ; Update the ans ; Print the result ; Driver Code","#include <bits/stdc++.h>
using namespace std;
int getMin(int x, int y, int z) { return min(min(x, y), z); }
int editDistance(string str1, string str2, int m, int n) {
  int dp[m + 1][n + 1];
  for (int i = 0; i <= m; i++) {
    for (int j = 0; j <= n; j++) {
      if (i == 0)
        dp[i][j] = j;
      else if (j == 0)
        dp[i][j] = i;
      else if (str1[i - 1] == str2[j - 1])
        dp[i][j] = dp[i - 1][j - 1];
      else {
        dp[i][j] = 1 + getMin(dp[i][j - 1], dp[i - 1][j], dp[i - 1][j - 1]);
      }
    }
  }
  return dp[m][n];
}
void minimumSteps(string &S, int N) {
  int ans = INT_MAX;
  for (int i = 1; i < N; i++) {
    string S1 = S.substr(0, i);
    string S2 = S.substr(i);
    int count = editDistance(S1, S2, S1.length(), S2.length());
    ans = min(ans, count);
  }
  cout << ans <<'';
}
int main() {
  string S = ""aabb"";
  int N = S.length();
  minimumSteps(S, N);
  return 0;
}",Minimize the count of characters to be added or removed to make String repetition of same substring.
519,"Minimize operations to reduce N to 2 by repeatedly reducing by 3 or dividing by 5 | C ++ program for the above approach ; Function to find the minimum number of operations to reduce N to 2 by dividing N by 5 or decrementing by 3 ; Initialize the dp array ; Initialize the array dp [ ] ; For N = 2 number of operations needed is zero ; Iterating over the range [ 1 , N ] ; If it 's not possible to  create current N ; Multiply with 5 ; Adding the value 3 ; Checking if not possible to make the number as 2 ; Return the minimum number of operations ; Driver Code","#include <bits/stdc++.h>
using namespace std;
int minimumOperations(int N) {
  int dp[N + 1];
  int i;
  for (int i = 0; i <= N; i++) {
    dp[i] = 1e9;
  }
  dp[2] = 0;
  for (i = 2; i <= N; i++) {
    if (dp[i] == 1e9)
      continue;
    if (i * 5 <= N) {
      dp[i * 5] = min(dp[i * 5], dp[i] + 1);
    }
    if (i + 3 <= N) {
      dp[i + 3] = min(dp[i + 3], dp[i] + 1);
    }
  }
  if (dp[N] == 1e9)
    return -1;
  return dp[N];
}
int main() {
  int N = 25;
  cout << minimumOperations(N);
  return 0;
}",Minimize operations to reduce N to 2 by repeatedly reducing by 3 or dividing by 5.
520,Maximum profit after buying and selling the stocks with transaction fees | Set 2 | C ++ program for the above approach ; Function to find the maximum profit with transaction fee ; Traversing the stocks for each day ; Update buy and sell ; Return the maximum profit ; Driver code ; Given Input ; Function Call,"#include <bits/stdc++.h>
using namespace std;
int MaxProfit(int arr[], int n, int transactionFee) {
  int buy = -arr[0];
  int sell = 0;
  for (int i = 1; i < n; i++) {
    int temp = buy;
    buy = max(buy, sell - arr[i]);
    sell = max(sell, temp + arr[i] - transactionFee);
  }
  return max(sell, buy);
}
int main() {
  int arr[] = {6, 1, 7, 2, 8, 4};
  int n = sizeof(arr) / sizeof(arr[0]);
  int transactionFee = 2;
  cout << MaxProfit(arr, n, transactionFee);
  return 0;
}",Maximum profit after buying and selling the stocks with transaction fees.
521,"Maximum path sum from top left to bottom right of a matrix passing through one of the given cells | C ++ program for the above approach ; Stores the maximum path sum from the cell ( 1 , 1 ) to ( N , M ) ; Stores the maximum path sum from the cell ( j , j ) to ( N , M ) ; Function to find the maximum path sum from the cell ( 1 , 1 ) to ( N , M ) ; Traverse the first row ; Traverse the first column ; Traverse the matrix ; Update the value of start [ i ] [ j ] ; Function to find the maximum path sum from the cell ( j , j ) to ( N , M ) ; Traverse the last row ; Traverse the last column ; Traverse the matrix ; Update the value of ending [ i ] [ j ] ; Function to find the maximum path sum from the top - left to the bottom right cell such that path contains one of the cells in the array coordinates [ ] [ ] ; Initialize the start and the end matrices ; Calculate the start matrix ; Calculate the end matrix ; Stores the maximum path sum ; Traverse the coordinates ; Update the value of ans ; Print the resultant maximum sum path value ; Drive Code","#include <iostream>
using namespace std;
int start[3][3];
int ending[3][3];
void calculateStart(int n, int m) {
  for (int i = 1; i < m; ++i) {
    start[0][i] += start[0][i - 1];
  }
  for (int i = 1; i < n; ++i) {
    start[i][0] += start[i - 1][0];
  }
  for (int i = 1; i < n; ++i) {
    for (int j = 1; j < m; ++j) {
      start[i][j] += max(start[i - 1][j], start[i][j - 1]);
    }
  }
}
void calculateEnd(int n, int m) {
  for (int i = n - 2; i >= 0; --i) {
    ending[i][m - 1] += ending[i + 1][m - 1];
  }
  for (int i = m - 2; i >= 0; --i) {
    ending[n - 1][i] += ending[n - 1][i + 1];
  }
  for (int i = n - 2; i >= 0; --i) {
    for (int j = m - 2; j >= 0; --j) {
      ending[i][j] += max(ending[i + 1][j], ending[i][j + 1]);
    }
  }
}
void maximumPathSum(int mat[][3], int n, int m, int q, int coordinates[][2]) {
  for (int i = 0; i < n; ++i) {
    for (int j = 0; j < m; ++j) {
      start[i][j] = mat[i][j];
      ending[i][j] = mat[i][j];
    }
  }
  calculateStart(n, m);
  calculateEnd(n, m);
  int ans = 0;
  for (int i = 0; i < q; ++i) {
    int X = coordinates[i][0] - 1;
    int Y = coordinates[i][1] - 1;
    ans = max(ans, start[X][Y] + ending[X][Y] - mat[X][Y]);
  }
  cout << ans;
}
int main() {
  int mat[][3] = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
  int N = 3;
  int M = 3;
  int Q = 2;
  int coordinates[][2] = {{1, 2}, {2, 2}};
  maximumPathSum(mat, N, M, Q, coordinates);
}",Maximum path sum from top left to bottom right of a matrix passing through one of the given cells.
522,"Length of longest subset consisting of A 0 s and B 1 s from an array of strings | Set 2 | C ++ program for the above approach ; Function to find the length of the longest subset of an array of strings with at most A 0 s and B 1 s ; Initialize a 2D array with its entries as 0 ; Traverse the given array ; Store the count of 0 s and 1 s in the current string ; Iterate in the range [ A , zeros ] ; Iterate in the range [ B , ones ] ; Update the value of dp [ i ] [ j ] ; Print the result ; Driver Code","#include <bits/stdc++.h>
using namespace std;
int MaxSubsetlength(vector<string> arr, int A, int B) {
  int dp[A + 1][B + 1];
  memset(dp, 0, sizeof(dp));
  for (auto &str : arr) {
    int zeros = count(str.begin(), str.end(), '0');
    int ones = count(str.begin(), str.end(), '1');
    for (int i = A; i >= zeros; i--)
      for (int j = B; j >= ones; j--)
        dp[i][j] = max(dp[i][j], dp[i - zeros][j - ones] + 1);
  }
  return dp[A][B];
}
int main() {
  vector<string> arr = {""1"", ""0"", ""0001"", ""10"", ""111001""};
  int A = 5, B = 3;
  cout << MaxSubsetlength(arr, A, B);
  return 0;
}",Length of longest subset consisting of A 0 s and B 1 s from an array of strings.
523,"Count ways to select N pairs of candies of distinct colors ( Dynamic Programming + Bitmasking ) | C ++ 14 program to implement the above approach ; Function to count ways to select N distinct pairs of candies with different colours ; If n pairs are selected ; Stores count of ways to select the i - th pair ; Iterate over the range [ 0 , n ] ; If pair ( i , j ) is not included ; Driver Code","#include <bits/stdc++.h>
using namespace std;
int numOfWays(vector<vector<int>> a, int n, int i, set<int> &blue) {
  if (i == n)
    return 1;
  int count = 0;
  for (int j = 0; j < n; j++) {
    if (a[i][j] == 1 && blue.find(j) == blue.end()) {
      blue.insert(j);
      count += numOfWays(a, n, i + 1, blue);
      blue.erase(j);
    }
  }
  return count;
}
int main() {
  int n = 3;
  vector<vector<int>> mat = {{0, 1, 1}, {1, 0, 1}, {1, 1, 1}};
  set<int> mpp;
  cout << (numOfWays(mat, n, 0, mpp));
}",Count ways to select N pairs of candies of distinct colors ( Dynamic Programming + Bitmasking ).
524,"Minimize cost to reach end of an array by two forward jumps or one backward jump in each move | C ++ program for the above approach ; Function to find the minimum cost to reach the end of an array ; Base Case : When N < 3 ; Store the results in table ; Initialize base cases ; Iterate over the range [ 2 , N - 2 ] to construct the dp array ; Handle case for the last index , i . e . N - 1 ; Print the answer ; Driver Code","#include <bits/stdc++.h>
using namespace std;
void minCost(int arr[], int n) {
  if (n < 3) {
    cout << arr[0];
    return;
  }
  int *dp = new int[n];
  dp[0] = arr[0];
  dp[1] = dp[0] + arr[1] + arr[2];
  for (int i = 2; i < n - 1; i++)
    dp[i] = min(dp[i - 2] + arr[i], dp[i - 1] + arr[i] + arr[i + 1]);
  dp[n - 1] = min(dp[n - 2], dp[n - 3] + arr[n - 1]);
  cout << dp[n - 1];
}
int main() {
  int arr[] = {9, 4, 6, 8, 5};
  int N = sizeof(arr) / sizeof(arr[0]);
  minCost(arr, N);
  return 0;
}",Minimize cost to reach end of an array by two forward jumps or one backward jump in each move.
525,"Calculate the value of 2 raised to the power of twice the binary representation of N | C ++ program to implement the above approach ; Function to find the value of power ( X , Y ) in O ( log Y ) ; Stores power ( X , Y ) ; Update X ; Base Case ; Calculate power ( X , Y ) ; If Y is an odd number ; Update res ; Update Y ; Update X ; Function to calculate ( 2 ^ ( 2 * x ) ) % ( 10 ^ 9 + 7 ) ; Stores binary representation of n ; Stores power of 10 ; Calculate the binary representation of n ; If n is an odd number ; Update X ; Update pow_10 ; Update n ; Double the value of X ; Stores the value of ( 2 ^ ( 2 * x ) ) % ( 10 ^ 9 + 7 ) ; Driver Code","#include <bits/stdc++.h>
using namespace std;
#defineM1000000007 long long power(long long X, long long Y) {
  long long res = 1;
  X = X % M;
  if (X == 0)
    return 0;
  while (Y > 0) {
    if (Y & 1) {
      res = (res * X) % M;
    }
    Y = Y >> 1;
    X = (X * X) % M;
  }
  return res;
}
int findValue(long long int n) {
  long long X = 0;
  long long pow_10 = 1;
  while (n) {
    if (n & 1) {
      X += pow_10;
    }
    pow_10 *= 10;
    n /= 2;
  }
  X = (X * 2) % M;
  long long res = power(2, X);
  return res;
}
int main() {
  long long n = 2;
  cout << findValue(n);
  return 0;
}",Calculate the value of 2 raised to the power of twice the binary representation of N.
526,"Calculate the value of 2 raised to the power of twice the binary representation of N | C ++ program to implement the above approach ; Function to find the value of power ( X , Y ) in O ( log Y ) ; Stores power ( X , Y ) ; Update X ; Base Case ; Calculate power ( X , Y ) ; If Y is an odd number ; Update res ; Update Y ; Update X ; Function to calculate ( 2 ^ ( 2 * x ) ) % ( 10 ^ 9 + 7 ) ; dp [ N ] * dp [ N ] : Stores value of ( 2 ^ ( 2 * x ) ) % ( 10 ^ 9 + 7 ) ; Base Case ; Iterate over the range [ 3 , N ] ; Stores rightmost bit of i ; Stores the value of ( i - y ) ; If x is power of 2 ; Update dp [ i ] ; Update dp [ i ] ; Driver Code","#include <bits/stdc++.h>
using namespace std;
#defineM1000000007 long long power(long long X, long long Y) {
  long long res = 1;
  X = X % M;
  if (X == 0)
    return 0;
  while (Y > 0) {
    if (Y & 1) {
      res = (res * X) % M;
    }
    Y = Y >> 1;
    X = (X * X) % M;
  }
  return res;
}
long long findValue(long long N) {
  long long dp[N + 1];
  dp[1] = 2;
  dp[2] = 1024;
  for (int i = 3; i <= N; i++) {
    int y = (i & (-i));
    int x = i - y;
    if (x == 0) {
      dp[i] = power(dp[i / 2], 10);
    } else {
      dp[i] = (dp[x] * dp[y]) % M;
    }
  }
  return (dp[N] * dp[N]) % M;
}
int main() {
  long long n = 150;
  cout << findValue(n);
  return 0;
}",Calculate the value of 2 raised to the power of twice the binary representation of N.
527,Count ways to obtain given sum by repeated throws of a dice | C ++ program for the above approach ; Function to find the number of ways to get the sum N with throw of dice ; Base Case ; Stores the count of total number of ways to get sum N ; Recur for all 6 states ; Return answer ; Driver Code ; Function call,"#include <bits/stdc++.h>
using namespace std;
int findWays(int N) {
  if (N == 0) {
    return 1;
  }
  int cnt = 0;
  for (int i = 1; i <= 6; i++) {
    if (N - i >= 0) {
      cnt = cnt + findWays(N - i);
    }
  }
  return cnt;
}
int main() {
  int N = 4;
  cout << findWays(N);
  return 0;
}",Count ways to obtain given sum by repeated throws of a dice.
528,Check if an array can be split into 3 subsequences of equal sum or not | C ++ program for the above approach ; Utility function to check array can be partition to 3 subsequences of equal sum or not ; Base Case ; When element at index j is added to sm1 ; When element at index j is added to sm2 ; When element at index j is added to sm3 ; Return maximum value among all above 3 recursive call ; Function to check array can be partition to 3 subsequences of equal sum or not ; Initialise 3 sums to 0 ; Function Call ; Driver Code ; Given array arr [ ] ; Function Call,"#include <bits/stdc++.h>
using namespace std;
int checkEqualSumUtil(int arr[], int N, int sm1, int sm2, int sm3, int j) {
  if (j == N) {
    if (sm1 == sm2 && sm2 == sm3)
      return 1;
    else
      return 0;
  } else {
    int l = checkEqualSumUtil(arr, N, sm1 + arr[j], sm2, sm3, j + 1);
    int m = checkEqualSumUtil(arr, N, sm1, sm2 + arr[j], sm3, j + 1);
    int r = checkEqualSumUtil(arr, N, sm1, sm2, sm3 + arr[j], j + 1);
    return max(max(l, m), r);
  }
}
void checkEqualSum(int arr[], int N) {
  int sum1, sum2, sum3;
  sum1 = sum2 = sum3 = 0;
  if (checkEqualSumUtil(arr, N, sum1, sum2, sum3, 0) == 1) {
    cout << ""Yes"";
  } else {
    cout << ""No"";
  }
}
int main() {
  int arr[] = {17, 34, 59, 23, 17, 67, 57, 2, 18, 59, 1};
  int N = sizeof(arr) / sizeof(arr[0]);
  checkEqualSum(arr, N);
  return 0;
}",Check if an array can be split into 3 subsequences of equal sum or not.
529,Check if an array can be split into 3 subsequences of equal sum or not | C ++ program for the above approach ; Function to check array can be partition into sum of 3 equal ; Base Case ; If value at particular index is not - 1 then return value at that index which ensure no more further calls ; When element at index j is added to sm1 ; When element at index j is added to sm2 ; When element at index j is added to sm3 ; Update the current state and return that value ; Function to check array can be partition to 3 subsequences of equal sum or not ; Initialise 3 sums to 0 ; Function Call ; Driver Code ; Given array arr [ ] ; Function Call,"#include <bits/stdc++.h>
using namespace std;
map<string, int> dp;
int checkEqualSumUtil(int arr[], int N, int sm1, int sm2, int sm3, int j) {
  string s = to_string(sm1) + ""_"" + to_string(sm2) + to_string(j);
  if (j == N) {
    if (sm1 == sm2 && sm2 == sm3)
      return 1;
    else
      return 0;
  }
  if (dp.find(s) != dp.end())
    return dp[s];
  else {
    int l = checkEqualSumUtil(arr, N, sm1 + arr[j], sm2, sm3, j + 1);
    int m = checkEqualSumUtil(arr, N, sm1, sm2 + arr[j], sm3, j + 1);
    int r = checkEqualSumUtil(arr, N, sm1, sm2, sm3 + arr[j], j + 1);
    return dp[s] = max(max(l, m), r);
  }
}
void checkEqualSum(int arr[], int N) {
  int sum1, sum2, sum3;
  sum1 = sum2 = sum3 = 0;
  if (checkEqualSumUtil(arr, N, sum1, sum2, sum3, 0) == 1) {
    cout << ""Yes"";
  } else {
    cout << ""No"";
  }
}
int main() {
  int arr[] = {17, 34, 59, 23, 17, 67, 57, 2, 18, 59, 1};
  int N = sizeof(arr) / sizeof(arr[0]);
  checkEqualSum(arr, N);
  return 0;
}",Check if an array can be split into 3 subsequences of equal sum or not.
530,"Smallest index in given range of indices which is not equal to X | C ++ Program to find the smallest index in the array in the range [ L , R ] which does not contain X ; Precompute the index of next different element in the array for every array element ; Default value ; Compute nextpos [ i ] using nextpos [ i + 1 ] ; Function to return the smallest index ; nextpos [ i ] will store the next position p where arr [ p ] != arr [ i ] ; If X is not present at l ; Otherwise ; Find the index which stores a value different from X ; If that index is within the range ; Driver Code","#include <bits/stdc++.h>
using namespace std;
void precompute(int nextpos[], int arr[], int N) {
  nextpos[N - 1] = N;
  for (int i = N - 2; i >= 0; i--) {
    if (arr[i] == arr[i + 1])
      nextpos[i] = nextpos[i + 1];
    else
      nextpos[i] = i + 1;
  }
}
void findIndex(int query[][3], int arr[], int N, int Q) {
  int nextpos[N];
  precompute(nextpos, arr, N);
  for (int i = 0; i < Q; i++) {
    int l, r, x;
    l = query[i][0];
    r = query[i][1];
    x = query[i][2];
    int ans = -1;
    if (arr[l] != x)
      ans = l;
    else {
      int d = nextpos[l];
      if (d <= r)
        ans = d;
    }
    cout << ans << ""\n"";
  }
}
int main() {
  int N, Q;
  N = 6;
  Q = 3;
  int arr[] = {1, 2, 1, 1, 3, 5};
  int query[Q][3] = {{0, 3, 1}, {1, 5, 2}, {2, 3, 1}};
  findIndex(query, arr, N, Q);
  return 0;
}",Smallest index in given range of indices which is not equal to X.
531,Count number of ways to convert string S to T by performing K cyclic shifts | C ++ program for the above approach ; Function to count number of ways to convert string S to string T by performing K cyclic shifts ; Calculate length of string ; ' a ' is no of good cyclic shifts ' b ' is no of bad cyclic shifts ; Iterate in the string ; Precompute the number of good and bad cyclic shifts ; dp2 [ i ] to store the no of ways to get to a bad shift in i moves ; Calculate good and bad shifts ; Return the required number of ways ; Driver Code ; Given Strings ; Given K shifts required ; Function Call,"#include <bits/stdc++.h>
using namespace std;
#definemod10000000007 long long countWays(string s, string t, int k) {
  int n = s.size();
  int a = 0, b = 0;
  for (int i = 0; i < n; i++) {
    string p = s.substr(i, n - i) + s.substr(0, i);
    if (p == t)
      a++;
    else
      b++;
  }
  vector<long long> dp1(k + 1), dp2(k + 1);
  if (s == t) {
    dp1[0] = 1;
    dp2[0] = 0;
  } else {
    dp1[0] = 0;
    dp2[0] = 1;
  }
  for (int i = 1; i <= k; i++) {
    dp1[i] = ((dp1[i - 1] * (a - 1)) % mod + (dp2[i - 1] * a) % mod) % mod;
    dp2[i] = ((dp1[i - 1] * (b)) % mod + (dp2[i - 1] * (b - 1)) % mod) % mod;
  }
  return dp1[k];
}
int main() {
  string S = ""ab"", T = ""ab"";
  int K = 2;
  cout << countWays(S, T, K);
  return 0;
}",Count number of ways to convert string S to T by performing K cyclic shifts.
532,Minimize steps to reach K from 0 by adding 1 or doubling at each step | C ++ program to implement the above approach ; Function to find minimum operations ; vector dp is initialised to store the steps ; For all even numbers ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
int minOperation(int k) {
  vector<int> dp(k + 1, 0);
  for (int i = 1; i <= k; i++) {
    dp[i] = dp[i - 1] + 1;
    if (i % 2 == 0) {
      dp[i] = min(dp[i], dp[i / 2] + 1);
    }
  }
  return dp[k];
}
int main() {
  int K = 12;
  cout << minOperation(k);
}",Minimize steps to reach K from 0 by adding 1 or doubling at each step.
533,Find maximum subset sum formed by partitioning any subset of array into 2 partitions with equal sum | CPP implementation for the above mentioned recursive approach ; Function to find the maximum subset sum ; Ignore the current element ; including element in partition 1 ; including element in partition 2 ; Driver code ; size of the array,"#include <bits/stdc++.h>
using namespace std;
int maxSum(int p0, int p1, int a[], int pos, int n) {
  if (pos == n) {
    if (p0 == p1)
      return p0;
    else
      return 0;
  }
  int ans = maxSum(p0, p1, a, pos + 1, n);
  ans = max(ans, maxSum(p0 + a[pos], p1, a, pos + 1, n));
  ans = max(ans, maxSum(p0, p1 + a[pos], a, pos + 1, n));
  return ans;
}
int main() {
  int n = 4;
  int a[n] = {1, 2, 3, 6};
  cout << maxSum(0, 0, a, 0, n);
  return 0;
}",Find maximum subset sum formed by partitioning any subset of array into 2 partitions with equal sum.
534,"Find maximum subset sum formed by partitioning any subset of array into 2 partitions with equal sum | CPP implementation for the above mentioned Dynamic Programming approach ; Function to find the maximum subset sum ; sum of all elements ; bottom up lookup table ; ; initialising dp table with INT_MIN where , INT_MIN means no solution ; Case when diff is 0 ; Putting ith element in g0 ; Putting ith element in g1 ; Ignoring ith element ; Driver code","#include <bits/stdc++.h>
using namespace std;
int maxSum(int a[], int n) {
  int sum = 0;
  for (int i = 0; i < n; i++)
    sum += a[i];
  int limit = 2 * sum + 1;
  int dp[n + 1][limit];
  for (int i = 0; i < n + 1; i++) {
    for (int j = 0; j < limit; j++)
      dp[i][j] = INT_MIN;
  }
  dp[0][sum] = 0;
  for (int i = 1; i <= n; i++) {
    for (int j = 0; j < limit; j++) {
      if ((j - a[i - 1]) >= 0 && dp[i - 1][j - a[i - 1]] != INT_MIN)
        dp[i][j] = max(dp[i][j], dp[i - 1][j - a[i - 1]] + a[i - 1]);
      if ((j + a[i - 1]) < limit && dp[i - 1][j + a[i - 1]] != INT_MIN)
        dp[i][j] = max(dp[i][j], dp[i - 1][j + a[i - 1]]);
      if (dp[i - 1][j] != INT_MIN)
        dp[i][j] = max(dp[i][j], dp[i - 1][j]);
    }
  }
  return dp[n][sum];
}
int main() {
  int n = 4;
  int a[n] = {1, 2, 3, 6};
  cout << maxSum(a, n);
  return 0;
}",Find maximum subset sum formed by partitioning any subset of array into 2 partitions with equal sum.
535,"Count of strings possible by replacing two consecutive same character with new character | C ++ program to count the different possible string form by replacing two same characters with one ; Array to find the fibonacci sequence ; Function to find the fibonacci sequence ; Function to count all possible strings ; Initialize ans = 1 ; If two consecutive char are same increase cnt ; Else multiply the fib [ cnt ] to ans and initialize ans to 1 ; If str = abcdeeee , then for last "" eeee "" the count munst be updated ; Return the total count ; Driver 's Code ; Function to precompute all the fibonacci number ; Function call to find the count","#include <bits/stdc++.h>
using namespace std;
int fib[100005];
void computeFibonacci() {
  fib[0] = 1;
  fib[1] = 1;
  for (int i = 2; i < 100005; i++) {
    fib[i] = fib[i - 1] + fib[i - 2];
  }
}
int countString(string str) {
  int ans = 1;
  int cnt = 1;
  for (int i = 1; str[i]; i++) {
    if (str[i] == str[i - 1]) {
      cnt++;
    } else {
      ans = ans * fib[cnt];
      cnt = 1;
    }
  }
  ans = ans * fib[cnt];
  return ans;
}
int main() {
  string str = ""abdllldefkkkk"";
  computeFibonacci();
  cout << countString(str);
  return 0;
}",Count of strings possible by replacing two consecutive same character with new character.
536,"Golomb Sequence | Set 2 | C ++ program to find the first N terms of Golomb Sequence ; Function to print the Golomb Sequence ; Initialise the array ; Initialise the cnt to 0 ; First and second element of Golomb Sequence is 0 , 1 ; Map to store the count of current element in Golomb Sequence ; Store the count of 2 ; Iterate over 2 to N ; If cnt is equals to 0 then we have new number for Golomb Sequence which is 1 + previous element ; Else the current element is the previous element in this Sequence ; Map the current index to current value in arr [ ] ; Print the Golomb Sequence ; Driver Code","#include ""bits/stdc++.h""
#defineMAX100001
using namespace std;
void printGolombSequence(int N) {
  int arr[MAX];
  int cnt = 0;
  arr[0] = 0;
  arr[1] = 1;
  map<int, int> M;
  M[2] = 2;
  for (int i = 2; i <= N; i++) {
    if (cnt == 0) {
      arr[i] = 1 + arr[i - 1];
      cnt = M[arr[i]];
      cnt--;
    } else {
      arr[i] = arr[i - 1];
      cnt--;
    }
    M[i] = arr[i];
  }
  for (int i = 1; i <= N; i++) {
    cout << arr[i] << ' ';
  }
}
int main() {
  int N = 11;
  printGolombSequence(N);
  return 0;
}",Golomb Sequence.
537,"Count ways to reach Nth Stairs by taking 1 and 2 steps with exactly one 3 step | C ++ implementation to find the number the number of ways to reach Nth stair by taking 1 , 2 step at a time and 3 Steps at a time exactly once . ; Function to find the number the number of ways to reach Nth stair ; Array including number of ways that includes 3 ; Array including number of ways that doesn 't includes 3 ; Initially to reach 3 stairs by taking 3 steps can be reached by 1 way ; Loop to find the number the number of ways to reach Nth stair ; Driver Code","#include <iostream>
using namespace std;
int number_of_ways(int n) {
  int includes_3[n + 1] = {};
  int not_includes_3[n + 1] = {};
  includes_3[3] = 1;
  not_includes_3[1] = 1;
  not_includes_3[2] = 2;
  not_includes_3[3] = 3;
  for (int i = 4; i <= n; i++) {
    includes_3[i] =
        includes_3[i - 1] + includes_3[i - 2] + not_includes_3[i - 3];
    not_includes_3[i] = not_includes_3[i - 1] + not_includes_3[i - 2];
  }
  return includes_3[n];
}
int main() {
  int n = 7;
  cout << number_of_ways(n);
  return 0;
}",Count ways to reach Nth Stairs by taking 1 and 2 steps with exactly one 3 step.
538,Maximum number of multiples in an array before any element | C ++ implementation of the approach ; Map to store the divisor count ; Function to generate the divisors of all the array elements ; Function to find the maximum number of multiples in an array before it ; To store the maximum divisor count ; Update ans if more number of divisors are found ; Generating all the divisors of the next element of the array ; Driver code,"#include <bits/stdc++.h>
using namespace std;
const int MAX = 100000;
int divisors[MAX];
int generateDivisors(int n) {
  for (int i = 1; i <= sqrt(n); i++) {
    if (n % i == 0) {
      if (n / i == i) {
        divisors[i]++;
      } else {
        divisors[i]++;
        divisors[n / i]++;
      }
    }
  }
}
int findMaxMultiples(int *arr, int n) {
  int ans = 0;
  for (int i = 0; i < n; i++) {
    ans = max(divisors[arr[i]], ans);
    generateDivisors(arr[i]);
  }
  return ans;
}
int main() {
  int arr[] = {8, 1, 28, 4, 2, 6, 7};
  int n = sizeof(arr) / sizeof(int);
  cout << findMaxMultiples(arr, n);
  return 0;
}",Maximum number of multiples in an array before any element.
539,Number of ways to reach the end of matrix with non | C ++ implementation of the approach ; 3d array to store states of dp ; Array to determine whether a state has been solved before ; Function to return the count of required paths ; Base cases ; If a state has been solved before it won 't be evaluated again ; Recurrence relation ; Driver code,"#include <bits/stdc++.h>
#definen3
#definemaxV20
using namespace std;
int dp[n][n][maxV];
int v[n][n][maxV];
int countWays(int i, int j, int x, int arr[][n]) {
  if (i == n j == n)
    return 0;
  x = (x & arr[i][j]);
  if (x == 0)
    return 0;
  if (i == n - 1 && j == n - 1)
    return 1;
  if (v[i][j][x])
    return dp[i][j][x];
  v[i][j][x] = 1;
  dp[i][j][x] = countWays(i + 1, j, x, arr) + countWays(i, j + 1, x, arr);
  return dp[i][j][x];
}
int main() {
  int arr[n][n] = {{1, 2, 1}, {1, 1, 0}, {2, 1, 1}};
  cout << countWays(0, 0, arr[0][0], arr);
  return 0;
}",Number of ways to reach the end of matrix with non.
540,Maximum sum from three arrays such that picking elements consecutively from same is not allowed | C ++ implementation of the approach ; Function to return the maximum sum ; Base case ; Already visited ; If the element has been taken from first array in previous step ; If the element has been taken from second array in previous step ; If the element has been taken from third array in previous step ; Driver code ; Pick element from first array ; Pick element from second array ; Pick element from third array ; Print the maximum of them,"#include <bits/stdc++.h>
using namespace std;
const int N = 3;
int FindMaximumSum(int ind, int kon, int a[], int b[], int c[], int n,
                   int dp[][N]) {
  if (ind == n)
    return 0;
  if (dp[ind][kon] != -1)
    return dp[ind][kon];
  int ans = -1e9 + 5;
  if (kon == 0) {
    ans = max(ans, b[ind] + FindMaximumSum(ind + 1, 1, a, b, c, n, dp));
    ans = max(ans, c[ind] + FindMaximumSum(ind + 1, 2, a, b, c, n, dp));
  } else if (kon == 1) {
    ans = max(ans, a[ind] + FindMaximumSum(ind + 1, 0, a, b, c, n, dp));
    ans = max(ans, c[ind] + FindMaximumSum(ind + 1, 2, a, b, c, n, dp));
  } else if (kon == 2) {
    ans = max(ans, a[ind] + FindMaximumSum(ind + 1, 1, a, b, c, n, dp));
    ans = max(ans, b[ind] + FindMaximumSum(ind + 1, 0, a, b, c, n, dp));
  }
  return dp[ind][kon] = ans;
}
int main() {
  int a[] = {6, 8, 2, 7, 4, 2, 7};
  int b[] = {7, 8, 5, 8, 6, 3, 5};
  int c[] = {8, 3, 2, 6, 8, 4, 1};
  int n = sizeof(a) / sizeof(a[0]);
  int dp[n][N];
  memset(dp, -1, sizeof dp);
  int x = FindMaximumSum(0, 0, a, b, c, n, dp);
  int y = FindMaximumSum(0, 1, a, b, c, n, dp);
  int z = FindMaximumSum(0, 2, a, b, c, n, dp);
  cout << max(x, max(y, z));
  return 0;
}",Maximum sum from three arrays such that picking elements consecutively from same is not allowed.
541,Number of ways to make binary string of length N such that 0 s always occur together in groups of size K | C ++ implementation of the above approach ; Function to return no of ways to build a binary string of length N such that 0 s always occur in groups of size K ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
const int mod = 1000000007;
int noOfBinaryStrings(int N, int k) {
  int dp[100002];
  for (int i = 1; i <= k - 1; i++) {
    dp[i] = 1;
  }
  dp[k] = 2;
  for (int i = k + 1; i <= N; i++) {
    dp[i] = (dp[i - 1] + dp[i - k]) % mod;
  }
  return dp[N];
}
int main() {
  int N = 4;
  int K = 2;
  cout << noOfBinaryStrings(N, K);
  return 0;
}",Number of ways to make binary string of length N such that 0 s always occur together in groups of size K.
542,Number of ways to pair people | CPP program to find number of ways to pair people in party ; Function to find number of ways to pair people in party ; To store count of number of ways . ; Using the recurrence defined find count for different values of p . ; Driver code,"#include <bits/stdc++.h>
using namespace std;
int findWaysToPair(int p) {
  int dp[p + 1];
  dp[1] = 1;
  dp[2] = 2;
  for (int i = 3; i <= p; i++) {
    dp[i] = dp[i - 1] + (i - 1) * dp[i - 2];
  }
  return dp[p];
}
int main() {
  int p = 3;
  cout << findWaysToPair(p);
  return 0;
}",Number of ways to pair people.
543,Count ways to reach a score using 1 and 2 with no consecutive 2 s | A simple recursive implementation for counting ways to reach a score using 1 and 2 with consecutive 2 allowed ; base cases ; For cases n > 2 ; Driver code,"#include <iostream>
using namespace std;
int CountWays(int n) {
  if (n == 0) {
    return 1;
  }
  if (n == 1) {
    return 1;
  }
  if (n == 2) {
    return 1 + 1;
  }
  return CountWays(n - 1) + CountWays(n - 3);
}
int main() {
  int n = 10;
  cout << CountWays(n);
  return 0;
}",Count ways to reach a score using 1 and 2 with no consecutive 2 s.
544,Weird Number | C ++ program to check if the number is weird or not ; code to find all the factors of the number excluding the number itself ; vector to store the factors ; note that this loop runs till sqrt ( n ) ; if the value of i is a factor ; condition to check the divisor is not the number itself ; return the vector ; Function to check if the number is abundant or not ; find the divisors using function ; sum all the factors ; check for abundant or not ; Function to check if the number is semi - perfect or not ; find the divisors ; sorting the vector ; subset to check if no is semiperfect ; initialising 1 st column to true ; initialing 1 st row except zero position to 0 ; loop to find whether the number is semiperfect ; calculation to check if the number can be made by summation of divisors ; if not possible to make the number by any combination of divisors ; Function to check for weird or not ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
vector<int> factors(int n) {
  vector<int> v;
  v.push_back(1);
  for (int i = 2; i <= sqrt(n); i++) {
    if (n % i == 0) {
      v.push_back(i);
      if (n / i != i) {
        v.push_back(n / i);
      }
    }
  }
  return v;
}
bool checkAbundant(int n) {
  vector<int> v;
  int sum = 0;
  v = factors(n);
  for (int i = 0; i < v.size(); i++) {
    sum += v[i];
  }
  if (sum > n)
    return true;
  else
    return false;
}
bool checkSemiPerfect(int n) {
  vector<int> v;
  v = factors(n);
  sort(v.begin(), v.end());
  int r = v.size();
  bool subset[r + 1][n + 1];
  for (int i = 0; i <= r; i++)
    subset[i][0] = true;
  for (int i = 1; i <= n; i++)
    subset[0][i] = false;
  for (int i = 1; i <= r; i++) {
    for (int j = 1; j <= n; j++) {
      if (j < v[i - 1])
        subset[i][j] = subset[i - 1][j];
      else {
        subset[i][j] = subset[i - 1][j] || subset[i - 1][j - v[i - 1]];
      }
    }
  }
  if ((subset[r][n]) == 0)
    return false;
  else
    return true;
}
bool checkweird(int n) {
  if (checkAbundant(n) == true && checkSemiPerfect(n) == false)
    return true;
  else
    return false;
}
int main() {
  int n = 70;
  if (checkweird(n))
    cout << ""Weird Number"";
  else
    cout << ""Not Weird Number"";
  return 0;
}",Weird Number.
545,Maximum subarray sum in an array created after repeated concatenation | C ++ program to print largest contiguous array sum when array is created after concatenating a small array k times . ; Returns sum of maximum sum subarray created after concatenating a [ 0. . n - 1 ] k times . ; This is where it differs from Kadane 's  algorithm. We use modular arithmetic to  find next element. ; Driver program to test maxSubArraySum,"#include <bits/stdc++.h>
using namespace std;
int maxSubArraySumRepeated(int a[], int n, int k) {
  int max_so_far = INT_MIN, max_ending_here = 0;
  for (int i = 0; i < n * k; i++) {
    max_ending_here = max_ending_here + a[i % n];
    if (max_so_far < max_ending_here)
      max_so_far = max_ending_here;
    if (max_ending_here < 0)
      max_ending_here = 0;
  }
  return max_so_far;
}
int main() {
  int a[] = {10, 20, -30, -1};
  int n = sizeof(a) / sizeof(a[0]);
  int k = 3;
  cout << ""Maximum contiguous sum is "" << maxSubArraySumRepeated(a, n, k);
  return 0;
}",Maximum subarray sum in an array created after repeated concatenation.
546,Longest Increasing Odd Even Subsequence | C ++ implementation to find the longest increasing odd even subsequence ; function to find the longest increasing odd even subsequence ; lioes [ i ] stores longest increasing odd even subsequence ending at arr [ i ] ; to store the length of longest increasing odd even subsequence ; Initialize LIOES values for all indexes ; Compute optimized LIOES values in bottom up manner ; Pick maximum of all LIOES values ; required maximum length ; Driver program to test above,"#include <bits/stdc++.h>
using namespace std;
int longOddEvenIncSeq(int arr[], int n) {
  int lioes[n];
  int maxLen = 0;
  for (int i = 0; i < n; i++)
    lioes[i] = 1;
  for (int i = 1; i < n; i++)
    for (int j = 0; j < i; j++)
      if (arr[i] > arr[j] && (arr[i] + arr[j]) % 2 != 0 &&
          lioes[i] < lioes[j] + 1)
        lioes[i] = lioes[j] + 1;
  for (int i = 0; i < n; i++)
    if (maxLen < lioes[i])
      maxLen = lioes[i];
  return maxLen;
}
int main() {
  int arr[] = {1, 12, 2, 22, 5, 30, 31, 14, 17, 11};
  int n = sizeof(arr) / sizeof(n);
  cout << ""Longest Increasing Odd Even ""
       << ""Subsequence: "" << longOddEvenIncSeq(arr, n);
  return 0;
}",Longest Increasing Odd Even Subsequence.
547,"Minimum and Maximum values of an expression with * and + | C ++ program to get maximum and minimum values of an expression ; Utility method to check whether a character is operator or not ; method prints minimum and maximum value obtainable from an expression ; store operator and numbers in different vectors ; storing last number in vector ; initializing minval and maxval 2D array ; initializing main diagonal by num values ; looping similar to matrix chain multiplication and updating both 2D arrays ; if current operator is ' + ' , updating tmp variable by addition ; if current operator is ' * ' , updating tmp variable by multiplication ; updating array values by tmp variables ; last element of first row will store the result ; Driver code to test above methods","#include <bits/stdc++.h>
using namespace std;
bool isOperator(char op) { return (op == '+' op == '*'); }
void printMinAndMaxValueOfExp(string exp) {
  vector<int> num;
  vector<char> opr;
  string tmp = """";
  for (int i = 0; i < exp.length(); i++) {
    if (isOperator(exp[i])) {
      opr.push_back(exp[i]);
      num.push_back(atoi(tmp.c_str()));
      tmp = """";
    } else {
      tmp += exp[i];
    }
  }
  num.push_back(atoi(tmp.c_str()));
  int len = num.size();
  int minVal[len][len];
  int maxVal[len][len];
  for (int i = 0; i < len; i++) {
    for (int j = 0; j < len; j++) {
      minVal[i][j] = INT_MAX;
      maxVal[i][j] = 0;
      if (i == j)
        minVal[i][j] = maxVal[i][j] = num[i];
    }
  }
  for (int L = 2; L <= len; L++) {
    for (int i = 0; i < len - L + 1; i++) {
      int j = i + L - 1;
      for (int k = i; k < j; k++) {
        int minTmp = 0, maxTmp = 0;
        if (opr[k] == '+') {
          minTmp = minVal[i][k] + minVal[k + 1][j];
          maxTmp = maxVal[i][k] + maxVal[k + 1][j];
        } else if (opr[k] == '*') {
          minTmp = minVal[i][k] * minVal[k + 1][j];
          maxTmp = maxVal[i][k] * maxVal[k + 1][j];
        }
        if (minTmp < minVal[i][j])
          minVal[i][j] = minTmp;
        if (maxTmp > maxVal[i][j])
          maxVal[i][j] = maxTmp;
      }
    }
  }
  cout << ""Minimum value : "" << minVal[0][len - 1] << "", Maximum value : ""
       << maxVal[0][len - 1];
}
int main() {
  string expression = ""1+2*3+4*5"";
  printMinAndMaxValueOfExp(expression);
  return 0;
}",Minimum and Maximum values of an expression with * and +.
548,"Matrix Chain Multiplication | DP | A naive recursive implementation that simply follows the above optimal substructure property ; Matrix Ai has dimension p [ i - 1 ] x p [ i ] for i = 1. . n ; place parenthesis at different places between first and last matrix , recursively calculate count of multiplications for each parenthesis placement and return the minimum count ; Return minimum count ; Driver Code","#include <bits/stdc++.h>
using namespace std;
int MatrixChainOrder(int p[], int i, int j) {
  if (i == j)
    return 0;
  int k;
  int min = INT_MAX;
  int count;
  for (k = i; k < j; k++) {
    count = MatrixChainOrder(p, i, k) + MatrixChainOrder(p, k + 1, j) +
            p[i - 1] * p[k] * p[j];
    if (count < min)
      min = count;
  }
  return min;
}
int main() {
  int arr[] = {1, 2, 3, 4, 3};
  int n = sizeof(arr) / sizeof(arr[0]);
  cout << ""Minimum number of multiplications is ""
       << MatrixChainOrder(arr, 1, n - 1);
}",Matrix Chain Multiplication.
549,Matrix Chain Multiplication | DP | C ++ program using memoization ; Function for matrix chain multiplication ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
int dp[100][100];
int matrixChainMemoised(int *p, int i, int j) {
  if (i == j) {
    return 0;
  }
  if (dp[i][j] != -1) {
    return dp[i][j];
  }
  dp[i][j] = INT_MAX;
  for (int k = i; k < j; k++) {
    dp[i][j] = min(dp[i][j], matrixChainMemoised(p, i, k) +
                                 matrixChainMemoised(p, k + 1, j) +
                                 p[i - 1] * p[k] * p[j]);
  }
  return dp[i][j];
}
int MatrixChainOrder(int *p, int n) {
  int i = 1, j = n - 1;
  return matrixChainMemoised(p, i, j);
}
int main() {
  int arr[] = {1, 2, 3, 4};
  int n = sizeof(arr) / sizeof(arr[0]);
  memset(dp, -1, sizeof dp);
  cout << ""Minimum number of multiplications is "" << MatrixChainOrder(arr, n);
}",Matrix Chain Multiplication.
550,Numbers formed by flipping common set bits in two given integers | C ++ program to implement the above approach ; Function to flip bits of A and B which are set in both of them ; Clear the bits of A which are set in both A and B ; Clear the bits of B which are set in both A and B ; Print updated A and B ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
void flipBitsOfAandB(int A, int B) {
  A = A ^ (A & B);
  B = B ^ (A & B);
  cout << A << "" "" << B;
}
int main() {
  int A = 10, B = 20;
  flipBitsOfAandB(A, B);
  return 0;
}",Numbers formed by flipping common set bits in two given integers.
551,Sum of Hamming difference of consecutive numbers from 0 to N | Set 2 | C ++ Program to implement the above approach ; Function to calculate and return the hamming distance between all consecutive numbers from 0 to N ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
int TotalHammingDistance(int n) {
  int i = 1, sum = 0;
  while (n / i > 0) {
    sum = sum + n / i;
    i = i * 2;
  }
  return sum;
}
int main() {
  int N = 9;
  cout << TotalHammingDistance(N);
  return 0;
}",Sum of Hamming difference of consecutive numbers from 0 to N.
552,Sum of all divisors from 1 to N | Set 3 | C ++ Program to implement the above approach ; Function to find the sum of all divisors of all numbers from 1 to N ; Stores the sum ; Marks the last point of occurence with same count ; Calculate the sum ; Return the result ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
#defineintlonglongint
#definem1000000007
    void
    solve(long long n) {
  long long s = 0;
  for (int l = 1; l <= n;) {
    int r = n / floor(n / l);
    int x = (((r % m) * ((r + 1) % m)) / 2) % m;
    int y = (((l % m) * ((l - 1) % m)) / 2) % m;
    int p = ((n / l) % m);
    s = (s + (((x - y) % m) * p) % m + m) % m;
    s %= m;
    l = r + 1;
  }
  cout << (s + m) % m;
}
signed main() {
  long long n = 12;
  solve(n);
  return 0;
}",Sum of all divisors from 1 to N.
553,Minimize number of cuts required to break N length stick into N unit length sticks | C ++ program to find minimum time required to split a stick of N length into unit pieces ; Function to return the minimum time required to split stick of N into length into unit pieces ; Return the minimum unit of time required ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
int min_time_to_cut(int N) {
  if (N == 0)
    return 0;
  return ceil(log2(N));
}
int main() {
  int N = 100;
  cout << min_time_to_cut(N);
  return 0;
}",Minimize number of cuts required to break N length stick into N unit length sticks.
554,Count of distinct pair sum between two 1 to N value Arrays | C ++ implementation to count of distinct pair sum between two Array with values 1 to N ; Function to find the distinct sums ; Set to store distinct sums ; Inserting every sum ; returning distinct sums ; Driver code,"#include <bits/stdc++.h>
using namespace std;
int findDistinctSums(int n) {
  set<int> s;
  for (int i = 1; i <= n; i++) {
    for (int j = i; j <= n; j++) {
      s.insert(i + j);
    }
  }
  return s.size();
}
int main() {
  int N = 3;
  cout << findDistinctSums(N);
  return 0;
}",Count of distinct pair sum between two 1 to N value Arrays.
555,Print Triangle separated pattern | C ++ program to print the triangle separated pattern using star and slash character ; Function to print pattern recursively ; Base Case ; Conditions to print slash ; Condition to print forword slash ; Condition to print backward slash ; Else print ' * ' ; Recursive call for rows ; Recursive call for changing the rows ; Driver Code ; Function Call,"#include <bits/stdc++.h>
using namespace std;
int printPattern(int i, int j, int n) {
  if (j >= n) {
    return 0;
  }
  if (i >= n) {
    return 1;
  }
  if (j == i j == n - 1 - i) {
    if (i == n - 1 - j) {
      cout << ""/"";
    } else {
      cout << ""\\"";
    }
  } else {
    cout << ""*"";
  }
  if (printPattern(i, j + 1, n) == 1) {
    return 1;
  }
  cout << endl;
  return printPattern(i + 1, 0, n);
}
int main() {
  int N = 9;
  printPattern(0, 0, N);
  return 0;
}",Print Triangle separated pattern.
556,Find starting index for every occurrence of given array B in array A using Z | CPP implementation for pattern searching in an array using Z - Algorithm ; Function to calculate Z - Array ; Loop to calculate Z - Array ; Outside the Z - box ; Inside Z - box ; Helper function to merge two arrays and create a single array ; Array to store merged array ; Copying array B ; Adding a separator ; Copying array A ; Calling Z - function ; Function to help compute the Z array ; Printing indexes where array B occur ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
vector<int> zArray(vector<int> arr) {
  int n = arr.size();
  vector<int> z(n);
  int r = 0, l = 0;
  for (int k = 1; k < n; k++) {
    if (k > r) {
      r = l = k;
      while (r < n && arr[r] == arr[r - l])
        r++;
      z[k] = r - l;
      r--;
    } else {
      int k1 = k - l;
      if (z[k1] < r - k + 1)
        z[k] = z[k1];
      else {
        l = k;
        while (r < n && arr[r] == arr[r - l])
          r++;
        z[k] = r - l;
        r--;
      }
    }
  }
  return z;
}
vector<int> mergeArray(vector<int> A, vector<int> B) {
  int n = A.size();
  int m = B.size();
  vector<int> z;
  vector<int> c(n + m + 1);
  for (int i = 0; i < m; i++)
    c[i] = B[i];
  c[m] = INT_MAX;
  for (int i = 0; i < n; i++)
    c[m + i + 1] = A[i];
  z = zArray(c);
  return z;
}
void findZArray(vector<int> A, vector<int> B, int n) {
  int flag = 0;
  vector<int> z;
  z = mergeArray(A, B);
  for (int i = 0; i < z.size(); i++) {
    if (z[i] == n) {
      cout << (i - n - 1) << "" "";
      flag = 1;
    }
  }
  if (flag == 0) {
    cout << (""Not Found"");
  }
}
int main() {
  vector<int> A{1, 2, 3, 2, 3, 2};
  vector<int> B{2, 3};
  int n = B.size();
  findZArray(A, B, n);
}",Find starting index for every occurrence of given array B in array A using Z.
557,Check if a string can be repeated to make another string | CPP implementation of the approach ; Function to return the count of repetitions of string a to generate string b ; If b cannot be generated by repeating a ; Repeat a count number of times ; Driver code,"#include <bits/stdc++.h>
using namespace std;
int getCount(string a, string b) {
  if (b.length() % a.length() != 0)
    return -1;
  int count = b.length() / a.length();
  string str = """";
  for (int i = 0; i < count; i++) {
    str = str + a;
  }
  if (str == b)
    return count;
  return -1;
}
int main() {
  string a = ""geeks"";
  string b = ""geeksgeeks"";
  cout << (getCount(a, b));
  return 0;
}",Check if a string can be repeated to make another string.
558,"Check if a string can be formed from another string using given constraints | CPP program to Check if a given string can be formed from another string using given constraints ; Function to check if S2 can be formed of S1 ; length of strings ; hash - table to store count ; store count of each character ; traverse and check for every character ; if the character of s2 is present in s1 ; if the character of s2 is not present in S1 , then check if previous two ASCII characters are present in S1 ; Driver Code ; Calling function to check","#include <bits/stdc++.h>
using namespace std;
bool check(string S1, string S2) {
  int n1 = S1.size();
  int n2 = S2.size();
  unordered_map<int, int> mp;
  for (int i = 0; i < n1; i++) {
    mp[S1[i]]++;
  }
  for (int i = 0; i < n2; i++) {
    if (mp[S2[i]]) {
      mp[S2[i]]--;
    } else if (mp[S2[i] - 1] && mp[S2[i] - 2]) {
      mp[S2[i] - 1]--;
      mp[S2[i] - 2]--;
    } else {
      return false;
    }
  }
  return true;
}
int main() {
  string S1 = ""abbat"";
  string S2 = ""cat"";
  if (check(S1, S2))
    cout << ""YES"";
  else
    cout << ""NO"";
}",Check if a string can be formed from another string using given constraints.
559,"Count of occurrences of a ""1(0 + ) 1"" pattern in a string | C ++ program to calculate number of times the pattern occurred in given string ; Returns count of occurrences of ""1(0 + ) 1"" int str . ; int count = 0 ; Initialize result ; Check if encountered '1' forms a valid pattern as specified ; if 1 encountered for first time set oneSeen to 1 ; Check if there is any other character other than '0' or '1' . If so then set oneSeen to 0 to search again for new pattern ; Driver program to test above function","#include <iostream>
using namespace std;
int countPattern(string str) {
  int len = str.size();
  bool oneSeen = 0;
  for (int i = 0; i < len; i++) {
    if (str[i] == '1' && oneSeen == 1)
      if (str[i - 1] == '0')
        count++;
    if (str[i] == '1' && oneSeen == 0) {
      oneSeen = 1;
      continue;
    }
    if (str[i] != '0' && str[i] != '1')
      oneSeen = 0;
  }
  return count;
}
int main() {
  string str = ""100001abc101"";
  cout << countPattern(str);
  return 0;
}","Count of occurrences of a ""1(0 + ) 1"" pattern in a string."
560,"Convert given Strings into T by replacing characters in between strings any number of times | C ++ program for the above approach ; Function to check if it possible to make all the strings equal to the string T ; Stores the frequency of all the strings in the array arr [ ] ; Stores the frequency of the string T ; Iterate over the characters of the string T ; Iterate in the range [ 0 , N - 1 ] ; Iterate over the characters of the string arr [ i ] ; If freqT [ i ] is 0 and freqS [ i ] is not 0 ; If freqS [ i ] is 0 and freqT [ i ] is not 0 ; If freqS [ i ] is not freqT [ i ] * N ; Otherwise , return "" Yes "" ; Driver Code","#include <iostream>
using namespace std;
string checkIfPossible(int N, string arr[], string T) {
  int freqS[256] = {0};
  int freqT[256] = {0};
  for (char ch : T) {
    freqT[ch - 'a']++;
  }
  for (int i = 0; i < N; i++) {
    for (char ch : arr[i]) {
      freqS[ch - 'a']++;
    }
  }
  for (int i = 0; i < 256; i++) {
    if (freqT[i] == 0 && freqS[i] != 0) {
      return ""No"";
    } else if (freqS[i] == 0 && freqT[i] != 0) {
      return ""No"";
    } else if (freqT[i] != 0 && freqS[i] != (freqT[i] * N)) {
      return ""No"";
    }
  }
  return ""Yes"";
}
int main() {
  string arr[] = {""abc"", ""abb"", ""acc""};
  string T = ""abc"";
  int N = sizeof(arr) / sizeof(arr[0]);
  cout << checkIfPossible(N, arr, T);
  return 0;
}",Convert given Strings into T by replacing characters in between strings any number of times.
561,Count of groups of consecutive 1 s in a given Binary String | C ++ program for the above approach ; Function to find the number of the groups of 1 s only in the binary string ; Stores number of groups of 1 s ; Initialization of the stack ; Traverse the string S ; If S [ i ] is '1' ; Otherwise ; If st is empty ; If st is not empty ; Return answer ; Driver code ; Input ; Function call,"#include <bits/stdc++.h>
using namespace std;
int groupsOfOnes(string S, int N) {
  int count = 0;
  stack<int> st;
  for (int i = 0; i < N; i++) {
    if (S[i] == '1')
      st.push(1);
    else {
      if (!st.empty()) {
        count++;
        while (!st.empty()) {
          st.pop();
        }
      }
    }
  }
  if (!st.empty())
    count++;
  return count;
}
int main() {
  string S = ""100110111"";
  int N = S.length();
  cout << groupsOfOnes(S, N) << endl;
  return 0;
}",Count of groups of consecutive 1 s in a given Binary String.
562,"Palindromic strings of length 3 possible by using characters of a given string | C ++ program for the above approach ; Function to print all palindromic strings of length 3 that can be formed using characters of string S ; Stores the count of character ; Traverse the string S ; Stores all palindromic strings ; Iterate over the charchaters over the range [ ' a ' , ' z ' ] ; If Hash [ ch ] is equal to 2 ; Iterate over the characters over the range [ ' a ' , ' z ' ] ; Stores all the palindromic string ; Push the s into the set st ; If Hash [ i ] is greater than or equal to 3 ; Iterate over charchaters over the range [ ' a ' , ' z ' ] ; Stores all the palindromic string ; If Hash [ j ] is positive ; Push s into the set st ; Iterate over the set ; Driver Code","#include <bits/stdc++.h>
using namespace std;
void generatePalindrome(string S) {
  unordered_map<char, int> Hash;
  for (auto ch : S) {
    Hash[ch]++;
  }
  set<string> st;
  for (char i = 'a'; i <= 'z'; i++) {
    if (Hash[i] == 2) {
      for (char j = 'a'; j <= 'z'; j++) {
        string s = """";
        if (Hash[j] && i != j) {
          s += i;
          s += j;
          s += i;
          st.insert(s);
        }
      }
    }
    if (Hash[i] >= 3) {
      for (char j = 'a'; j <= 'z'; j++) {
        string s = """";
        if (Hash[j]) {
          s += i;
          s += j;
          s += i;
          st.insert(s);
        }
      }
    }
  }
  for (auto ans : st) {
    cout << ans << ""\n"";
  }
}
int main() {
  string S = ""ddabdac"";
  generatePalindrome(S);
  return 0;
}",Palindromic strings of length 3 possible by using characters of a given string.
563,"Count occurrences of substring X before every occurrence of substring Y in a given string | C ++ program for the above approach ; Function to count occurrences of the string Y in the string S for every occurrence of X in S ; Stores the count of occurrences of X ; Stores the lengths of the three strings ; Traverse the string S ; If the current substring is Y , then increment the value of count by 1 ; If the current substring is X , then print the count ; Driver Code","#include <bits/stdc++.h>
using namespace std;
void countOccurrences(string S, string X, string Y) {
  int count = 0;
  int N = S.length(), A = X.length();
  int B = Y.length();
  for (int i = 0; i < N; i++) {
    if (S.substr(i, B) == Y)
      count++;
    if (S.substr(i, A) == X)
      cout << count << "" "";
  }
}
int main() {
  string S = ""abcdefdefabc"";
  string X = ""abc"";
  string Y = ""def"";
  countOccurrences(S, X, Y);
  return 0;
}",Count occurrences of substring X before every occurrence of substring Y in a given string.
564,"Program to construct DFA for Regular Expression C ( A + B ) + | C ++ program for the above approach ; Function to find whether the given string is Accepted by the DFA ; If n <= 1 , then print No ; To count the matched characters ; Check if the first character is C ; Traverse the rest of string ; If character is A or B , increment count by 1 ; If the first character is not C , print - 1 ; If all characters matches ; Driver Code","#include <bits/stdc++.h>
using namespace std;
void DFA(string str, int N) {
  if (N <= 1) {
    cout << ""No"";
    return;
  }
  int count = 0;
  if (str[0] == 'C') {
    count++;
    for (int i = 1; i < N; i++) {
      if (str[i] == 'A' str[i] == 'B')
        count++;
      else
        break;
    }
  } else {
    cout << ""No"";
    return;
  }
  if (count == N)
    cout << ""Yes"";
  else
    cout << ""No"";
}
int main() {
  string str = ""CAABBAAB"";
  int N = str.size();
  DFA(str, N);
  return 0;
}",Program to construct DFA for Regular Expression C ( A + B ) +.
565,"Minimum and maximum number of digits required to be removed to make a given number divisible by 3 | C ++ program for the above approach ; Function to find the maximum and minimum number of digits to be removed to make str divisible by 3 ; Convert the string into array of digits ; Count of 0 s , 1 s , and 2 s ; Traverse the array ; Find the sum of digits % 3 ; Cases to find minimum number of digits to be removed ; Cases to find maximum number of digits to be removed ; Driver Code ; Function Call","#include <bits/stdc++.h>
using namespace std;
void minMaxDigits(string str, int N) {
  int arr[N];
  for (int i = 0; i < N; i++)
    arr[i] = (str[i] - '0') % 3;
  int zero = 0, one = 0, two = 0;
  for (int i = 0; i < N; i++) {
    if (arr[i] == 0)
      zero++;
    if (arr[i] == 1)
      one++;
    if (arr[i] == 2)
      two++;
  }
  int sum = 0;
  for (int i = 0; i < N; i++) {
    sum = (sum + arr[i]) % 3;
  }
  if (sum == 0) {
    cout << 0 << ' ';
  }
  if (sum == 1) {
    if (one && N > 1)
      cout << 1 << ' ';
    else if (two > 1 && N > 2)
      cout << 2 << ' ';
    else
      cout << -1 << ' ';
  }
  if (sum == 2) {
    if (two && N > 1)
      cout << 1 << ' ';
    else if (one > 1 && N > 2)
      cout << 2 << ' ';
    else
      cout << -1 << ' ';
  }
  if (zero > 0)
    cout << N - 1 << ' ';
  else if (one > 0 && two > 0)
    cout << N - 2 << ' ';
  else if (one > 2 two > 2)
    cout << N - 3 << ' ';
  else
    cout << -1 << ' ';
}
int main() {
  string str = ""12345"";
  int N = str.length();
  minMaxDigits(str, N);
  return 0;
}",Minimum and maximum number of digits required to be removed to make a given number divisible by 3.
566,"Minimum replacements required to obtain a K | C ++ program for the above approach ; Function to find the minimum number of changes to make the string K - periodic and palindrome ; Initialize ans with 0 ; Iterate from 0 to ( K + 1 ) / 2 ; Store frequency of character ; Iterate through all indices , i , i + K , i + 2 k ... . and store the frequency of character ; Increase the frequency of current character ; Iterate through all indices K - i , 2 K - i , 3 K - i ... . and store the frequency of character ; If K is odd & i is samw as K / 2 , break the loop ; Increase the frequency of current character ; Find the maximum frequency of a character among all visited characters ; If K is odd and i is same as K / 2 then , only N / K characters is visited ; Otherwise N / K * 2 characters has visited ; Return the result ; Driver Code ; Function Call","#include <bits/stdc++.h>
using namespace std;
int findMinimumChanges(int N, int K, string S) {
  int ans = 0;
  for (int i = 0; i < (K + 1) / 2; i++) {
    map<char, int> mp;
    for (int j = i; j < N; j += K) {
      mp[S[j]]++;
    }
    for (int j = N - i - 1; j >= 0; j -= K) {
      if (K & 1 and i == K / 2)
        break;
      mp[S[j]]++;
    }
    int curr_max = INT_MIN;
    for (auto p : mp)
      curr_max = max(curr_max, p.second);
    if (K & 1 and i == K / 2)
      ans += (N / K - curr_max);
    else
      ans += (N / K * 2 - curr_max);
  }
  return ans;
}
int main() {
  string S = ""aabbcbbcb"";
  int N = S.length();
  int K = 3;
  cout << findMinimumChanges(N, K, S);
  return 0;
}",Minimum replacements required to obtain a K.
567,Check if a String contains any index with more than K active characters | C ++ Program to implement the above approach ; Function to check if any index contains more than K active characters ; Store the last occurrence of each character in the map . ; Stores the active characters ; Insert the character ; If the size of set exceeds K ; Remove the character from set if i is the last index of the current character ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
string checkString(string s, int K) {
  int n = s.length();
  unordered_map<char, int> mp;
  for (int i = 0; i < n; i++) {
    mp[s[i]] = i;
  }
  int cnt = 0, f = 0;
  unordered_set<int> st;
  for (int i = 0; i < n; i++) {
    st.insert(s[i]);
    if (st.size() > K) {
      f = 1;
      break;
    }
    if (mp[s[i]] == i)
      st.erase(s[i]);
  }
  return (f == 1 ? ""Yes"" : ""No"");
}
int main() {
  string s = ""aabbcdca"";
  int k = 2;
  cout << checkString(s, k);
  return 0;
}",Check if a String contains any index with more than K active characters.
568,Count the number of strings in an array whose distinct characters are less than equal to M | C ++ implementation to count the number of strings in the array whose distinct characters is less than or equal to M ; Function to count the strings whose distinct characters count is less than M ; Loop to iterate over all the strings of the array ; Distinct characters in the String with the help of set ; Checking if its less than or equal to M ; Driver Code,"#include <bits/stdc++.h>
#include <set>
using namespace std;
void distinct(string S[], int M, int n) {
  int count = 0;
  for (int i = 0; i < n; i++) {
    set<char> set1;
    for (int j = 0; j < S[i].length(); j++) {
      if (set1.find(S[i][j]) == set1.end())
        set1.insert(S[i][j]);
    }
    int c = set1.size();
    if (c <= M)
      count += 1;
  }
  cout << (count);
}
int main() {
  string S[] = {""HERBIVORES"", ""AEROPLANE"", ""GEEKSFORGEEKS""};
  int M = 7;
  int n = sizeof(S) / sizeof(S[0]);
  distinct(S, M, n);
  return 0;
}",Count the number of strings in an array whose distinct characters are less than equal to M.
569,Remove odd frequency characters from the string | C ++ program to remove the characters having odd frequencies in the string ; Function to remove the characters which have odd frequencies in the string ; Create a map to store the frequency of each character ; To store the new string ; Remove the characters which have odd frequencies ; If the character has odd frequency then skip ; Else concatenate the character to the new string ; Return the modified string ; Driver code ; Remove the characters which have odd frequencies,"#include <bits/stdc++.h>
using namespace std;
string removeOddFrequencyCharacters(string s) {
  unordered_map<char, int> m;
  for (int i = 0; i < s.length(); i++) {
    m[s[i]]++;
  }
  string new_string = """";
  for (int i = 0; i < s.length(); i++) {
    if (m[s[i]] & 1)
      continue;
    new_string += s[i];
  }
  return new_string;
}
int main() {
  string str = ""geeksforgeeks"";
  str = removeOddFrequencyCharacters(str);
  cout << str << ""\n"";
  return 0;
}",Remove odd frequency characters from the string.
570,"Product of nodes at k | C ++ implementation to find product of elements at k - th level ; Recursive Function to find product of elements at k - th level ; if subtree is null , just like if root == NULL ; Consider only level k node to be part of the product ; Recur for Left Subtree ; Recur for Right Subtree ; Taking care of ' ) ' after left and right subtree ; Driver Code","#include <bits/stdc++.h>
using namespace std;
int productAtKthLevel(string tree, int k, int &i, int level) {
  if (tree[i++] == '(') {
    if (tree[i] == ')')
      return 1;
    int product = 1;
    if (level == k)
      product = tree[i] - '0';
    int leftproduct = productAtKthLevel(tree, k, ++i, level + 1);
    int rightproduct = productAtKthLevel(tree, k, ++i, level + 1);
    ++i;
    return product * leftproduct * rightproduct;
  }
}
int main() {
  string tree = ""(0(5(6()())(4()""
                ""(9()())))(7(1()())(3()())))"";
  int k = 2;
  int i = 0;
  cout << productAtKthLevel(tree, k, i, 0);
  return 0;
}",Product of nodes at k.
571,Print the most occurring character in an array of strings | C ++ program to print the most occurring character in an array of strings ; Function to print the most occurring character ; Creating a hash of size 26 ; For loop to iterate through every string of the array ; For loop to iterate through every character of the string ; Incrementing the count of the character in the hash ; Finding the character with the maximum count ; Driver code ; Declaring Vector of String type,"#include <bits/stdc++.h>
using namespace std;
void findMostOccurringChar(vector<string> str) {
  int hash[26] = {0};
  for (int i = 0; i < str.size(); i++) {
    for (int j = 0; j < str[i].length(); j++) {
      hash[str[i][j]]++;
    }
  }
  int max = 0;
  for (int i = 0; i < 26; i++) {
    max = hash[i] > hash[max] ? i : max;
  }
  cout << (char)(max + 97) << endl;
}
int main() {
  vector<string> str;
  str.push_back(""animal"");
  str.push_back(""zebra"");
  str.push_back(""lion"");
  str.push_back(""giraffe"");
  findMostOccurringChar(str);
  return 0;
}",Print the most occurring character in an array of strings.
572,Check whether the given floating point number is a palindrome | C ++ implementation of the approach ; Function that returns true if num is palindrome ; Convert the given floating point number into a string ; Pointers pointing to the first and the last character of the string ; Not a palindrome ; Update the pointers ; Driver code,"#include <bits/stdc++.h>
using namespace std;
bool isPalindrome(float num) {
  stringstream ss;
  ss << num;
  string s;
  ss >> s;
  int low = 0;
  int high = s.size() - 1;
  while (low < high) {
    if (s[low] != s[high])
      return false;
    low++;
    high--;
  }
  return true;
}
int main() {
  float n = 123.321 f;
  if (isPalindrome(n))
    cout << ""Yes"";
  else
    cout << ""No"";
  return 0;
}",Check whether the given floating point number is a palindrome.
573,Maximum number of times str1 appears as a non | C ++ implementation of the approach ; Function to return the maximum number of times str1 can appear as a non - overlapping substring in str2 ; str1 cannot never be substring of str2 ; Store the frequency of the characters of str1 ; Store the frequency of the characters of str2 ; To store the required count of substrings ; Current character doesn 't appear in str1 ; Frequency of the current character in str1 is greater than its frequency in str2 ; Update the count of possible substrings ; Driver code,"#include <bits/stdc++.h>
using namespace std;
const int MAX = 26;
int maxSubStr(string str1, int len1, string str2, int len2) {
  if (len1 > len2)
    return 0;
  int freq1[MAX] = {0};
  for (int i = 0; i < len1; i++)
    freq1[str1[i] - 'a']++;
  int freq2[MAX] = {0};
  for (int i = 0; i < len2; i++)
    freq2[str2[i] - 'a']++;
  int minPoss = INT_MAX;
  for (int i = 0; i < MAX; i++) {
    if (freq1[i] == 0)
      continue;
    if (freq1[i] > freq2[i])
      return 0;
    minPoss = min(minPoss, freq2[i] / freq1[i]);
  }
  return minPoss;
}
int main() {
  string str1 = ""geeks"", str2 = ""gskefrgoekees"";
  int len1 = str1.length();
  int len2 = str2.length();
  cout << maxSubStr(str1, len1, str2, len2);
  return 0;
}",Maximum number of times str1 appears as a non.
574,Number of ways to insert two pairs of parentheses into a string of N characters | C ++ implementation of the approach ; Function to return the number of ways to insert the bracket pairs ; Driver code,"#include <bits/stdc++.h>
using namespace std;
int cntWays(string str, int n) {
  int x = n + 1;
  int ways = x * x * (x * x - 1) / 12;
  return ways;
}
int main() {
  string str = ""ab"";
  int n = str.length();
  cout << cntWays(str, n);
  return 0;
}",Number of ways to insert two pairs of parentheses into a string of N characters.
575,Minimum number of substrings the given string can be splitted into that satisfy the given conditions | C ++ implementation of the approach ; Set to store all the strings from the given array ; To store the required count ; Recursive function to find the count of substrings that can be splitted starting from the index start such that all the substrings are present in the map ; All the chosen substrings are present in the map ; Update the minimum count of substrings ; Starting from the substrings of length 1 that start with the given index ; Get the substring ; If the substring is present in the set ; Recursive call for the rest of the string ; Function that inserts all the strings from the given array in a set and calls the recursive function to find the minimum count of substrings str can be splitted into that satisfy the given condition ; Insert all the strings from the given array in a set ; Find the required count ; Driver code,"#include <bits/stdc++.h>
using namespace std;
unordered_set<string> uSet;
int minCnt = INT_MAX;
void findSubStr(string str, int cnt, int start) {
  if (start == str.length()) {
    minCnt = min(cnt, minCnt);
  }
  for (int len = 1; len <= (str.length() - start); len++) {
    string subStr = str.substr(start, len);
    if (uSet.find(subStr) != uSet.end()) {
      findSubStr(str, cnt + 1, start + len);
    }
  }
}
void findMinSubStr(string arr[], int n, string str) {
  for (int i = 0; i < n; i++)
    uSet.insert(arr[i]);
  findSubStr(str, 0, 0);
}
int main() {
  string str = ""123456"";
  string arr[] = {""1"", ""12345"", ""2345"", ""56"", ""23"", ""456""};
  int n = sizeof(arr) / sizeof(string);
  findMinSubStr(arr, n, str);
  cout << minCnt;
  return 0;
}",Minimum number of substrings the given string can be splitted into that satisfy the given conditions.
576,"Number of substrings that start with "" geeks "" and end with "" for "" | C ++ implementation of the approach ; Function to return the count of required substrings ; For every index of the string ; If the substring starting at the current index is "" geeks "" ; If the substring is "" for "" ; Driver code","#include <iostream>
using namespace std;
int countSubStr(string s, int n) {
  int c1 = 0, c2 = 0;
  for (int i = 0; i < n; i++) {
    if (s.substr(i, 5) == ""geeks"")
      c1++;
    if (s.substr(i, 3) == ""for"")
      c2 = c2 + c1;
  }
  return c2;
}
int main() {
  string s = ""geeksforgeeksisforgeeks"";
  int n = s.size();
  cout << countSubStr(s, n);
  return 0;
}","Number of substrings that start with "" geeks "" and end with "" for ""."
577,InfyTQ 2019 : Find the position from where the parenthesis is not balanced | C ++ implementation of the approach ; Defining the string ; Storing opening braces in list lst1 ; Storing closing braces in list lst2 ; Creating an empty list lst ; Creating dictionary to map closing braces to opening ones ; If first position of string contain any closing braces return 1 ; If characters of string are opening braces then append them in a list ; When size of list is 0 and new closing braces is encountered then print its index starting from 1 ; As we encounter closing braces we map them with theircorresponding opening braces using dictionary and check if it is same as last opened braces ( last element in list ) if yes then we delete that element from list ; Otherwise we return the index ( starting from 1 ) at which nesting is found wrong ; At end if the list is empty it means the string is perfectly nested,"#include <bits/stdc++.h>
using namespace std;
int main() {
  string String = ""{[()]}[]"";
  vector<char> lst1 = {'{', '(', '['};
  vector<char> lst2 = {'}', ')', ']'};
  vector<char> lst;
  int k;
  map<char, char> Dict;
  Dict.insert(pair<int, int>(')', '('));
  Dict.insert(pair<int, int>('}', '{'));
  Dict.insert(pair<int, int>(']', '['));
  int a = 0, b = 0, c = 0;
  if (count(lst2.begin(), lst2.end(), String[0])) {
    cout << 1 << endl;
  } else {
    for (int i = 0; i < String.size(); i++) {
      if (count(lst1.begin(), lst1.end(), String[i])) {
        lst.push_back(String[i]);
        k = i + 2;
      } else {
        if (lst.size() == 0 && (count(lst2.begin(), lst2.end(), String[i]))) {
          cout << (i + 1) << endl;
          c = 1;
          break;
        } else {
          if (Dict[String[i]] == lst[lst.size() - 1]) {
            lst.pop_back();
          } else {
            break;
            cout << (i + 1) << endl;
            a = 1;
          }
        }
      }
    }
    if (lst.size() == 0 && c == 0) {
      cout << 0 << endl;
      b = 1;
    }
    if (a == 0 && b == 0 && c == 0) {
      cout << k << endl;
    }
  }
  return 0;
}",InfyTQ 2019 : Find the position from where the parenthesis is not balanced.
578,Encrypt the given string with the following operations | C ++ implementation of the above approach : ; Function to return the encrypted string ; Reduce x because rotation of length 26 is unnecessary ; Calculate the frequency of characters ; If the frequency of current character is even then increment it by x ; Else decrement it by x ; Return the count ; Driver code,"#include <bits/stdc++.h>
#defineMAX26
using namespace std;
string encryptStr(string str, int n, int x) {
  x = x % MAX;
  int freq[MAX] = {0};
  for (int i = 0; i < n; i++) {
    freq[str[i] - 'a']++;
  }
  for (int i = 0; i < n; i++) {
    if (freq[str[i] - 'a'] % 2 == 0) {
      int pos = (str[i] - 'a' + x) % MAX;
      str[i] = (char)(pos + 'a');
    } else {
      int pos = (str[i] - 'a' - x);
      if (pos < 0) {
        pos += MAX;
      }
      str[i] = (char)(pos + 'a');
    }
  }
  return str;
}
int main() {
  string s = ""abcda"";
  int n = s.size();
  int x = 3;
  cout << encryptStr(s, n, x) << endl;
  return 0;
}",Encrypt the given string with the following operations.
579,Rearrange characters in a string such that no two adjacent are same using hashing | C ++ implementation of the approach ; Function that returns true if it is possible to rearrange the characters of the string such that no two consecutive characters are same ; To store the frequency of each of the character ; To store the maximum frequency so far ; If possible ; Driver code,"#include <bits/stdc++.h>
#include <time.h>
using namespace std;
int isPossible(string str) {
  unordered_map<char, int> freq;
  int max_freq = 0;
  for (int j = 0; j < (str.length()); j++) {
    freq[str[j]]++;
    if (freq[str[j]] > max_freq)
      max_freq = freq[str[j]];
  }
  if (max_freq <= (str.length() - max_freq + 1))
    return true;
  return false;
}
int main() {
  string str = ""geeksforgeeks"";
  if (isPossible(str))
    cout << ""Yes"";
  else
    cout << ""No"";
  return 0;
}",Rearrange characters in a string such that no two adjacent are same using hashing.
580,Find uncommon characters of the two strings | Set 2 | C ++ implementation of the approach ; Function to print the uncommon characters in the given string in sorted order ; Converting character to ASCII code ; Bit operation ; Converting character to ASCII code ; Bit operation ; XOR operation leaves only uncommon characters in the ans variable ; Driver code,"#include <bits/stdc++.h>
using namespace std;
void printUncommon(string str1, string str2) {
  int a1 = 0, a2 = 0;
  for (int i = 0; i < str1.length(); i++) {
    int ch = int(str1[i]) - 'a';
    a1 = a1 | (1 << ch);
  }
  for (int i = 0; i < str2.length(); i++) {
    int ch = int(str2[i]) - 'a';
    a2 = a2 | (1 << ch);
  }
  int ans = a1 ^ a2;
  int i = 0;
  while (i < 26) {
    if (ans % 2 == 1) {
      cout << char('a' + i);
    }
    ans = ans / 2;
    i++;
  }
}
int main() {
  string str1 = ""geeksforgeeks"";
  string str2 = ""geeksquiz"";
  printUncommon(str1, str2);
  return 0;
}",Find uncommon characters of the two strings.
581,"Minimum number of bracket reversals needed to make an expression balanced | Set | C ++ program to find minimum number of reversals required to balance an expression ; Returns count of minimum reversals for making expr balanced . Returns - 1 if expr cannot be balanced . ; length of expression must be even to make it balanced by using reversals . ; To store number of reversals required . ; To store number of unbalanced opening brackets . ; To store number of unbalanced closing brackets . ; If current bracket is open then increment open count . ; If current bracket is close , check if it balances opening bracket . If yes then decrement count of unbalanced opening bracket else increment count of closing bracket . ; For the case : "" } { "" or when one closing and one opening bracket remains for pairing , then both need to be reversed . ; Driver Code","#include <bits/stdc++.h>
using namespace std;
int countMinReversals(string expr) {
  int len = expr.length();
  if (len % 2)
    return -1;
  int ans = 0;
  int i;
  int open = 0;
  int close = 0;
  for (i = 0; i < len; i++) {
    if (expr[i] == '{')
      open++;
    else {
      if (!open)
        close++;
      else
        open--;
    }
  }
  ans = (close / 2) + (open / 2);
  close %= 2;
  open %= 2;
  if (close)
    ans += 2;
  return ans;
}
int main() {
  string expr = ""}}{{"";
  cout << countMinReversals(expr);
  return 0;
}",Minimum number of bracket reversals needed to make an expression balanced.
582,Character pairs from two strings with even sum | C ++ implementation of the approach ; Function to return the total number of valid pairs ; Count total number of even and odd ascii values for string s1 ; Count total number of even and odd ascii values for string s2 ; Return total valid pairs ; Driver code,"#include <bits/stdc++.h>
using namespace std;
int totalPairs(string s1, string s2) {
  int a1 = 0, b1 = 0;
  for (int i = 0; i < s1.length(); i++) {
    if (int(s1[i]) % 2 != 0)
      a1++;
    else
      b1++;
  }
  int a2 = 0, b2 = 0;
  for (int i = 0; i < s2.length(); i++) {
    if (int(s2[i]) % 2 != 0)
      a2++;
    else
      b2++;
  }
  return ((a1 * a2) + (b1 * b2));
}
int main() {
  string s1 = ""geeks"", s2 = ""for"";
  cout << totalPairs(s1, s2);
  return 0;
}",Character pairs from two strings with even sum.
583,Maximum occurrence of prefix in the Array | CPP program to find the number of occurrences of prefix which occurs maximum no . of time ; Function to return the count of the required prefix ; Find the frequency of first character of string ; Driver code,"#include <bits/stdc++.h>
using namespace std;
int prefixOccurrences(string str) {
  char c = str[0];
  int countc = 0;
  for (int i = 0; i < str.length(); i++) {
    if (str[i] == c)
      countc++;
  }
  return countc;
}
int main() {
  string str = ""abbcdabbcd"";
  cout << prefixOccurrences(str);
  return 0;
}",Maximum occurrence of prefix in the Array.
584,Minimum number of given operations required to convert a string to another string | C ++ implementation of the approach ; Function to return the minimum operations of the given type required to convert string s to string t ; Characters are already equal ; Increment count of 0 s ; Increment count of 1 s ; Driver code,"#include <bits/stdc++.h>
using namespace std;
int minOperations(string s, string t, int n) {
  int ct0 = 0, ct1 = 0;
  for (int i = 0; i < n; i++) {
    if (s[i] == t[i])
      continue;
    if (s[i] == '0')
      ct0++;
    else
      ct1++;
  }
  return max(ct0, ct1);
}
int main() {
  string s = ""010"", t = ""101"";
  int n = s.length();
  cout << minOperations(s, t, n);
  return 0;
}",Minimum number of given operations required to convert a string to another string.
585,Decrypt a string encrypted by repeating i | C ++ implementation of the approach ; Function to return the decrypted string ; Initial jump will be 1 ; Increment jump by 1 with every character ; Driver code,"#include <bits/stdc++.h>
using namespace std;
string decryptString(string str, int n) {
  int i = 0, jump = 1;
  string decryptedStr = """";
  while (i < n) {
    decryptedStr += str[i];
    i += jump;
    jump++;
  }
  return decryptedStr;
}
int main() {
  string str = ""geeeeekkkksssss"";
  int n = str.length();
  cout << decryptString(str, n);
  return 0;
}",Decrypt a string encrypted by repeating i.
586,"Find Bit whose minimum sequence flips makes all bits same | C ++ program to find which bit sequence to be flipped ; Function to check which bit is to be flipped ; variable to store first and last character of string ; Check if first and last characters are equal , if yes , then return the character which is not at last ; else return last ; Driver Code","#include <bits/stdc++.h>
using namespace std;
char bitToBeFlipped(string s) {
  char last = s[s.length() - 1];
  char first = s[0];
  if (last == first) {
    if (last == '0') {
      return '1';
    } else {
      return '0';
    }
  } else if (last != first) {
    return last;
  }
}
int main() {
  string s = ""1101011000"";
  cout << bitToBeFlipped(s) << endl;
  return 0;
}",Find Bit whose minimum sequence flips makes all bits same.
587,"Sum and Product of Prime Frequencies of Characters in a String | C ++ program to find Sum and product of Prime Frequencies of Characters in a String ; Function to create Sieve to check primes ; false here indicates that it is not prime ; If prime [ p ] is not changed , then it is a prime ; Update all multiples of p , set them to non - prime ; Function to find the sum of prime frequencies of the characters of the given string ; map is used to store character frequencies ; Traverse the map ; If the frequency is prime ; Driver code","#include <bits/stdc++.h>
using namespace std;
void SieveOfEratosthenes(bool prime[], int p_size) {
  prime[0] = false;
  prime[1] = false;
  for (int p = 2; p * p <= p_size; p++) {
    if (prime[p]) {
      for (int i = p * 2; i <= p_size; i += p)
        prime[i] = false;
    }
  }
}
void sumProdOfPrimeFreq(string s) {
  bool prime[s.length() + 1];
  memset(prime, true, sizeof(prime));
  SieveOfEratosthenes(prime, s.length() + 1);
  int i, j;
  unordered_map<char, int> m;
  for (i = 0; i < s.length(); i++)
    m[s[i]]++;
  int sum = 0, product = 1;
  for (auto it = m.begin(); it != m.end(); it++) {
    if (prime[it->second]) {
      sum += it->second;
      product *= it->second;
    }
  }
  cout << ""Sum = "" << sum;
  cout << ""Product=""
}
int main() {
  string s = ""geeksforgeeks"";
  sumProdOfPrimeFreq(s);
  return 0;
}",Sum and Product of Prime Frequencies of Characters in a String.
588,"Check if frequency of character in one string is a factor or multiple of frequency of same character in other string | C ++ implementation of above approach ; Function that checks if the frequency of character are a factor or multiple of each other ; map store frequency of each character ; if any frequency is 0 , then continue as condition is satisfied ; if factor or multiple , then condition satisfied ; if condition not satisfied ; Driver code","#include <bits/stdc++.h>
using namespace std;
bool multipleOrFactor(string s1, string s2) {
  map<char, int> m1, m2;
  for (int i = 0; i < s1.length(); i++)
    m1[s1[i]]++;
  for (int i = 0; i < s2.length(); i++)
    m2[s2[i]]++;
  map<char, int>::iterator it;
  for (it = m1.begin(); it != m1.end(); it++) {
    if (m2.find((*it).first) == m2.end())
      continue;
    if (m2[(*it).first] % (*it).second == 0 ||
        (*it).second % m2[(*it).first] == 0)
      continue;
    else
      return false;
  }
}
int main() {
  string s1 = ""geeksforgeeks"";
  string s2 = ""geeks"";
  multipleOrFactor(s1, s2) ? cout << ""YES"" : cout << ""NO"";
  return 0;
}",Check if frequency of character in one string is a factor or multiple of frequency of same character in other string.
589,Remove even frequency characters from the string | C ++ implementation of the approach ; Function that removes the characters which have even frequencies in the string ; create a map to store the frequency of each character ; to store the new string ; remove the characters which have even frequencies ; if the character has even frequency then skip ; else concatenate the character to the new string ; display the modified string ; Driver code ; remove the characters which have even frequencies,"#include <bits/stdc++.h>
using namespace std;
void solve(string s) {
  unordered_map<char, int> m;
  for (int i = 0; i < s.length(); i++) {
    m[s[i]]++;
  }
  string new_string = """";
  for (int i = 0; i < s.length(); i++) {
    if (m[s[i]] % 2 == 0)
      continue;
    new_string += s[i];
  }
  cout << new_string << endl;
}
int main() {
  string s = ""aabbbddeeecc"";
  solve(s);
  return 0;
}",Remove even frequency characters from the string.
590,Remove all the palindromic words from the given sentence | C ++ implementation to remove all the palindromic words from the given sentence ; function to check if ' str ' is palindrome ; traversing from both the ends ; not palindrome ; palindrome ; function to remove all the palindromic words from the given sentence ; ' final _ str ' to store the final string and ' word ' to one by one store each word of ' str ' ; add space at the end of ' str ' ; traversing ' str ' ; accumulating characters of the current word ; if ' word ' is not palindrome then a add it to ' final _ str ' ; reset ; required final string ; Driver program to test above,"#include <bits/stdc++.h>
using namespace std;
bool isPalindrome(string str) {
  int i = 0, j = str.size() - 1;
  while (i < j)
    if (str[i++] != str[j--])
      return false;
  return true;
}
string removePalinWords(string str) {
  string final_str = """", word = """";
  str = str + "" "";
  int n = str.size();
  for (int i = 0; i < n; i++) {
    if (str[i] != ' ')
      word = word + str[i];
    else {
      if (!(isPalindrome(word)))
        final_str += word + "" "";
      word = """";
    }
  }
  return final_str;
}
int main() {
  string str = ""Text contains malayalam and level words"";
  cout << removePalinWords(str);
  return 0;
}",Remove all the palindromic words from the given sentence.
591,Sum of all subsequences of a number | CPP program to find the sum of elements present in all subsequences ; Returns numeric value of a subsequence of s . The subsequence to be picked is decided using bit pattern of num ( We pick all thosedigits for which there is a set bit in num ) ; Initialize the result ; till n != 0 ; if i - th bit is set then add this number ; right shift i ; function to find combined sum of all individual subsequence sum ; length of string ; stores the combined ; 2 ^ n - 1 subsequences ; loop for all subsequences ; returns the combined sum ; driver code,"#include <bits/stdc++.h>
using namespace std;
int findSubSequence(string s, int num) {
  int res = 0;
  int i = 0;
  while (num) {
    if (num & 1)
      res += s[i] - '0';
    i++;
    num = num >> 1;
  }
  return res;
}
int combinedSum(string s) {
  int n = s.length();
  int c_sum = 0;
  int range = (1 << n) - 1;
  for (int i = 0; i <= range; i++)
    c_sum += findSubSequence(s, i);
  return c_sum;
}
int main() {
  string s = ""123"";
  cout << combinedSum(s);
  return 0;
}",Sum of all subsequences of a number.
592,Longest subsequence where each character occurs at least k times | CPP Program to find the subsequence with each character occurring at least k times in string s ; Function to find the subsequence ; Taking an extra array to keep record for character count in s ; Counting occurrences of all characters in str [ ] ; Printing characters with count >= k in same order as they appear in str . ; Driver code,"#include <iostream>
using namespace std;
#defineMAX_CHAR26 void findSubsequence(string str, int k) {
  int a[MAX_CHAR] = {0};
  for (int i = 0; i < str.size(); i++)
    a[str[i] - 'a']++;
  for (int i = 0; i < l; i++)
    if (a[str[i] - 'a'] >= k)
      cout << str[i];
}
int main() {
  int k = 2;
  findSubsequence(""geeksforgeeks"", k);
  return 0;
}",Longest subsequence where each character occurs at least k times.
593,gOOGLE cASE of a given sentence | C ++ program to convert a sentence to gOOGLE cASE . ; Empty strings ; Convert input string to upper case ; Check if character is not a space and adding it to string w ; Converting first character to lower case and subsequent initial letter of another word to lower case ; Driver code,"#include <bits/stdc++.h>
using namespace std;
string convert(string str) {
  string w = """", z = """";
  transform(str.begin(), str.end(), str.begin(), ::toupper);
  str += "" "";
  for (int i = 0; i < str.length(); i++) {
    char ch = str[i];
    if (ch != ' ') {
      w = w + ch;
    } else {
      z = z + char(tolower(w[0])) + w.substr(1) + "" "";
      w = """";
    }
  }
  return z;
}
int main() {
  string str = ""I got intern at geeksforgeeks"";
  cout << convert(str) << endl;
  return 0;
}",gOOGLE cASE of a given sentence.
594,Encrypt string with product of number of vowels and consonants in substring of size k | CPP Program to Encrypt string with product of number of vowels and consonants in substring of size k ; isVowel ( ) is a function that returns true for a vowel and false otherwise . ; function to Encrypt the string ; cv to count vowel cc to count consonants ; Counting prefix count of vowel and prefix count of consonants ; generating the encrypted string . ; Driven Program,"#include <bits/stdc++.h>
using namespace std;
bool isVowel(char c) { return (c == 'a' c == 'e' c == 'i' c == 'o' c == 'u'); }
string encryptString(string s, int n, int k) {
  int cv[n], cc[n];
  if (isVowel(s[0]))
    cv[0] = 1;
  else
    cc[0] = 1;
  for (int i = 1; i < n; i++) {
    cv[i] = cv[i - 1] + isVowel(s[i]);
    cc[i] = cc[i - 1] + !isVowel(s[i]);
  }
  string ans = """";
  int prod = 0;
  prod = cc[k - 1] * cv[k - 1];
  ans += to_string(prod);
  for (int i = k; i < s.length(); i++) {
    prod = (cc[i] - cc[i - k]) * (cv[i] - cv[i - k]);
    ans += to_string(prod);
  }
  return ans;
}
int main() {
  string s = ""hello"";
  int n = s.length();
  int k = 2;
  cout << encryptString(s, n, k) << endl;
  return 0;
}",Encrypt string with product of number of vowels and consonants in substring of size k.
595,Count occurrences of a word in string | C ++ program to count the number of occurrence of a word in the given string ; split the string by spaces in a ; search for pattern in a ; if match found increase count ; Driver code,"#include <bits/stdc++.h>
using namespace std;
int countOccurrences(char *str, string word) {
  char *p;
  vector<string> a;
  p = strtok(str, "" "");
  while (p != NULL) {
    a.push_back(p);
    p = strtok(NULL, "" "");
  }
  int c = 0;
  for (int i = 0; i < a.size(); i++)
    if (word == a[i])
      c++;
  return c;
}
int main() {
  char str[] = ""GeeksforGeeks A computer science portal for geeks "";
  string word = ""portal"";
  cout << countOccurrences(str, word);
  return 0;
}",Count occurrences of a word in string.
596,"Permute a string by changing case | CPP code to print all permutations with respect to cases ; Function to generate permutations ; Number of permutations is 2 ^ n ; Converting string to lower case ; Using all subsequences and permuting them ; If j - th bit is set , we convert it to upper case ; Printing current combination ; Driver code","#include <bits/stdc++.h>
using namespace std;
void permute(string input) {
  int n = input.length();
  int max = 1 << n;
  transform(input.begin(), input.end(), input.begin(), ::tolower);
  for (int i = 0; i < max; i++) {
    string combination = input;
    for (int j = 0; j < n; j++)
      if (((i >> j) & 1) == 1)
        combination[j] = toupper(input.at(j));
    cout << combination << "" "";
  }
}
int main() {
  permute(""ABC"");
  return 0;
}",Permute a string by changing case.
597,Print the string after the specified character has occurred given no . of times | C ++ program for above implementation ; Function to print the string ; If given count is 0 print the given string and return ; Start traversing the string ; Increment occ if current char is equal to given character ; Break the loop if given character has been occurred given no . of times ; Print the string after the occurrence of given character given no . of times ; Otherwise string is empty ; Drivers code,"#include <iostream>
using namespace std;
void printString(string str, char ch, int count) {
  int occ = 0, i;
  if (count == 0) {
    cout << str;
    return;
  }
  for (i = 0; i < str.length(); i++) {
    if (str[i] == ch)
      occ++;
    if (occ == count)
      break;
  }
  if (i < str.length() - 1)
    cout << str.substr(i + 1, str.length() - (i + 1));
  else
    cout << ""Empty string"";
}
int main() {
  string str = ""geeks for geeks"";
  printString(str, 'e', 2);
  return 0;
}",Print the string after the specified character has occurred given no . of times.
598,Reverse vowels in a given string | C ++ program to reverse order of vowels ; utility function to check for vowel ; Function to reverse order of vowels ; Start two indexes from two corners and move toward each other ; swapping ; Driver function,"#include <bits/stdc++.h>
using namespace std;
bool isVowel(char c) {
  return (c == 'a' c == 'A' c == 'e' c == 'E' c == 'i' c == 'I' c == 'o' c ==
          'O' c == 'u' c == 'U');
}
string reverseVowel(string str) {
  int i = 0;
  int j = str.length() - 1;
  while (i < j) {
    if (!isVowel(str[i])) {
      i++;
      continue;
    }
    if (!isVowel(str[j])) {
      j--;
      continue;
    }
    swap(str[i], str[j]);
    i++;
    j--;
  }
  return str;
}
int main() {
  string str = ""hello world"";
  cout << reverseVowel(str);
  return 0;
}",Reverse vowels in a given string.
599,Minimum number of palindromic subsequences to be removed to empty a binary string | C ++ program to count minimum palindromic subsequences to be removed to make an string empty . ; A function to check if a string str is palindrome ; Start from leftmost and rightmost corners of str ; Keep comparing characters while they are same ; Returns count of minimum palindromic subseuqnces to be removed to make string empty ; If string is empty ; If string is palindrome ; If string is not palindrome ; Driver code to test above,"#include <bits/stdc++.h>
using namespace std;
bool isPalindrome(const char *str) {
  int l = 0;
  int h = strlen(str) - 1;
  while (h > l)
    if (str[l++] != str[h--])
      return false;
  return true;
}
int minRemovals(const char *str) {
  if (str[0] =='')
    return 0;
  if (isPalindrome(str))
    return 1;
  return 2;
}
int main() {
  cout << minRemovals(""010010"") << endl;
  cout << minRemovals(""0100101"") << endl;
  return 0;
}",Minimum number of palindromic subsequences to be removed to empty a binary string.
600,"Find the value of XXXX ... . . ( N times ) % M where N is large | C ++ implementation of the approach ; Iterative function to calculate ( x ^ y ) % p in O ( log y ) ; Initialize result ; Update x if it is >= p ; If y is odd , multiply x with result ; y must be even now y = y / 2 ; Function to return XXX ... . . ( N times ) % M ; Return the mod by M of smaller numbers ; Creating a string of N X 's ; Converting the string to int and calculating the modulo ; Checking the parity of N ; Dividing the number into equal half ; Utilizing the formula for even N ; Dividing the number into equal half ; Utilizing the formula for odd N ; Driver code ; Print XXX ... ( N times ) % M","#include <bits/stdc++.h>
using namespace std;
int power(int x, unsigned int y, int p) {
  int res = 1;
  x = x % p;
  while (y > 0) {
    if (y & 1)
      res = (res * x) % p;
    y = y >> 1;
    x = (x * x) % p;
  }
  return res;
}
int findModuloByM(int X, int N, int M) {
  if (N < 6) {
    string temp(N, (char)(48 + X));
    int res = stoi(temp) % M;
    return res;
  }
  if (N % 2 == 0) {
    int half = findModuloByM(X, N / 2, M) % M;
    int res = (half * power(10, N / 2, M) + half) % M;
    return res;
  } else {
    int half = findModuloByM(X, N / 2, M) % M;
    int res = (half * power(10, N / 2 + 1, M) + half * 10 + X) % M;
    return res;
  }
}
int main() {
  int X = 6, N = 14, M = 9;
  cout << findModuloByM(X, N, M);
  return 0;
}",Find the value of XXXX ... . . ( N times ) % M where N is large.
601,Check if two circles intersect such that the third circle passes through their points of intersections and centers | C ++ program for the above approach ; Structure of the circle ; Utility function to check if given circles satisfy required criteria ; Stores the distance between the centres of C1 and C2 ; Stores the status if the given given criteria is satisfied or not ; If C1C2 is less than the sum of the radii of the first 2 circles ; If C3 is the midpoint of the centres at C1 and C2 ; Mark flag true ; Return flag ; Function to check if the given circles satisfy required criteria ; Check for the current combination of circles ; Check for the next combination ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
class circle {
public:
  double x;
  double y;
  double r;
};
bool check(circle C[]) {
  double C1C2 = sqrt((C[1].x - C[0].x) * (C[1].x - C[0].x) +
                     (C[1].y - C[0].y) * (C[1].y - C[0].y));
  bool flag = 0;
  if (C1C2 < (C[0].r + C[1].r)) {
    if ((C[0].x + C[1].x) == 2 * C[2].x && (C[0].y + C[1].y) == 2 * C[2].y) {
      flag = 1;
    }
  }
  return flag;
}
bool IsFairTriplet(circle c[]) {
  bool f = false;
  f |= check(c);
  for (int i = 0; i < 2; i++) {
    swap(c[0], c[2]);
    f |= check(c);
  }
  return f;
}
int main() {
  circle C[3];
  C[0] = {0, 0, 8};
  C[1] = {0, 10, 6};
  C[2] = {0, 5, 5};
  if (IsFairTriplet(C))
    cout << ""Yes"";
  else
    cout << ""No"";
  return 0;
}",Check if two circles intersect such that the third circle passes through their points of intersections and centers.
602,Program to find the Eccentricity of a Hyperbola | C ++ program for the above approach ; Function to find the eccentricity of a hyperbola ; Stores the squared ratio of major axis to minor axis ; Increment r by 1 ; Return the square root of r ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
double eccHyperbola(double A, double B) {
  double r = (double)B * B / A * A;
  r += 1;
  return sqrt(r);
}
int main() {
  double A = 3.0, B = 2.0;
  cout << eccHyperbola(A, B);
  return 0;
}",Program to find the Eccentricity of a Hyperbola.
603,Calculate area of a cyclic quadrilateral with given side lengths | C ++ program for the above approach ; Function to find the area of cyclic quadrilateral ; Stores the value of half of the perimeter ; Stores area of cyclic quadrilateral ; Return the resultant area ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
float calculateArea(float A, float B, float C, float D) {
  float S = (A + B + C + D) / 2;
  float area = sqrt((S - A) * (S - B) * (S - C) * (S - D));
  return area;
}
int main() {
  float A = 10;
  float B = 15;
  float C = 20;
  float D = 25;
  cout << calculateArea(A, B, C, D);
  return 0;
}",Calculate area of a cyclic quadrilateral with given side lengths.
604,Calculate ratio of area of a triangle inscribed in an Ellipse and the triangle formed by corresponding points on auxiliary circle | C ++ program for the above approach ; Function to calculate ratio of a triangle inscribed in an ellipse to the triangle on the auxiliary circle ; Stores the ratio of the semi - major to semi - minor axes ; Print the ratio ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
void triangleArea(int a, int b) {
  double ratio = (double)b / a;
  cout << ratio;
}
int main() {
  int a = 1, b = 2;
  triangleArea(a, b);
  return 0;
}",Calculate ratio of area of a triangle inscribed in an Ellipse and the triangle formed by corresponding points on auxiliary circle.
605,Program to find the Excenters of a Triangle | C ++ program for the above approach ; Function to calculate the distance between a pair of points ; Function to calculate the coordinates of the excenters of a triangle ; Length of the sides of the triangle ; Stores the coordinates of the excenters of the triangle ; For I1 ; For I2 ; For I3 ; Print the excenters of the triangle ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
float distance(int m, int n, int p, int q) {
  return sqrt(pow(n - m, 2) + pow(q - p, 2) * 1.0);
}
void Excenters(int x1, int y1, int x2, int y2, int x3, int y3) {
  float a = distance(x2, x3, y2, y3);
  float b = distance(x3, x1, y3, y1);
  float c = distance(x1, x2, y1, y2);
  vector<pair<float, float>> excenter(4);
  excenter[1].first = (-(a * x1) + (b * x2) + (c * x3)) / (-a + b + c);
  excenter[1].second = (-(a * y1) + (b * y2) + (c * y3)) / (-a + b + c);
  excenter[2].first = ((a * x1) - (b * x2) + (c * x3)) / (a - b + c);
  excenter[2].second = ((a * y1) - (b * y2) + (c * y3)) / (a - b + c);
  excenter[3].first = ((a * x1) + (b * x2) - (c * x3)) / (a + b - c);
  excenter[3].second = ((a * y1) + (b * y2) - (c * y3)) / (a + b - c);
  for (int i = 1; i <= 3; i++) {
    cout << excenter[i].first << "" "" << excenter[i].second << endl;
  }
}
int main() {
  float x1, x2, x3, y1, y2, y3;
  x1 = 0;
  x2 = 3;
  x3 = 0;
  y1 = 0;
  y2 = 0;
  y3 = 4;
  Excenters(x1, y1, x2, y2, x3, y3);
  return 0;
}",Program to find the Excenters of a Triangle.
606,"Program to find height of a Trapezoid | C ++ program for the above approach ; Function to calculate height of the trapezoid ; Apply Heron 's formula ; Calculate the area ; Calculate height of trapezoid ; Print the height ; Driver Code ; Given a , b , p1 and p2","#include <bits/stdc++.h>
using namespace std;
void findHeight(float p1, float p2, float b, float c) {
  float a = max(p1, p2) - min(p1, p2);
  float s = (a + b + c) / 2;
  float area = sqrt(s * (s - a) * (s - b) * (s - c));
  float height = (area * 2) / a;
  cout << ""Height is: "" << height;
}
int main() {
  float p1 = 25, p2 = 10;
  float a = 14, b = 13;
  findHeight(p1, p2, a, b);
  return 0;
}",Program to find height of a Trapezoid.
607,Icositetragonal Number | C ++ program to find nth Icositetragonal number ; Function to find Icositetragonal number ; Formula to calculate nth Icositetragonal number ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
int Icositetragonal_num(int n) { return (22 * n * n - 20 * n) / 2; }
int main() {
  int n = 3;
  cout << Icositetragonal_num(n) << endl;
  n = 10;
  cout << Icositetragonal_num(n);
  return 0;
}",Icositetragonal Number.
608,"Area of circle inscribed in a Isosceles Trapezoid | CPP implementation to find the rea of the circle inscribed in a trapezoid having non - parallel sides m , n ; Function to find area of circle inscribed in a trapezoid having non - parallel sides m , n ; radius of circle by the formula i . e . root ( m * n ) / 2 area of circle = ( 3.141 ) * ( R * * 2 ) ; Driver Code","#include <bits/stdc++.h>
using namespace std;
double area_of_circle(int m, int n) {
  int square_of_radius = (m * n) / 4;
  double area = (3.141 * square_of_radius);
  return area;
}
int main() {
  int n = 10;
  int m = 30;
  cout << (area_of_circle(m, n));
}",Area of circle inscribed in a Isosceles Trapezoid.
609,Area of Equilateral triangle inscribed in a Circle of radius R | C ++ implementation to find the area of the equilateral triangle inscribed in a circle of radius R ; Function to find the area of equilateral triangle inscribed in a circle of radius R ; Base and Height of equilateral triangle ; Area using Base and Height ; Driver Code,"#include <iostream>
using namespace std;
double area(int R) {
  double base = 1.732 * R;
  double height = (1.5) * R;
  double area = 0.5 * base * height;
  return area;
}
int main() {
  int R = 7;
  cout << (area(R));
  return 0;
}",Area of Equilateral triangle inscribed in a Circle of radius R.
610,Area of largest Circle that can be inscribed in a SemiCircle | C ++ Program to find the biggest circle which can be inscribed within the semicircle ; Function to find the area of the circle ; Radius cannot be negative ; Area of the largest circle ; Driver code,"#include <bits/stdc++.h>
using namespace std;
float circlearea(float R) {
  if (R < 0)
    return -1;
  float a = 3.14 * R * R / 4;
  return a;
}
int main() {
  float R = 2;
  cout << circlearea(R) << endl;
  return 0;
}",Area of largest Circle that can be inscribed in a SemiCircle.
611,Number of pairs of lines having integer intersection points | C ++ program to Number of pairs of lines having integer intersection points ; Count number of pairs of lines having integer intersection point ; Initialize arrays to store counts ; Count number of odd and even Pi ; Count number of odd and even Qi ; Return the count of pairs ; Driver code,"#include <bits/stdc++.h>
using namespace std;
int countPairs(int *P, int *Q, int N, int M) {
  int A[2] = {0}, B[2] = {0};
  for (int i = 0; i < N; i++)
    A[P[i] % 2]++;
  for (int i = 0; i < M; i++)
    B[Q[i] % 2]++;
  return (A[0] * B[0] + A[1] * B[1]);
}
int main() {
  int P[] = {1, 3, 2}, Q[] = {3, 0};
  int N = sizeof(P) / sizeof(P[0]);
  int M = sizeof(Q) / sizeof(Q[0]);
  cout << countPairs(P, Q, N, M);
  return 0;
}",Number of pairs of lines having integer intersection points.
612,Maximum number of line intersections formed through intersection of N planes | C ++ implementation of the above pproach ; Function to count maximum number of intersections possible ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
int countIntersections(int n) { return n * (n - 1) / 2; }
int main() {
  int n = 3;
  cout << countIntersections(n);
  return 0;
}",Maximum number of line intersections formed through intersection of N planes.
613,Area of a Regular Pentagram | C ++ implementation of the approach ; Function to return the area of triangle BCD ; Using Golden ratio ; Calculate area of triangle BCD ; Return area of all 5 triangle are same ; Function to return the area of regular pentagon ; Calculate the area of regular pentagon using above formula ; Return area of regular pentagon ; Function to return the area of pentagram ; Area of a pentagram is equal to the area of regular pentagon and five times the area of Triangle ; Driver code,"#include <bits/stdc++.h>
#definePI3 .14159
using namespace std;
double areaOfTriangle(float d) {
  float c = 1.618 * d;
  float s = (d + c + c) / 2;
  double area = sqrt(s * (s - c) * (s - c) * (s - d));
  return 5 * area;
}
double areaOfRegPentagon(float d) {
  double cal = 4 * tan(PI / 5);
  double area = (5 * d * d) / cal;
  return area;
}
double areaOfPentagram(float d) {
  return areaOfRegPentagon(d) + areaOfTriangle(d);
}
int main() {
  float d = 5;
  cout << areaOfPentagram(d) << endl;
  return 0;
}",Area of a Regular Pentagram.
614,Angle subtended by the chord to center of the circle when the angle subtended by the another equal chord of a congruent circle is given | C ++ program to find the angle subtended by the chord to the centre of the circle when the angle subtended by another equal chord of a congruent circle is given ; Driver code,"#include <bits/stdc++.h>
using namespace std;
void anglequichord(int z) {
  cout << ""The angle is "" << z << "" degrees"" << endl;
}
int main() {
  int z = 48;
  anglequichord(z);
  return 0;
}",Angle subtended by the chord to center of the circle when the angle subtended by the another equal chord of a congruent circle is given.
615,Program to print ASCII Value of all digits of a given number | C ++ program to convert the digits of a number to its ASCII values ; Function to convert digits of N to respective ASCII values ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
int convertToASCII(int N) {
  string num = to_string(N);
  for (char ch : num) {
    cout << ch << "" ("" << (int)ch << "")\n"";
  }
}
int main() {
  int N = 36;
  convertToASCII(N);
  return 0;
}",Program to print ASCII Value of all digits of a given number.
616,A Product Array Puzzle | Set 3 | C ++ program for the above approach ; Function to form product array with O ( n ) time and O ( 1 ) space ; Stores the product of array ; Stores the count of zeros ; Traverse the array ; If arr [ i ] is not zero ; If arr [ i ] is zero then increment count of z by 1 ; Stores the absolute value of the product ; If Z is equal to 1 ; If arr [ i ] is not zero ; Else ; If count of 0 s at least 2 ; Assign arr [ i ] = 0 ; Store absolute value of arr [ i ] ; Find the value of a / b ; If arr [ i ] and product both are less than zero ; If arr [ i ] and product both are greater than zero ; Else ; Traverse the array arr [ ] ; Driver Code ; Function Call,"#include <bits/stdc++.h>
using namespace std;
void productExceptSelf(int arr[], int N) {
  int product = 1;
  int z = 0;
  for (int i = 0; i < N; i++) {
    if (arr[i])
      product *= arr[i];
    z += (arr[i] == 0);
  }
  int a = abs(product), b;
  for (int i = 0; i < N; i++) {
    if (z == 1) {
      if (arr[i])
        arr[i] = 0;
      else
        arr[i] = product;
      continue;
    } else if (z > 1) {
      arr[i] = 0;
      continue;
    }
    int b = abs(arr[i]);
    int curr = round(exp(log(a) - log(b)));
    if (arr[i] < 0 && product < 0)
      arr[i] = curr;
    else if (arr[i] > 0 && product > 0)
      arr[i] = curr;
    else
      arr[i] = -1 * curr;
  }
  for (int i = 0; i < N; i++) {
    cout << arr[i] << "" "";
  }
}
int main() {
  int arr[] = {10, 3, 5, 6, 2};
  int N = sizeof(arr) / sizeof(arr[0]);
  productExceptSelf(arr, N);
  return 0;
}",A Product Array Puzzle.
617,Count subarrays made up of single | C ++ program for the above approach ; Function to count of subarrays made up of single digit integers only ; Stores count of subarrays ; Stores the count of consecutive single digit numbers in the array ; Traverse the array ; Increment size of block by 1 ; Increment res by count ; Assign count = 0 ; Driver Code ; Given array ; Size of the array,"#include <bits/stdc++.h>
using namespace std;
int singleDigitSubarrayCount(int arr[], int N) {
  int res = 0;
  int count = 0;
  for (int i = 0; i < N; i++) {
    if (arr[i] <= 9) {
      count++;
      res += count;
    } else {
      count = 0;
    }
  }
  cout << res;
}
int main() {
  int arr[] = {0, 1, 14, 2, 5};
  int N = sizeof(arr) / sizeof(arr[0]);
  singleDigitSubarrayCount(arr, N);
  return 0;
}",Count subarrays made up of single.
618,"Count integers up to N which can be represented as sum of two or more consecutive numbers | C ++ Program to implement the above approach ; Function to check if the number N can be expressed as sum of 2 or more consecutive numbers or not ; Function to count integers in the range [ 1 , N ] that can be expressed as sum of 2 or more consecutive numbers ; Stores the required count ; Driver Code","#include <bits/stdc++.h>
using namespace std;
bool isPossible(int N) { return ((N & (N - 1)) && N); }
void countElements(int N) {
  int count = 0;
  for (int i = 1; i <= N; i++) {
    if (isPossible(i))
      count++;
  }
  cout << count;
}
int main() {
  int N = 15;
  countElements(N);
  return 0;
}",Count integers up to N which can be represented as sum of two or more consecutive numbers.
619,"Count integers up to N which can be represented as sum of two or more consecutive numbers | C ++ implementation of the above approach ; Function to count integers in the range [ 1 , N ] that can be expressed as sum of 2 or more consecutive numbers ; Count powers of 2 up to N ; Increment count ; Update current power of 2 ; Driver Code","#include <bits/stdc++.h>
using namespace std;
void countElements(int N) {
  int Cur_Ele = 1;
  int Count = 0;
  while (Cur_Ele <= N) {
    Count++;
    Cur_Ele = Cur_Ele * 2;
  }
  cout << N - Count;
}
int main() {
  int N = 15;
  countElements(N);
  return 0;
}",Count integers up to N which can be represented as sum of two or more consecutive numbers.
620,Maximum difference between a pair of adjacent elements by excluding every element once | C ++ program for the above approach ; Function to calculate maximum difference between adjacent elements excluding every array element once ; Compute maximum adjacent difference for whole array ; Store the maximum between arr_max and curr_max ; Append the result into a vector ; Print the result ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
void maxAdjacent(int *arr, int N) {
  vector<int> res;
  int arr_max = INT_MIN;
  for (int i = 1; i < N; i++) {
    arr_max = max(arr_max, abs(arr[i - 1] - arr[i]));
  }
  for (int i = 1; i < N - 1; i++) {
    int curr_max = abs(arr[i - 1] - arr[i + 1]);
    int ans = max(curr_max, arr_max);
    res.push_back(ans);
  }
  for (auto x : res)
    cout << x << "" "";
  cout << endl;
}
int main() {
  int arr[] = {1, 3, 4, 7, 8};
  int N = sizeof(arr) / sizeof(arr[0]);
  maxAdjacent(arr, N);
}",Maximum difference between a pair of adjacent elements by excluding every element once.
621,Minimize increments required to make count of even and odd array elements equal | C ++ program for the above approach ; Function to find min operations to make even and odd count equal ; Odd size will never make odd and even counts equal ; Stores the count of even numbers in the array arr [ ] ; Stores count of odd numbers in the array arr [ ] ; Traverse the array arr [ ] ; If arr [ i ] is an even number ; Update cntEven ; Odd numbers in arr [ ] ; Return absolute difference divided by 2 ; Driver Code ; Function call,"#include <bits/stdc++.h>
using namespace std;
int minimumIncrement(int arr[], int N) {
  if (N % 2 != 0) {
    cout << ""-1"";
    exit(0);
  }
  int cntEven = 0;
  int cntOdd = 0;
  for (int i = 0; i < N; i++) {
    if (arr[i] % 2 == 0) {
      cntEven += 1;
    }
  }
  cntOdd = N - cntEven;
  return abs(cntEven - cntOdd) / 2;
}
int main() {
  int arr[] = {1, 3, 4, 9};
  int N = sizeof(arr) / sizeof(arr[0]);
  cout << minimumIncrement(arr, N);
  return 0;
}",Minimize increments required to make count of even and odd array elements equal.
622,"Count ways to construct array with even product from given array such that absolute difference of same indexed elements is at most 1 | C ++ program to implement the above approach ; Function to find count the ways to construct an array , B [ ] such that abs ( A [ i ] - B [ i ] ) <= 1 and product of elements of B [ ] is even ; Stores count of arrays B [ ] such that abs ( A [ i ] - B [ i ] ) <= 1 ; Stores count of arrays B [ ] whose product of elements is not even ; Traverse the array ; Update total ; If A [ i ] is an even number ; Update oddArray ; Print 3 ^ N - 2 ^ X ; Driver Code","#include <bits/stdc++.h>
using namespace std;
void cntWaysConsArray(int A[], int N) {
  int total = 1;
  int oddArray = 1;
  for (int i = 0; i < N; i++) {
    total = total * 3;
    if (A[i] % 2 == 0) {
      oddArray *= 2;
    }
  }
  cout << total - oddArray << ""\n"";
}
int main() {
  int A[] = {2, 4};
  int N = sizeof(A) / sizeof(A[0]);
  cntWaysConsArray(A, N);
  return 0;
}",Count ways to construct array with even product from given array such that absolute difference of same indexed elements is at most 1.
623,"Count numbers up to N whose rightmost set bit is K | C ++ program for the above approach ; Function to count the numbers in the range [ 1 , N ] whose rightmost set bit is K ; Stores the number whose rightmost set bit is K ; Numbers whose rightmost set bit is i ; Subtracting the number whose rightmost set bit is i , from N ; Since i = k , then the number whose rightmost set bit is K is stored ; Driver Code","#include <bits/stdc++.h>
using namespace std;
int countNumberHavingKthBitSet(int N, int K) {
  int numbers_rightmost_setbit_K;
  for (int i = 1; i <= K; i++) {
    int numbers_rightmost_bit_i = (N + 1) / 2;
    N -= numbers_rightmost_bit_i;
    if (i == K) {
      numbers_rightmost_setbit_K = numbers_rightmost_bit_i;
    }
  }
  cout << numbers_rightmost_setbit_K;
}
int main() {
  int N = 15;
  int K = 2;
  countNumberHavingKthBitSet(N, K);
  return 0;
}",Count numbers up to N whose rightmost set bit is K.
624,Count odd and even Binomial Coefficients of N | C ++ program for the above approach ; Function to count set bits in binary representation of number N ; Count set bits in N ; Return the final count ; Driver Code ; Print odd Binomial coefficients ; Print even Binomial coefficients,"#include <iostream>
#include <math.h>
using namespace std;
int countSetBits(int N) {
  int count = 0;
  while (N) {
    N = N & (N - 1);
    count++;
  }
  return count;
}
int main() {
  int N = 4;
  int bits = countSetBits(N);
  cout << ""Odd ""
       << "": "" << pow(2, bits) << ""\n"";
  cout << ""Even ""
       << "": "" << N + 1 - pow(2, bits) << ""\n"";
  return 0;
}",Count odd and even Binomial Coefficients of N.
625,Make all array elements even by replacing any pair of array elements with their sum | C ++ program for the above approach ; Function to find the minimum number of replacements required to make all array elements even ; Stores the count of odd elements ; Traverse the array ; Increase count of odd elements ; Store number of replacements required ; Two extra moves will be required to make the last odd element even ; Print the minimum replacements ; Driver Code ; Function call,"#include <bits/stdc++.h>
using namespace std;
void minMoves(int arr[], int N) {
  int odd_element_cnt = 0;
  for (int i = 0; i < N; i++) {
    if (arr[i] % 2 != 0) {
      odd_element_cnt++;
    }
  }
  int moves = (odd_element_cnt) / 2;
  if (odd_element_cnt % 2 != 0)
    moves += 2;
  cout << moves;
}
int main() {
  int arr[] = {5, 6, 3, 7, 20};
  int N = sizeof(arr) / sizeof(arr[0]);
  minMoves(arr, N);
  return 0;
}",Make all array elements even by replacing any pair of array elements with their sum.
626,Split squares of first N natural numbers into two sets with minimum absolute difference of their sums | C ++ program for the above approach ; Function to partition squares of N natural number in two subset ; Store the count of blocks of size 8 ; Partition of block of 8 element ; Store the minimum subset difference ; Partition of N elements to minimize their subset sum difference ; Store elements of subset A and B ; If element is of type A ; If the element is of type B ; Print the minimum subset difference ; Print the first subset ; Print the second subset ; Driver Code ; Function Call,"#include <bits/stdc++.h>
using namespace std;
void minimumSubsetDifference(int N) {
  int blockOfSize8 = N / 8;
  string str = ""ABBABAAB"";
  int subsetDifference = 0;
  string partition = """";
  while (blockOfSize8--) {
    partition += str;
  }
  vector<int> A, B;
  for (int i = 0; i < N; i++) {
    if (partition[i] == 'A') {
      A.push_back((i + 1) * (i + 1));
    } else {
      B.push_back((i + 1) * (i + 1));
    }
  }
  cout << subsetDifference << ""\n"";
  for (int i = 0; i < A.size(); i++)
    cout << A[i] << "" "";
  cout << ""\n"";
  for (int i = 0; i < B.size(); i++)
    cout << B[i] << "" "";
}
int main() {
  int N = 8;
  minimumSubsetDifference(N);
  return 0;
}",Split squares of first N natural numbers into two sets with minimum absolute difference of their sums.
627,Largest divisor of a number not divisible by another given number | C ++ program to implement the above approach ; Function to find the largest number X such that it divides P but is not divisible by Q ; Stores the frequency count of of all Prime Factors ; Increment the frequency of the current prime factor ; If Q is a prime factor ; Stores the desired result ; Iterate through all divisors of Q ; Stores the frequency count of current prime divisor on dividing P ; Count the frequency of the current prime factor ; If cur is less than frequency then P is the final result ; Iterate to get temporary answer ; Update current answer ; Print the desired result ; Driver Code ; Given P and Q ; Function Call,"#include <bits/stdc++.h>
using namespace std;
void findTheGreatestX(int P, int Q) {
  map<int, int> divisiors;
  for (int i = 2; i * i <= Q; i++) {
    while (Q % i == 0 and Q > 1) {
      Q /= i;
      divisiors[i]++;
    }
  }
  if (Q > 1)
    divisiors[Q]++;
  int ans = 0;
  for (auto i : divisiors) {
    int frequency = i.second;
    int temp = P;
    int cur = 0;
    while (temp % i.first == 0) {
      temp /= i.first;
      cur++;
    }
    if (cur < frequency) {
      ans = P;
      break;
    }
    temp = P;
    for (int j = cur; j >= frequency; j--) {
      temp /= i.first;
    }
    ans = max(temp, ans);
  }
  cout << ans;
}
int main() {
  int P = 10, Q = 4;
  findTheGreatestX(P, Q);
  return 0;
}",Largest divisor of a number not divisible by another given number.
628,Check if rows of a Matrix can be rearranged to make Bitwise XOR of first column non | C ++ program for the above approach ; Function to check if there is any row where number of unique elements are greater than 1 ; Iterate over the matrix ; Function to check if it is possible to rearrange mat [ ] [ ] such that XOR of its first column is non - zero ; Find bitwise XOR of the first column of mat [ ] [ ] ; If bitwise XOR of the first column of mat [ ] [ ] is non - zero ; Otherwise check rearrangements ; Driver Code ; Given Matrix mat [ ] [ ] ; Function Call,"#include <bits/stdc++.h>
using namespace std;
string checkRearrangements(vector<vector<int>> mat, int N, int M) {
  for (int i = 0; i < N; i++) {
    for (int j = 1; j < M; j++) {
      if (mat[i][0] != mat[i][j]) {
        return ""Yes"";
      }
    }
  }
  return ""No"";
}
string nonZeroXor(vector<vector<int>> mat, int N, int M) {
  int res = 0;
  for (int i = 0; i < N; i++) {
    res = res ^ mat[i][0];
  }
  if (res != 0)
    return ""Yes"";
  else
    return checkRearrangements(mat, N, M);
}
int main() {
  vector<vector<int>> mat = {{1, 1, 2}, {2, 2, 2}, {3, 3, 3}};
  int N = mat.size();
  int M = mat[0].size();
  cout << nonZeroXor(mat, N, M);
  return 0;
}",Check if rows of a Matrix can be rearranged to make Bitwise XOR of first column non.
629,Maximize Bitwise AND of first element with complement of remaining elements for any permutation of given Array | C ++ Program to implement the above approach ; Function to maximize the value for the given function and the array elements ; Vector array to maintain which bit is set for which integer in the given array by saving index of that integer ; Check if j - th bit is set for i - th integer ; Push the index of that integer in setBit [ j ] ; Find the element having highest significant set bit unset in other elements ; Place that integer at 0 - th index ; Store the maximum AND value ; Return the answer ; Driver Code ; Function call,"#include <bits/stdc++.h>
using namespace std;
#definesize_int32 int functionMax(int arr[], int n) {
  vector<int> setBit[32];
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < size_int; j++) {
      if (arr[i] & (1 << j))
        setBit[j].push_back(i);
    }
  }
  for (int i = size_int; i >= 0; i--) {
    if (setBit[i].size() == 1) {
      swap(arr[0], arr[setBit[i][0]]);
      break;
    }
  }
  int maxAnd = arr[0];
  for (int i = 1; i < n; i++) {
    maxAnd = maxAnd & (~arr[i]);
  }
  return maxAnd;
}
int main() {
  int arr[] = {1, 2, 4, 8, 16};
  int n = sizeof arr / sizeof arr[0];
  cout << functionMax(arr, n);
  return 0;
}",Maximize Bitwise AND of first element with complement of remaining elements for any permutation of given Array.
630,"Sum of all products of the Binomial Coefficients of two numbers up to K | C ++ implementation of the above approach ; Function returns nCr i . e . Binomial Coefficient ; Initialize res with 1 ; Since C ( n , r ) = C ( n , n - r ) ; Evaluating expression ; Function to calculate and return the sum of the products ; Initialize sum to 0 ; Traverse from 0 to k ; Driver Code","#include <bits/stdc++.h>
using namespace std;
int nCr(int n, int r) {
  int res = 1;
  if (r > n - r)
    r = n - r;
  for (int i = 0; i < r; ++i) {
    res *= (n - i);
    res /= (i + 1);
  }
  return res;
}
int solve(int n, int m, int k) {
  int sum = 0;
  for (int i = 0; i <= k; i++)
    sum += nCr(n, i) * nCr(m, k - i);
  return sum;
}
int main() {
  int n = 3, m = 2, k = 2;
  cout << solve(n, m, k);
  return 0;
}",Sum of all products of the Binomial Coefficients of two numbers up to K.
631,Fast Exponention using Bit Manipulation | C ++ Program to implement the above approach ; Function to return a ^ n ; Stores final answer ; Check if current LSB is set ; Right shift ; Driver Code,"#include <iostream>
using namespace std;
int powerOptimised(int a, int n) {
  int ans = 1;
  while (n > 0) {
    int last_bit = (n & 1);
    if (last_bit) {
      ans = ans * a;
    }
    a = a * a;
    n = n >> 1;
  }
  return ans;
}
int main() {
  int a = 3, n = 5;
  cout << powerOptimised(a, n);
  return 0;
}",Fast Exponention using Bit Manipulation.
632,"Find M such that GCD of M and given number N is maximum | C ++ program for the above approach ; Function to find the integer M such that gcd ( N , M ) is maximum ; Initialize a variable ; Find all the divisors of N and return the maximum divisor ; Check if i is divisible by N ; Update max_gcd ; Return the maximum value ; Driver Code ; Given Number ; Function Call","#include <bits/stdc++.h>
using namespace std;
int findMaximumGcd(int n) {
  int max_gcd = 1;
  for (int i = 1; i * i <= n; i++) {
    if (n % i == 0) {
      if (i > max_gcd)
        max_gcd = i;
      if ((n / i != i) && (n / i != n) && ((n / i) > max_gcd))
        max_gcd = n / i;
    }
  }
  return max_gcd;
}
int main() {
  int N = 10;
  cout << findMaximumGcd(N);
  return 0;
}",Find M such that GCD of M and given number N is maximum.
633,First element of every K sets having consecutive elements with exactly K prime factors less than N | C ++ program for the above approach ; For storing smallest prime factor ; Function construct smallest prime factor array ; Mark smallest prime factor for every number to be itself . ; separately mark spf for every even number as 2 ; Check if i is prime ; Mark SPF for all numbers divisible by i ; Mark spf [ j ] if it is not previously marked ; Function for counts total number of prime factors ; Function to print elements of sets of K consecutive elements having K prime factors ; To store the result ; Count number of prime factors of number ; If number has exactly K factors push in result [ ] ; Iterate till we get K consecutive elements in result [ ] ; Count sequence until K ; Print the element if count >= K ; Driver Code ; To construct spf [ ] ; Given N and K ; Function Call,"#include <bits/stdc++.h>
#definex2000021
using namespace std;
long long int v[x];
void sieve() {
  v[1] = 1;
  for (long long int i = 2; i < x; i++)
    v[i] = i;
  for (long long int i = 4; i < x; i += 2)
    v[i] = 2;
  for (long long int i = 3; i * i < x; i++) {
    if (v[i] == i) {
      for (long long int j = i * i; j < x; j += i) {
        if (v[j] == j) {
          v[j] = i;
        }
      }
    }
  }
}
long long int prime_factors(long long n) {
  set<long long int> s;
  while (n != 1) {
    s.insert(v[n]);
    n = n / v[n];
  }
  return s.size();
}
void distinctPrimes(long long int m, long long int k) {
  vector<long long int> result;
  for (long long int i = 14; i < m + k; i++) {
    long long count = prime_factors(i);
    if (count == k) {
      result.push_back(i);
    }
  }
  long long int p = result.size();
  for (long long int index = 0; index < p - 1; index++) {
    long long element = result[index];
    long long count = 1, z = index;
    while (z < p - 1 && count <= k && result[z] + 1 == result[z + 1]) {
      count++;
      z++;
    }
    if (count >= k)
      cout << element << ' ';
  }
}
int main() {
  sieve();
  long long int N = 1000, K = 3;
  distinctPrimes(N, K);
  return 0;
}",First element of every K sets having consecutive elements with exactly K prime factors less than N.
634,"Product of Complex Numbers using three Multiplication Operation | C ++ program for the above approach ; Function to multiply Complex Numbers with just three multiplications ; Find value of prod1 , prod2 and prod3 ; Real Part ; Imaginary Part ; Print the result ; Driver Code ; Given four Numbers ; Function Call","#include <bits/stdc++.h>
using namespace std;
void print_product(int a, int b, int c, int d) {
  int prod1 = a * c;
  int prod2 = b * d;
  int prod3 = (a + b) * (c + d);
  int real = prod1 - prod2;
  int imag = prod3 - (prod1 + prod2);
  cout << real << "" + "" << imag << ""i"";
}
int main() {
  int a, b, c, d;
  a = 2;
  b = 3;
  c = 4;
  d = 5;
  print_product(a, b, c, d);
  return 0;
}",Product of Complex Numbers using three Multiplication Operation.
635,Insolite Numbers | C ++ implementation for the above approach ; Function to check if a number is an Insolite numbers ; To store sum of squares of digits ; To store product of squares of digits ; extracting digit ; Driver Code ; Function Call,"#include <bits/stdc++.h>
using namespace std;
bool isInsolite(int n) {
  int N = n;
  int sum = 0;
  int product = 1;
  while (n != 0) {
    int r = n % 10;
    sum = sum + r * r;
    product = product * r * r;
    n = n / 10;
  }
  return (N % sum == 0) && (N % product == 0);
}
int main() {
  int N = 111;
  if (isInsolite(N))
    cout << ""Yes"";
  else
    cout << ""No"";
  return 0;
}",Insolite Numbers.
636,Superabundant Numbers | C ++ implementation to check if a number is Superabundant ; Function to calculate the sum of all divisors of a given number ; Sum of divisors ; find all divisors which divides ' num ' ; if ' i ' is divisor of ' n ' ; if both divisors are same then add it once else add both ; Add 1 and n to result as above loop considers proper divisors greater than 1. ; Function to check if N is a superabundant number ; to check all numbers from 1 to N ; Driver code,"#include <bits/stdc++.h>
using namespace std;
int sigma(int n) {
  if (n == 1)
    return 1;
  int result = 0;
  for (int i = 2; i <= sqrt(n); i++) {
    if (n % i == 0) {
      if (i == (n / i))
        result += i;
      else
        result += (i + n / i);
    }
  }
  return (result + n + 1);
}
bool isSuperabundant(int N) {
  for (float i = 1; i < N; i++) {
    float x = sigma(i) / i;
    float y = sigma(N) / (N * 1.0);
    if (x > y)
      return false;
  }
  return true;
}
int main() {
  int N = 4;
  isSuperabundant(N) ? cout << ""Yes"" : cout << ""No"";
  return 0;
}",Superabundant Numbers.
637,D Numbers | C ++ implementation for the above approach ; Function to find the N - th icosikaipentagon number ; number should be greater than 3 ; Check every k in range 2 to n - 1 ; condition for D - Number ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
int isDNum(int n) {
  if (n < 4)
    return false;
  int numerator, hcf;
  for (int k = 2; k <= n; k++) {
    numerator = pow(k, n - 2) - k;
    hcf = __gcd(n, k);
  }
  if (hcf == 1 && (numerator % n) != 0)
    return false;
  return true;
}
int main() {
  int n = 15;
  int a = isDNum(n);
  if (a)
    cout << ""Yes"";
  else
    cout << ""No"";
}",D Numbers.
638,Ruth | C ++ implementation of the above approach ; Function to find prime divisors of all numbers from 1 to N ; if the number is prime ; add this prime to all it 's multiples ; Function to check Ruth - Aaron number ; Driver code,"#include <bits/stdc++.h>
using namespace std;
int Sum(int N) {
  int SumOfPrimeDivisors[N + 1] = {0};
  for (int i = 2; i <= N; ++i) {
    if (!SumOfPrimeDivisors[i]) {
      for (int j = i; j <= N; j += i) {
        SumOfPrimeDivisors[j] += i;
      }
    }
  }
  return SumOfPrimeDivisors[N];
}
bool RuthAaronNumber(int n) {
  if (Sum(n) == Sum(n + 1))
    return true;
  else
    return false;
}
int main() {
  int N = 714;
  if (RuthAaronNumber(N)) {
    cout << ""Yes"";
  } else {
    cout << ""No"";
  }
  return 0;
}",Ruth.
639,Maximize sum of absolute difference between adjacent elements in Array with sum K | C ++ program to maximize the sum of absolute differences between adjacent elements ; Function for maximizing the sum ; Difference is 0 when only one element is present in array ; Difference is K when two elements are present in array ; Otherwise ; Driver code,"#include <bits/stdc++.h>
using namespace std;
int maxAdjacentDifference(int N, int K) {
  if (N == 1) {
    return 0;
  }
  if (N == 2) {
    return K;
  }
  return 2 * K;
}
int main() {
  int N = 6;
  int K = 11;
  cout << maxAdjacentDifference(N, K);
  return 0;
}",Maximize sum of absolute difference between adjacent elements in Array with sum K.
640,Sum of all divisors from 1 to N | Set 2 | C ++ program for the above approach ; Functions returns sum of numbers from 1 to n ; Functions returns sum of numbers from a + 1 to b ; Function returns total sum of divisors ; Stores total sum ; Finding numbers and its occurence ; Sum of product of each number and its occurence ; Driver code,"#include <bits/stdc++.h>
using namespace std;
int mod = 1000000007;
int linearSum(int n) { return (n * (n + 1) / 2) % mod; }
int rangeSum(int b, int a) { return (linearSum(b) - linearSum(a)) % mod; }
int totalSum(int n) {
  int result = 0;
  int i = 1;
  while (true) {
    result += rangeSum(n / i, n / (i + 1)) * (i % mod) % mod;
    result %= mod;
    if (i == n)
      break;
    i = n / (n / (i + 1));
  }
  return result;
}
int main() {
  int N = 4;
  cout << totalSum(N) << endl;
  N = 12;
  cout << totalSum(N) << endl;
  return 0;
}",Sum of all divisors from 1 to N.
641,Nontrivial undulant Numbers | C ++ implementation to check if N is a Nontrivial undulant number ; Function to check if a string is double string or not ; a and b should not be equal ; Condition to check if length is odd make length even ; first half of s ; second half of s ; Double string if first and last half are equal ; Function to check if N is an Nontrivial undulant number ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
bool isDouble(int num) {
  string s = to_string(num);
  int l = s.length();
  if (s[0] == s[1])
    return false;
  if (l % 2 == 1) {
    s = s + s[1];
    l++;
  }
  string s1 = s.substr(0, l / 2);
  string s2 = s.substr(l / 2);
  return s1 == s2;
}
bool isNontrivialUndulant(int N) { return N > 100 && isDouble(N); }
int main() {
  int n = 121;
  if (isNontrivialUndulant(n))
    cout << ""Yes"";
  else
    cout << ""No"";
  return 0;
}",Nontrivial undulant Numbers.
642,Megagon number | C ++ implementation for the above approach ; Function to find the nth Megagon Number ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
int MegagonNum(int n) { return (999998 * n * n - 999996 * n) / 2; }
int main() {
  int n = 3;
  cout << MegagonNum(n);
  return 0;
}",Megagon number.
643,Product of all the pairs from the given array | C ++ implementation to find the product of all the pairs from the given array ; Function to return the product of the elements of all possible pairs from the array ; To store the required product ; Nested loop to calculate all possible pairs ; Multiply the product of the elements of the current pair ; Return the final result ; Driver code,"#include <bits/stdc++.h>
using namespace std;
#definemod1000000007 int productPairs(int arr[], int n) {
  int product = 1;
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < n; j++) {
      product *= (arr[i] % mod * arr[j] % mod) % mod;
      product = product % mod;
    }
  }
  return product % mod;
}
int main() {
  int arr[] = {1, 2, 3};
  int n = sizeof(arr) / sizeof(arr[0]);
  cout << productPairs(arr, n);
  return 0;
}",Product of all the pairs from the given array.
644,"Product of all the pairs from the given array | C ++ implementation to Find the product of all the pairs from the given array ; Function to calculate ( x ^ y ) % 1000000007 ; Initialize result ; Update x if it is more than or equal to p ; If y is odd , multiply x with result ; Return the final result ; Function to return the product of the elements of all possible pairs from the array ; To store the required product ; Iterate for every element of the array ; Each element appears ( 2 * n ) times ; Driver code","#include <bits/stdc++.h>
using namespace std;
#definemod1000000007
#definelllonglongint
    int
    power(int x, unsigned int y) {
  int p = 1000000007;
  int res = 1;
  x = x % p;
  while (y > 0) {
    if (y & 1)
      res = (res * x) % p;
    y = y >> 1;
    x = (x * x) % p;
  }
  return res;
}
ll productPairs(ll arr[], ll n) {
  ll product = 1;
  for (int i = 0; i < n; i++) {
    product = (product % mod * (int)power(arr[i], (2 * n)) % mod) % mod;
  }
  return product % mod;
}
int main() {
  ll arr[] = {1, 2, 3};
  ll n = sizeof(arr) / sizeof(arr[0]);
  cout << productPairs(arr, n);
  return 0;
}",Product of all the pairs from the given array.
645,Construct an Array such that cube sum of all element is a perfect square | C ++ program to construct an array that cube sum of all element is a perfect square ; Function to create and print the array ; initialise the array of size N ; Print the array ; Driver code,"#include <bits/stdc++.h>
using namespace std;
void constructArray(int N) {
  int arr[N];
  for (int i = 1; i <= N; i++) {
    arr[i - 1] = i;
  }
  for (int i = 0; i < N; i++) {
    cout << arr[i] << "", "";
  }
}
int main() {
  int N = 6;
  constructArray(N);
  return 0;
}",Construct an Array such that cube sum of all element is a perfect square.
646,Count of all subsequence whose product is a Composite number | C ++ implementation to count all subsequence whose product is Composite number ; Function to check whether a number is prime or not ; Function to find number of subsequences whose product is a composite number ; Find total non empty subsequence ; Find count of prime number and ones ; Calculate the non empty one subsequence ; Find count of composite subsequence ; Driver code,"#include <bits/stdc++.h>
using namespace std;
bool isPrime(int n) {
  if (n <= 1)
    return false;
  for (int i = 2; i < n; i++)
    if (n % i == 0)
      return false;
  return true;
}
int countSubsequences(int arr[], int n) {
  int totalSubsequence = pow(2, n) - 1;
  int countPrime = 0, countOnes = 0;
  for (int i = 0; i < n; i++) {
    if (arr[i] == 1)
      countOnes++;
    else if (isPrime(arr[i]))
      countPrime++;
  }
  int compositeSubsequence;
  int onesSequence = pow(2, countOnes) - 1;
  compositeSubsequence =
      totalSubsequence - countPrime - onesSequence - onesSequence * countPrime;
  return compositeSubsequence;
}
int main() {
  int arr[] = {2, 1, 2};
  int n = sizeof(arr) / sizeof(arr[0]);
  cout << countSubsequences(arr, n);
  return 0;
}",Count of all subsequence whose product is a Composite number.
647,Find K consecutive integers such that their sum is N | C ++ implementation to check if a number can be expressed as sum of K consecutive integer ; Function to check if a number can be expressed as the sum of k consecutive ; Finding the first term of AP ; Checking if first term is an integer ; Loop to print the K consecutive integers ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
void checksum(int n, int k) {
  float first_term = ((2 * n) / k + (1 - k)) / 2.0;
  if (first_term - int(first_term) == 0) {
    for (int i = first_term; i <= first_term + k - 1; i++) {
      cout << i << "" "";
    }
  } else
    cout << ""-1"";
}
int main() {
  int n = 33, k = 6;
  checksum(n, k);
  return 0;
}",Find K consecutive integers such that their sum is N.
648,Represent N as sum of K even numbers | C ++ implementation to represent N as sum of K even numbers ; Function to print the representation ; N must be greater than equal to 2 * K and must be even ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
void sumEvenNumbers(int N, int K) {
  int check = N - 2 * (K - 1);
  if (check > 0 && check % 2 == 0) {
    for (int i = 0; i < K - 1; i++) {
      cout << ""2 "";
    }
    cout << check;
  } else {
    cout << ""-1"";
  }
}
int main() {
  int N = 8;
  int K = 2;
  sumEvenNumbers(N, K);
  return 0;
}",Represent N as sum of K even numbers.
649,Count of contiguous subarrays possible for every index by including the element at that index | C ++ program to find the number of contiguous subarrays including the element at every index of the array of size N ; Function to find the number of subarrays including the element at every index of the array ; Creating an array of size N ; The loop is iterated till half the length of the array ; Condition to avoid overwriting the middle element for the array with even length . ; Computing the number of subarrays ; The ith element from the beginning and the ending have the same number of possible subarrays ; Function to print the vector ; Driver code,"#include <bits/stdc++.h>
using namespace std;
vector<int> calculateWays(int N) {
  int x = 0;
  vector<int> v;
  for (int i = 0; i < N; i++)
    v.push_back(0);
  for (int i = 0; i <= N / 2; i++) {
    if (N % 2 == 0 && i == N / 2)
      break;
    x = N * (i + 1) - (i + 1) * i;
    v[i] = x;
    v[N - i - 1] = x;
  }
  return v;
}
void printArray(vector<int> v) {
  for (int i = 0; i < v.size(); i++)
    cout << v[i] << "" "";
}
int main() {
  vector<int> v;
  v = calculateWays(4);
  printArray(v);
  return 0;
}",Count of contiguous subarrays possible for every index by including the element at that index.
650,Smallest number greater than or equal to X whose sum of digits is divisible by Y | C ++ program to find the smallest number greater than or equal to X and divisible by Y ; Function that returns the sum of digits of a number ; Initialize variable to store the sum ; Add the last digit of the number ; Remove the last digit from the number ; Function that returns the smallest number greater than or equal to X and divisible by Y ; Initialize result variable ; Loop through numbers greater than equal to X ; Calculate sum of digits ; Check if sum of digits is divisible by Y ; Driver code,"#include <bits/stdc++.h>
using namespace std;
#defineMAXN10000000 int sumOfDigits(int n) {
  int sum = 0;
  while (n > 0) {
    sum += n % 10;
    n /= 10;
  }
  return sum;
}
int smallestNum(int X, int Y) {
  int res = -1;
  for (int i = X; i < MAXN; i++) {
    int sum_of_digit = sumOfDigits(i);
    if (sum_of_digit % Y == 0) {
      res = i;
      break;
    }
  }
  return res;
}
int main() {
  int X = 5923, Y = 13;
  cout << smallestNum(X, Y);
  return 0;
}",Smallest number greater than or equal to X whose sum of digits is divisible by Y.
651,Count the numbers which can convert N to 1 using given operation | C ++ program to count the numbers which can convert N to 1 using the given operation ; Function to count the numbers which can convert N to 1 using the given operation ; Store all the divisors of N ; If i is a divisor ; If i is not equal to N / i ; Iterate through all the divisors of N - 1 and count them in answer ; Check if N - 1 is a divisor or not ; Iterate through all divisors and check for N mod d = 1 or ( N - 1 ) mod d = 0 ; Driver code,"#include <bits/stdc++.h>
using namespace std;
int countValues(int N) {
  vector<int> div;
  for (int i = 2; i * i <= N; i++) {
    if (N % i == 0) {
      div.push_back(i);
      if (N != i * i) {
        div.push_back(N / i);
      }
    }
  }
  int answer = 0;
  for (int i = 1; i * i <= N - 1; i++) {
    if ((N - 1) % i == 0) {
      if (i * i == N - 1)
        answer++;
      else
        answer += 2;
    }
  }
  for (auto d : div) {
    int K = N;
    while (K % d == 0)
      K /= d;
    if ((K - 1) % d == 0)
      answer++;
  }
  return answer;
}
int main() {
  int N = 6;
  cout << countValues(N);
  return 0;
}",Count the numbers which can convert N to 1 using given operation.
652,Maximum possible prime divisors that can exist in numbers having exactly N divisors | C ++ implementation to find the maximum possible prime divisor of a number can have N divisors ; Function to find the maximum possible prime divisors of a number can have with N divisors ; Number of time number divided by 2 ; Divide by other prime numbers ; If the last number of also prime then also include it ; Driver Code ; Function Call,"#include <iostream>
using namespace std;
#definelllonglongint void findMaxPrimeDivisor(int n) {
  int max_possible_prime = 0;
  while (n % 2 == 0) {
    max_possible_prime++;
    n = n / 2;
  }
  for (int i = 3; i * i <= n; i = i + 2) {
    while (n % i == 0) {
      max_possible_prime++;
      n = n / i;
    }
  }
  if (n > 2) {
    max_possible_prime++;
  }
  cout << max_possible_prime << ""\n"";
}
int main() {
  int n = 4;
  findMaxPrimeDivisor(n);
  return 0;
}",Maximum possible prime divisors that can exist in numbers having exactly N divisors.
653,Count ways to express a number as sum of exactly two numbers | C ++ program to Count ways to express a number as sum of two numbers . ; Function returns the count of ways express a number as sum of two numbers . ; Driver code,"#include <bits/stdc++.h>
using namespace std;
int CountWays(int n) {
  int ans = (n - 1) / 2;
  return ans;
}
int main() {
  int N = 8;
  cout << CountWays(N);
}",Count ways to express a number as sum of exactly two numbers.
654,Divide array in two maximum equal length arrays of similar and dissimilar elements | C ++ program to find the max - size to which an array can be divided into 2 equal parts such that one part contains unique elements while another contains similar elements ; Function to find the max - size to which an array can be divided into 2 equal parts ; Vector to find the frequency of each element of array ; Find the maximum frequency element present in array arr [ ] ; Find total unique elements present in array arr [ ] ; Find the Max - Size to which an array arr [ ] can be splitted ; Find the first array containing same elements ; Find the second array containing unique elements ; Driver code ; initialise n ; array declaration ; size of array,"#include <bits/stdc++.h>
using namespace std;
void Solve(int arr[], int size, int n) {
  vector<int> v(n + 1);
  for (int i = 0; i < size; i++)
    v[arr[i]]++;
  int max1 = (max_element(v.begin(), v.end()) - v.begin());
  int diff1 = n + 1 - count(v.begin(), v.end(), 0);
  int max_size = max(min(v[max1] - 1, diff1), min(v[max1], diff1 - 1));
  cout << ""Maximum size is :"" << max_size << ""\n"";
  cout << ""The First Array Is : \n"";
  for (int i = 0; i < max_size; i++) {
    cout << max1 << "" "";
    v[max1] -= 1;
  }
  cout << ""\n"";
  cout << ""The Second Array Is : \n"";
  for (int i = 0; i < (n + 1); i++) {
    if (v[i] > 0) {
      cout << i << "" "";
      max_size--;
    }
    if (max_size < 1)
      break;
  }
  cout << ""\n"";
}
int main() {
  int n = 7;
  int arr[] = {1, 2, 1, 5, 1, 6, 7, 2};
  int size = sizeof(arr) / sizeof(arr[0]);
  Solve(arr, size, n);
  return 0;
}",Divide array in two maximum equal length arrays of similar and dissimilar elements.
655,"Find sum of xor of all unordered triplets of the array | C ++ program to find sum of xor of all unordered triplets of the array ; Iterative Function to calculate ( x ^ y ) % p in O ( log y ) ; Initialize result ; Update x if it is more than or equal to p ; If y is odd , multiply x with result ; y must be even now y = y >> 1 ; y = y / 2 ; Returns n ^ ( - 1 ) mod p ; Returns nCr % p using Fermat 's little theorem. ; Base case ; Fill factorial array so that we can find all factorial of r , n and n - r ; Function returns sum of xor of all unordered triplets of the array ; Iterating over the bits ; Number of elements whith k 'th bit  1 and 0 respectively ; Checking if k 'th bit is 1 ; Adding this bit 's part to the answer ; Drivers code","#include <bits/stdc++.h>
using namespace std;
int power(int x, int y, int p) {
  int res = 1;
  x = x % p;
  while (y > 0) {
    if (y & 1)
      res = (res * x) % p;
    x = (x * x) % p;
  }
  return res;
}
int modInverse(int n, int p) { return power(n, p - 2, p); }
int nCrModPFermat(int n, int r, int p) {
  if (r == 0)
    return 1;
  if (n < r)
    return 0;
  int fac[n + 1];
  fac[0] = 1;
  for (int i = 1; i <= n; i++)
    fac[i] = fac[i - 1] * i % p;
  return (fac[n] * modInverse(fac[r], p) % p * modInverse(fac[n - r], p) % p) %
         p;
}
int SumOfXor(int a[], int n) {
  int mod = 10037;
  int answer = 0;
  for (int k = 0; k < 32; k++) {
    int x = 0, y = 0;
    for (int i = 0; i < n; i++) {
      if (a[i] & (1 << k))
        x++;
      else
        y++;
    }
    answer +=
        ((1 << k) % mod *
         (nCrModPFermat(x, 3, mod) + x * nCrModPFermat(y, 2, mod)) % mod) %
        mod;
  }
  return answer;
}
int main() {
  int n = 5;
  int A[n] = {3, 5, 2, 18, 7};
  cout << SumOfXor(A, n);
  return 0;
}",Find sum of xor of all unordered triplets of the array.
656,Probability of not getting two consecutive heads together in N tosses of coin | C ++ implementation to find the probability of not getting two consecutive heads together when N coins are tossed ; Function to compute the N - th Fibonacci number in the sequence where a = 2 and b = 3 ; The first two numbers in the sequence are initialized ; Base cases ; Loop to compute the fibonacci sequence based on the first two initialized numbers ; Function to find the probability of not getting two consecutive heads when N coins are tossed ; Computing the number of favourable cases ; Computing the number of all possible outcomes for N tosses ; Driver code,"#include <bits/stdc++.h>
using namespace std;
float round(float var, int digit) {
  float value = (int)(var * pow(10, digit) + .5);
  return (float)value / pow(10, digit);
}
int probability(int N) {
  int a = 2;
  int b = 3;
  if (N == 1) {
    return a;
  } else if (N == 2) {
    return b;
  } else {
    for (int i = 3; i <= N; i++) {
      int c = a + b;
      a = b;
      b = c;
    }
    return b;
  }
}
float operations(int N) {
  int x = probability(N);
  int y = pow(2, N);
  return round((float)x / (float)y, 2);
}
int main() {
  int N = 10;
  cout << (operations(N));
}",Probability of not getting two consecutive heads together in N tosses of coin.
657,Check if number formed by joining two Numbers is Perfect Cube | C ++ program to check if the concatenation of two numbers is a perfect cube or not ; Function to check if a number is a perfect Cube or not ; Function to check if concatenation of two numbers is a perfect cube or not ; Convert numbers to string using to_string ( ) ; Concatenate the numbers and convert it into integer ; Check if concatenated value is perfect cube or not ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
bool isPerfectCube(int x) {
  long double cr = round(cbrt(x));
  return (cr * cr * cr == x);
}
void checkCube(int a, int b) {
  string s1 = to_string(a);
  string s2 = to_string(b);
  int c = stoi(s1 + s2);
  if (isPerfectCube(c)) {
    cout << ""Yes"";
  } else {
    cout << ""No"";
  }
}
int main() {
  int a = 6;
  int b = 4;
  checkCube(a, b);
  return 0;
}",Check if number formed by joining two Numbers is Perfect Cube.
658,"Largest number in given Array formed by repeatedly combining two same elements | C ++ implementation of the above approach ; Function to return the largest sum ; Variable to store the largest sum ; Map to store the frequencies of each element ; Store the Frequencies ; Loop to combine duplicate elements and update the sum in the map ; If j is a duplicate element ; Update the frequency of 2 * j ; If the new sum is greater than maximum value , Update the maximum ; Returns the largest sum ; Driver Code ; Function Calling","#include <bits/stdc++.h>
using namespace std;
int largest_sum(int arr[], int n) {
  int maximum = -1;
  map<int, int> m;
  for (int i = 0; i < n; i++) {
    m[arr[i]]++;
  }
  for (auto j : m) {
    if (j.second > 1) {
      m[2 * j.first] = m[2 * j.first] + j.second / 2;
      if (2 * j.first > maximum)
        maximum = 2 * j.first;
    }
  }
  return maximum;
}
int main() {
  int arr[] = {1, 1, 2, 4, 7, 8};
  int n = sizeof(arr) / sizeof(arr[0]);
  cout << largest_sum(arr, n);
  return 0;
}",Largest number in given Array formed by repeatedly combining two same elements.
659,Check if it is possible to make x and y zero at same time with given operation | C ++ program of the above approach ; Function to check if it is possible to make x and y can become 0 at same time ; Check the given conditions ; Driver Code ; Function Call,"#include <bits/stdc++.h>
using namespace std;
void canBeReduced(int x, int y) {
  int maxi = max(x, y);
  int mini = min(x, y);
  if (((x + y) % 3) == 0 && maxi <= 2 * mini)
    cout << ""YES"" << endl;
  else
    cout << ""NO"" << endl;
}
int main() {
  int x = 6, y = 9;
  canBeReduced(x, y);
  return 0;
}",Check if it is possible to make x and y zero at same time with given operation.
660,"Wheel Factorization Algorithm | C ++ program to check if the given number is prime using Wheel Factorization Method ; Function to check if a given number x is prime or not ; The Wheel for checking prime number ; Base Case ; Check for the number taken as basis ; Check for Wheel Here i , acts as the layer of the wheel ; Check for the list of Sieve in arr [ ] ; If number is greater than sqrt ( N ) break ; Check if N is a multiple of prime number in the wheel ; If at any iteration isPrime is false , break from the loop ; Driver 's Code ; Function call for primality check","#include ""bits/stdc++.h""
using namespace std;
void isPrime(int N) {
  bool isPrime = true;
  int arr[8] = {7, 11, 13, 17, 19, 23, 29, 31};
  if (N < 2) {
    isPrime = false;
  }
  if (N % 2 == 0 N % 3 == 0 N % 5 == 0) {
    isPrime = false;
  }
  for (int i = 0; i < sqrt(N); i += 30) {
    for (int c : arr) {
      if (c > sqrt(N)) {
        break;
      } else {
        if (N % (c + i) == 0) {
          isPrime = false;
          break;
        }
      }
      if (!isPrime)
        break;
    }
  }
  if (isPrime)
    cout << ""Prime Number"";
  else
    cout << ""Not a Prime Number"";
}
int main() {
  int N = 121;
  isPrime(N);
  return 0;
}",Wheel Factorization Algorithm.
661,Find all Pairs possible from the given Array | C ++ implementation to find all Pairs possible from the given Array ; Function to print all possible pairs from the array ; Nested loop for all possible pairs ; Driver code,"#include <bits/stdc++.h>
using namespace std;
void printPairs(int arr[], int n) {
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < n; j++) {
      cout << ""("" << arr[i] << "", "" << arr[j] << "")""
           << "", "";
    }
  }
}
int main() {
  int arr[] = {1, 2};
  int n = sizeof(arr) / sizeof(arr[0]);
  printPairs(arr, n);
  return 0;
}",Find all Pairs possible from the given Array.
662,Sum of cubes of all Subsets of given Array | C ++ implementation of the approach ; Function to return ( 2 ^ P % mod ) ; Function to return the sum of cubes of subsets ; cubing the elements and adding it to ans ; Driver code,"#include <bits/stdc++.h>
using namespace std;
const int mod = 1e9 + 7;
long long power(int p) {
  long long res = 1;
  for (int i = 1; i <= p; ++i) {
    res *= 2;
    res %= mod;
  }
  return res % mod;
}
long long subset_cube_sum(vector<int> &A) {
  int n = (int)A.size();
  long long ans = 0;
  for (int i : A) {
    ans += (1 LL * i * i * i) % mod;
    ans %= mod;
  }
  return (1 LL * ans * power(n - 1)) % mod;
}
int main() {
  vector<int> A = {1, 2};
  cout << subset_cube_sum(A);
  return 0;
}",Sum of cubes of all Subsets of given Array.
663,Least number to be added to or subtracted from N to make it a Perfect Cube | C ++ implementation of the approach ; Function to return the Least number ; Get the perfect cube before and after N ; Check which is nearest to N ; return the result ; Driver code,"#include <bits/stdc++.h>
using namespace std;
int nearest(int n) {
  int prevCube = cbrt(n);
  int nextCube = prevCube + 1;
  prevCube = prevCube * prevCube * prevCube;
  nextCube = nextCube * nextCube * nextCube;
  int ans = (n - prevCube) < (nextCube - n) ? (prevCube - n) : (nextCube - n);
  return ans;
}
int main() {
  int n = 25;
  cout << nearest(n) << endl;
  n = 27;
  cout << nearest(n) << endl;
  n = 40;
  cout << nearest(n) << endl;
  return 0;
}",Least number to be added to or subtracted from N to make it a Perfect Cube.
664,Check if a circle lies inside another circle or not | C ++ program to check if one circle lies inside another circle or not . ; Driver code,"#include <bits/stdc++.h>
using namespace std;
void circle(int x1, int y1, int x2, int y2, int r1, int r2) {
  int distSq = sqrt(((x1 - x2) * (x1 - x2)) + ((y1 - y2) * (y1 - y2)));
  if (distSq + r2 == r1)
    cout << ""The smaller circle lies completely""
         << "" inside the bigger circle with ""
         << ""touching each other ""
         << ""at a point of circumference. "" << endl;
  else if (distSq + r2 < r1)
    cout << ""The smaller circle lies completely""
         << "" inside the bigger circle without""
         << "" touching each other ""
         << ""at a point of circumference. "" << endl;
  else
    cout << ""The smaller does not lies inside""
         << "" the bigger circle completely."" << endl;
}
int main() {
  int x1 = 10, y1 = 8;
  int x2 = 1, y2 = 2;
  int r1 = 30, r2 = 10;
  circle(x1, y1, x2, y2, r1, r2);
  return 0;
}",Check if a circle lies inside another circle or not.
665,Length of direct common tangent between two intersecting Circles | C ++ program to find the length of the direct common tangent between two circles which intersect each other ; Function to find the length of the direct common tangent ; Driver code,"#include <bits/stdc++.h>
using namespace std;
void lengtang(double r1, double r2, double d) {
  cout << ""The length of the direct""
       << "" common tangent is "" << sqrt(pow(d, 2) - pow((r1 - r2), 2)) << endl;
}
int main() {
  double r1 = 4, r2 = 6, d = 3;
  lengtang(r1, r2, d);
  return 0;
}",Length of direct common tangent between two intersecting Circles.
666,Radius of the circle when the width and height of an arc is given | C ++ program to find radius of the circle when the width and height of an arc is given ; Function to find the radius ; Driver code,"#include <bits/stdc++.h>
using namespace std;
void rad(double d, double h) {
  cout << ""The radius of the circle is "" << ((d * d) / (8 * h) + h / 2) << endl;
}
int main() {
  double d = 4, h = 1;
  rad(d, h);
  return 0;
}",Radius of the circle when the width and height of an arc is given.
667,Shortest distance from the centre of a circle to a chord | C ++ program to find the shortest distance from chord to the centre of circle ; Function to find the shortest distance ; Driver code,"#include <bits/stdc++.h>
using namespace std;
void shortdis(double r, double d) {
  cout << ""The shortest distance ""
       << ""from the chord to centre "" << sqrt((r * r) - ((d * d) / 4)) << endl;
}
int main() {
  double r = 4, d = 3;
  shortdis(r, d);
  return 0;
}",Shortest distance from the centre of a circle to a chord.
668,Length of direct common tangent between the two non | C ++ program to find the length of the direct common tangent between two circles which donot touch each other ; Function to find the length of the direct common tangent ; Driver code,"#include <bits/stdc++.h>
using namespace std;
void lengtang(double r1, double r2, double d) {
  cout << ""The length of the direct""
       << "" common tangent is "" << sqrt(pow(d, 2) - pow((r1 - r2), 2)) << endl;
}
int main() {
  double r1 = 4, r2 = 6, d = 12;
  lengtang(r1, r2, d);
  return 0;
}",Length of direct common tangent between the two non.
669,Biggest Square that can be inscribed within an Equilateral triangle | C ++ Program to find the biggest square which can be inscribed within the equilateral triangle ; Function to find the side of the square ; the side cannot be negative ; side of the square ; Driver code,"#include <bits/stdc++.h>
using namespace std;
float square(float a) {
  if (a < 0)
    return -1;
  float x = 0.464 * a;
  return x;
}
int main() {
  float a = 5;
  cout << square(a) << endl;
  return 0;
}",Biggest Square that can be inscribed within an Equilateral triangle.
670,Apothem of a n | C ++ Program to find the apothem of a regular polygon with given side length ; Function to find the apothem of a regular polygon ; Side and side length cannot be negative ; Degree converted to radians ; Driver code,"#include <bits/stdc++.h>
using namespace std;
float polyapothem(float n, float a) {
  if (a < 0 && n < 0)
    return -1;
  return a / (2 * tan((180 / n) * 3.14159 / 180));
}
int main() {
  float a = 9, n = 6;
  cout << polyapothem(n, a) << endl;
  return 0;
}",Apothem of a n.
671,Area of a n | C ++ Program to find the area of a regular polygon with given side length ; Function to find the area of a regular polygon ; Side and side length cannot be negative ; Area degree converted to radians ; Driver code,"#include <bits/stdc++.h>
using namespace std;
float polyarea(float n, float a) {
  if (a < 0 && n < 0)
    return -1;
  float A = (a * a * n) / (4 * tan((180 / n) * 3.14159 / 180));
  return A;
}
int main() {
  float a = 9, n = 6;
  cout << polyarea(n, a) << endl;
  return 0;
}",Area of a n.
672,Side of a regular n | C ++ implementation of the approach ; Function to calculate the side of the polygon circumscribed in a circle ; Driver Code ; Total sides of the polygon ; Radius of the circumscribing circle,"#include <bits/stdc++.h>
using namespace std;
float calculateSide(float n, float r) {
  float theta, theta_in_radians;
  theta = 360 / n;
  theta_in_radians = theta * 3.14 / 180;
  return 2 * r * sin(theta_in_radians / 2);
}
int main() {
  float n = 3;
  float r = 5;
  cout << calculateSide(n, r);
}",Side of a regular n.
673,Largest right circular cylinder within a frustum | C ++ Program to find the biggest right circular cylinder that can be fit within a frustum ; Function to find the biggest right circular cylinder ; radii and height cannot be negative ; radius of right circular cylinder ; height of right circular cylinder ; volume of right circular cylinder ; Driver code,"#include <bits/stdc++.h>
using namespace std;
float cyl(float r, float R, float h) {
  if (h < 0 && r < 0 && R < 0)
    return -1;
  float r1 = r;
  float h1 = h;
  float V = 3.14 * pow(r1, 2) * h1;
  return V;
}
int main() {
  float r = 7, R = 11, h = 6;
  cout << cyl(r, R, h) << endl;
  return 0;
}",Largest right circular cylinder within a frustum.
674,Program to find the Perimeter of a Regular Polygon | C ++ program to find the perimeter of a regular polygon ; Function to calculate the perimeter ; Calculate Perimeter ; driver code ; Get the number of sides ; Get the length of side ; find perimeter,"#include <iostream>
using namespace std;
float Perimeter(float s, int n) {
  float perimeter = 1;
  perimeter = n * s;
  return perimeter;
}
int main() {
  int n = 5;
  float s = 2.5, peri;
  peri = Perimeter(s, n);
  cout << ""Perimeter of Regular Polygon""
       << "" with "" << n << "" sides of length "" << s << "" = "" << peri << endl;
  return 0;
}",Program to find the Perimeter of a Regular Polygon.
675,Area of the biggest possible rhombus that can be inscribed in a rectangle | C ++ Program to find the biggest rhombus which can be inscribed within the rectangle ; Function to find the area of the biggest rhombus ; the length and breadth cannot be negative ; area of the rhombus ; Driver code,"#include <bits/stdc++.h>
using namespace std;
float rhombusarea(float l, float b) {
  if (l < 0 b < 0)
    return -1;
  return (l * b) / 2;
}
int main() {
  float l = 16, b = 6;
  cout << rhombusarea(l, b) << endl;
  return 0;
}",Area of the biggest possible rhombus that can be inscribed in a rectangle.
676,Check if a point lies inside a rectangle | Set | CPP program to Check if a point lies on or inside a rectangle | Set - 2 ; function to find if given point lies inside a given rectangle or not . ; Driver code ; bottom - left and top - right corners of rectangle ; given point ; function call,"#include <bits/stdc++.h>
using namespace std;
bool FindPoint(int x1, int y1, int x2, int y2, int x, int y) {
  if (x > x1 and x < x2 and y > y1 and y < y2)
    return true;
  return false;
}
int main() {
  int x1 = 0, y1 = 0, x2 = 10, y2 = 8;
  int x = 1, y = 5;
  if (FindPoint(x1, y1, x2, y2, x, y))
    cout << ""Yes"";
  else
    cout << ""No"";
  return 0;
}",Check if a point lies inside a rectangle.
677,Distance between a point and a Plane in 3 D | C ++ program to find the Perpendicular ( shortest ) distance between a point and a Plane in 3 D . ; Function to find distance ; Driver Code ; Function call,"#include <bits/stdc++.h>
#include <math.h>
using namespace std;
void shortest_distance(float x1, float y1, float z1, float a, float b, float c,
                       float d) {
  d = fabs((a * x1 + b * y1 + c * z1 + d));
  float e = sqrt(a * a + b * b + c * c);
  cout << ""Perpendicular distance is "" << (d / e);
  return;
}
int main() {
  float x1 = 4;
  float y1 = -4;
  float z1 = 3;
  float a = 2;
  float b = -2;
  float c = 5;
  float d = 8;
  shortest_distance(x1, y1, z1, a, b, c, d);
}",Distance between a point and a Plane in 3 D.
678,Program to find the Volume of a Triangular Prism | CPP program to find the volume of the triangular prism ; function to find the Volume of triangular prism ; formula to find Volume ; Driver Code ; function calling,"#include <bits/stdc++.h>
using namespace std;
float findVolume(float l, float b, float h) {
  float volume = (l * b * h) / 2;
  return volume;
}
int main() {
  float l = 18, b = 12, h = 9;
  cout << ""Volume of triangular prism: "" << findVolume(l, b, h);
  return 0;
}",Program to find the Volume of a Triangular Prism.
679,Check if given four integers ( or sides ) make rectangle | A simple program to find if given 4 values can represent 4 sides of rectangle ; Function to check if the given integers value make a rectangle ; Square is also a rectangle ; Driver code,"#include <iostream>
using namespace std;
bool isRectangle(int a, int b, int c, int d) {
  if (a == b == c == d)
    return true;
  else if (a == b && c == d)
    return true;
  else if (a == d && c == b)
    return true;
  else if (a == c && d == b)
    return true;
  else
    return false;
}
int main() {
  int a, b, c, d;
  a = 1, b = 2, c = 3, d = 4;
  if (isRectangle(a, b, c, d))
    cout << ""Yes"";
  else
    cout << ""No"";
  return 0;
}",Check if given four integers ( or sides ) make rectangle.
680,Program to find the mid | C ++ program to find the midpoint of a line ; function to find the midpoint of a line ; Driver Function to test above,"#include <iostream>
using namespace std;
void midpoint(int x1, int x2, int y1, int y2) {
  cout << (float)(x1 + x2) / 2 << "" , "" << (float)(y1 + y2) / 2;
}
int main() {
  int x1 = -1, y1 = 2;
  int x2 = 3, y2 = -6;
  midpoint(x1, x2, y1, y2);
  return 0;
}",Program to find the mid.
681,Arc length from given Angle | C ++ program to calculate length of an arc ; function to calculate arc length ; Driver Code,"#include <iostream>
using namespace std;
double arcLength(double diameter, double angle) {
  double pi = 22.0 / 7.0;
  double arc;
  if (angle >= 360) {
    cout << ""Angle cannot"", "" be formed"";
    return 0;
  } else {
    arc = (pi * diameter) * (angle / 360.0);
    return arc;
  }
}
int main() {
  double diameter = 25.0;
  double angle = 45.0;
  double arc_len = arcLength(diameter, angle);
  cout << (arc_len);
  return 0;
}",Arc length from given Angle.
682,"Check if a line touches or intersects a circle | CPP program to check if a line touches or intersects or outside a circle . ; Finding the distance of line from center . ; Checking if the distance is less than , greater than or equal to radius . ; Driven Program","#include <bits/stdc++.h>
using namespace std;
void checkCollision(int a, int b, int c, int x, int y, int radius) {
  int dist = (abs(a * x + b * y + c)) / sqrt(a * a + b * b);
  if (radius == dist)
    cout << ""Touch"" << endl;
  else if (radius > dist)
    cout << ""Intersect"" << endl;
  else
    cout << ""Outside"" << endl;
}
int main() {
  int radius = 5;
  int x = 0, y = 0;
  int a = 3, b = 4, c = 25;
  checkCollision(a, b, c, x, y, radius);
  return 0;
}",Check if a line touches or intersects a circle.
683,"Program to find Circumcenter of a Triangle | C ++ program to find the CIRCUMCENTER of a triangle ; This pair is used to store the X and Y coordinate of a point respectively ; Function to find the line given two points ; Function which converts the input line to its perpendicular bisector . It also inputs the points whose mid - point lies on the bisector ; c = - bx + ay ; Returns the intersection point of two lines ; The lines are parallel . This is simplified by returning a pair of FLT_MAX ; Line PQ is represented as ax + by = c ; Line QR is represented as ex + fy = g ; Converting lines PQ and QR to perpendicular vbisectors . After this , L = ax + by = c M = ex + fy = g ; The point of intersection of L and M gives the circumcenter ; Driver code .","#include <cfloat>
#include <iostream>
using namespace std;
#definepddpair < double,
    double> void lineFromPoints(pdd P, pdd Q, double &a, double &b, double &c) {
  a = Q.second - P.second;
  b = P.first - Q.first;
  c = a * (P.first) + b * (P.second);
}
void perpendicularBisectorFromLine(pdd P, pdd Q, double &a, double &b,
                                   double &c) {
  pdd mid_point = make_pair((P.first + Q.first) / 2, (P.second + Q.second) / 2);
  c = -b * (mid_point.first) + a * (mid_point.second);
  double temp = a;
  a = -b;
  b = temp;
}
pdd lineLineIntersection(double a1, double b1, double c1, double a2, double b2,
                         double c2) {
  double determinant = a1 * b2 - a2 * b1;
  if (determinant == 0) {
    return make_pair(FLT_MAX, FLT_MAX);
  } else {
    double x = (b2 * c1 - b1 * c2) / determinant;
    double y = (a1 * c2 - a2 * c1) / determinant;
    return make_pair(x, y);
  }
}
void findCircumCenter(pdd P, pdd Q, pdd R) {
  double a, b, c;
  lineFromPoints(P, Q, a, b, c);
  double e, f, g;
  lineFromPoints(Q, R, e, f, g);
  perpendicularBisectorFromLine(P, Q, a, b, c);
  perpendicularBisectorFromLine(Q, R, e, f, g);
  pdd circumcenter = lineLineIntersection(a, b, c, e, f, g);
  if (circumcenter.first == FLT_MAX && circumcenter.second == FLT_MAX) {
    cout << ""The two perpendicular bisectors ""
            ""found come parallel""
         << endl;
    cout << ""Thus, the given points do not form ""
            ""a triangle and are collinear""
         << endl;
  } else {
    cout << ""The circumcenter of the triangle PQR is: "";
    cout << ""("" << circumcenter.first << "", "" << circumcenter.second << "")""
         << endl;
  }
}
int main() {
  pdd P = make_pair(6, 0);
  pdd Q = make_pair(0, 0);
  pdd R = make_pair(0, 8);
  findCircumCenter(P, Q, R);
  return 0;
}",Program to find Circumcenter of a Triangle.
684,"Program to find area of a triangle | C ++ program to evaluate area of a polygon using shoelace formula ; ( X [ i ] , Y [ i ] ) are coordinates of i 'th point. ; Initialize area ; Calculate value of shoelace formula ; j = i ; j is previous vertex to i ; Return absolute value ; Driver program to test above function","#include <bits/stdc++.h>
using namespace std;
double polygonArea(double X[], double Y[], int n) {
  double area = 0.0;
  int j = n - 1;
  for (int i = 0; i < n; i++) {
    area += (X[j] + X[i]) * (Y[j] - Y[i]);
  }
  return abs(area / 2.0);
}
int main() {
  double X[] = {0, 2, 4};
  double Y[] = {1, 3, 7};
  int n = sizeof(X) / sizeof(X[0]);
  cout << polygonArea(X, Y, n);
}",Program to find area of a triangle.
685,Maximize sum of LSBs of Bitwise OR of all possible N / 2 pairs from given Array | C ++ program for the above approach ; Function top get LSB value of v ; Binary conversion ; Function to find the sum of LSBs of all possible pairs of the given array ; Stores the LSB of array elements ; Storing the LSB values ; Sort the array lab_arr [ ] ; Taking pairwise sum to get the maximum sum of LSB ; Print the result ; Driver Code ; Function Call,"#include <bits/stdc++.h>
using namespace std;
int chk(int n) {
  vector<int> v;
  while (n != 0) {
    v.push_back(n % 2);
    n = n / 2;
  }
  for (int i = 0; i < v.size(); i++) {
    if (v[i] == 1) {
      return pow(2, i);
    }
  }
  return 0;
}
void sumOfLSB(int arr[], int N) {
  vector<int> lsb_arr;
  for (int i = 0; i < N; i++) {
    lsb_arr.push_back(chk(arr[i]));
  }
  sort(lsb_arr.begin(), lsb_arr.end(), greater<int>());
  int ans = 0;
  for (int i = 0; i < N - 1; i += 2) {
    ans += (lsb_arr[i + 1]);
  }
  cout << (ans);
}
int main() {
  int N = 5;
  int arr[] = {1, 2, 3, 4, 5};
  sumOfLSB(arr, N);
}",Maximize sum of LSBs of Bitwise OR of all possible N / 2 pairs from given Array.
686,Count of subsequences having odd Bitwise AND values in the given array | C ++ program for the above approach ; Function to find count of subsequences having odd bitwise AND value ; Stores count of odd elements ; Traverse the array arr [ ] ; If x is odd increment count ; Return Answer ; Driver Code ; Function Call,"#include <bits/stdc++.h>
using namespace std;
int countSubsequences(vector<int> arr) {
  int odd = 0;
  for (int x : arr) {
    if (x & 1)
      odd++;
  }
  return (1 << odd) - 1;
}
int main() {
  vector<int> arr = {1, 3, 3};
  cout << countSubsequences(arr);
  return 0;
}",Count of subsequences having odd Bitwise AND values in the given array.
687,"Count pairs from an array with absolute difference not less than the minimum element in the pair | C ++ program for the above approach ; Function to find the number of pairs ( i , j ) such that abs ( a [ i ] - a [ j ] ) is at least the minimum of ( a [ i ] , a [ j ] ) ; Stores the resultant count of pairs ; Iterate over the range [ 0 , n ] ; Iterate from arr [ i ] - ( i % arr [ i ] ) till n with an increment of arr [ i ] ; Count the possible pairs ; Return the total count ; Driver Code","#include <bits/stdc++.h>
using namespace std;
int getPairsCount(int arr[], int n) {
  int count = 0;
  for (int i = 0; i < n; i++) {
    for (int j = arr[i] - (i % arr[i]); j < n; j += arr[i]) {
      if (i < j && abs(arr[i] - arr[j]) >= min(arr[i], arr[j])) {
        count++;
      }
    }
  }
  return count;
}
int main() {
  int arr[] = {1, 2, 2, 3};
  int N = sizeof(arr) / sizeof(arr[0]);
  cout << getPairsCount(arr, N);
  return 0;
}",Count pairs from an array with absolute difference not less than the minimum element in the pair.
688,Minimum steps to change N to 1 by changing it to 2 * N or N / 10 at any step | C ++ program for the above approach ; Function to check if N can be changed to 1 or not . ; Count the number of 2 in the prime factorisation of N ; Count the number of 5 in the prime factorisation of N ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
void check(int N) {
  int twos = 0, fives = 0;
  while (N % 2 == 0) {
    N /= 2;
    twos++;
  }
  while (N % 5 == 0) {
    N /= 5;
    fives++;
  }
  if (N == 1 && twos <= fives) {
    cout << 2 * fives - twos;
  } else {
    cout << -1;
  }
}
int main() {
  int N = 50;
  check(N);
  return 0;
}",Minimum steps to change N to 1 by changing it to 2 * N or N / 10 at any step.
689,Sum of elements in given range from Array formed by infinitely concatenating given array | C ++ program for the above approach ; Function to find the sum of elements in a given range of an infinite array ; Stores the sum of array elements from L to R ; Traverse from L to R ; Print the resultant sum ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
void rangeSum(int arr[], int N, int L, int R) {
  int sum = 0;
  for (int i = L - 1; i < R; i++) {
    sum += arr[i % N];
  }
  cout << sum;
}
int main() {
  int arr[] = {5, 2, 6, 9};
  int L = 10, R = 13;
  int N = sizeof(arr) / sizeof(arr[0]);
  rangeSum(arr, N, L, R);
  return 0;
}",Sum of elements in given range from Array formed by infinitely concatenating given array.
690,Sum of elements in given range from Array formed by infinitely concatenating given array | C ++ program for the above approach ; Function to find the sum of elements in a given range of an infinite array ; Stores the prefix sum ; Calculate the prefix sum ; Stores the sum of elements from 1 to L - 1 ; Stores the sum of elements from 1 to R ; Print the resultant sum ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
void rangeSum(int arr[], int N, int L, int R) {
  int prefix[N + 1];
  prefix[0] = 0;
  for (int i = 1; i <= N; i++) {
    prefix[i] = prefix[i - 1] + arr[i - 1];
  }
  int leftsum = ((L - 1) / N) * prefix[N] + prefix[(L - 1) % N];
  int rightsum = (R / N) * prefix[N] + prefix[R % N];
  cout << rightsum - leftsum;
}
int main() {
  int arr[] = {5, 2, 6, 9};
  int L = 10, R = 13;
  int N = sizeof(arr) / sizeof(arr[0]);
  rangeSum(arr, N, L, R);
  return 0;
}",Sum of elements in given range from Array formed by infinitely concatenating given array.
691,"Exponential factorial of N | C ++ program for the above approach ; Function to find exponential factorial of a given number ; Stores the exponetial factor of N ; Iterare over the range [ 2 , N ] ; Update res ; Return res ; Driver Code ; Input ; Function call","#include <bits/stdc++.h>
using namespace std;
int ExpoFactorial(int N) {
  int res = 1;
  int mod = 1000000007;
  for (int i = 2; i < N + 1; i++)
    res = (int)pow(i, res) % mod;
  return res;
}
int main() {
  int N = 4;
  cout << (ExpoFactorial(N));
}",Exponential factorial of N.
692,"Maximum subarray sum in an array created after repeated concatenation | Set | C ++ program for the above approach ; Function to find contiguous subarray with maximum sum if array is repeated K times ; Store the sum of the array arr [ ] ; Traverse the array and find sum ; Store the answer ; If K = 1 ; Apply Kadane algorithm to find sum ; Return the answer ; Stores the twice repeated array ; Traverse the range [ 0 , 2 * N ] ; Stores the maximum suffix sum ; Stores the maximum prefix sum ; Apply Kadane algorithm for 2 repetition of the array ; If the sum of the array is greater than 0 ; Return the answer ; Driver Code ; Given Input ; Function Call","#include <bits/stdc++.h>
using namespace std;
int maxSubArraySumRepeated(int arr[], int N, int K) {
  int sum = 0;
  for (int i = 0; i < N; i++)
    sum += arr[i];
  int curr = arr[0];
  int ans = arr[0];
  if (K == 1) {
    for (int i = 1; i < N; i++) {
      curr = max(arr[i], curr + arr[i]);
      ans = max(ans, curr);
    }
    return ans;
  }
  vector<int> V;
  for (int i = 0; i < 2 * N; i++) {
    V.push_back(arr[i % N]);
  }
  int maxSuf = V[0];
  int maxPref = V[2 * N - 1];
  curr = V[0];
  for (int i = 1; i < 2 * N; i++) {
    curr += V[i];
    maxPref = max(maxPref, curr);
  }
  curr = V[2 * N - 1];
  for (int i = 2 * N - 2; i >= 0; i--) {
    curr += V[i];
    maxSuf = max(maxSuf, curr);
  }
  curr = V[0];
  for (int i = 1; i < 2 * N; i++) {
    curr = max(V[i], curr + V[i]);
    ans = max(ans, curr);
  }
  if (sum > 0) {
    int temp = 1 LL * sum * (K - 2);
    ans = max(ans, max(temp + maxPref, temp + maxSuf));
  }
  return ans;
}
int main() {
  int arr[] = {10, 20, -30, -1, 40};
  int N = sizeof(arr) / sizeof(arr[0]);
  int K = 10;
  cout << maxSubArraySumRepeated(arr, N, K);
  return 0;
}",Maximum subarray sum in an array created after repeated concatenation.
693,"Count of subarrays with largest element at least twice the largest of remaining elements | C ++ program for the above approach ; Function to find count of subarrays which have max element greater than twice maximum of all other elements ; Stores the count of subarrays ; Generate all possible subarrays ; Stores the maximum element of the subarray ; Stores the maximum of all other elements ; Find the maximum element in the subarray [ i , j ] ; Find the maximum of all other elements ; If the maximum of subarray is greater than twice the maximum of other elements ; Print the maximum value obtained ; Driver Code","#include <iostream>
using namespace std;
void countSubarray(int arr[], int n) {
  int count = 0;
  for (int i = 0; i < n; i++) {
    for (int j = i; j < n; j++) {
      int mxSubarray = 0;
      int mxOther = 0;
      for (int k = i; k <= j; k++) {
        mxSubarray = max(mxSubarray, arr[k]);
      }
      for (int k = 0; k < i; k++) {
        mxOther = max(mxOther, arr[k]);
      }
      for (int k = j + 1; k < n; k++) {
        mxOther = max(mxOther, arr[k]);
      }
      if (mxSubarray > (2 * mxOther))
        count++;
    }
  }
  cout << count;
}
int main() {
  int arr[] = {1, 6, 10, 9, 7, 3};
  int N = sizeof(arr) / sizeof(arr[0]);
  countSubarray(arr, N);
  return 0;
}",Count of subarrays with largest element at least twice the largest of remaining elements.
694,Count of subarrays with largest element at least twice the largest of remaining elements | C ++ program for the above approach ; Function to find count of subarrays which have max element greater than twice maximum of all other elements ; Stores the maximum element of the array ; Traverse the given array ; If the value of 2 * arr [ i ] is greater than mx ; Update the value of L and break out of loop ; If the value 2 * arr [ i ] is greater than mx ; Update the value of R and break out of loop ; Print the final answer ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
void countSubarray(int arr[], int n) {
  int count = 0, L = 0, R = 0;
  int mx = *max_element(arr, arr + n);
  for (int i = 0; i < n; i++) {
    if (arr[i] * 2 > mx) {
      L = i;
      break;
    }
  }
  for (int i = n - 1; i >= 0; i--) {
    if (arr[i] * 2 > mx) {
      R = i;
      break;
    }
  }
  cout << (L + 1) * (n - R);
}
int main() {
  int arr[] = {1, 6, 10, 9, 7, 3};
  int N = sizeof(arr) / sizeof(arr[0]);
  countSubarray(arr, N);
  return 0;
}",Count of subarrays with largest element at least twice the largest of remaining elements.
695,Find Prime number just less than and just greater each element of given Array | C ++ program for the above approach ; Utility function to check for primality of a number X by checking whether X haACCs any factors other than 1 and itself . ; if ( X % i == 0 ) Factor found ; Function to print primes just less than and just greater than of each element in an array ; Traverse the array ; Traverse for finding prime just less than A [ i ] ; Prime just less than A [ i ] found ; Traverse for finding prime just greater than A [ i ] ; Prime just greater than A [ i ] found ; Driver code ; Input ; Function call,"#include <bits/stdc++.h>
using namespace std;
bool isPrime(int X) {
  for (int i = 2; i * i <= X; i++)
    return false;
  return true;
}
void printPrimes(int A[], int N) {
  for (int i = 0; i < N; i++) {
    for (int j = A[i] - 1;; j--) {
      if (isPrime(j)) {
        cout << j << "" "";
        break;
      }
    }
    for (int j = A[i] + 1;; j++) {
      if (isPrime(j)) {
        cout << j << "" "";
        break;
      }
    }
    cout << endl;
  }
}
int main() {
  int A[] = {17, 28};
  int N = sizeof(A) / sizeof(A[0]);
  printPrimes(A, N);
  return 0;
}",Find Prime number just less than and just greater each element of given Array.
696,"Kth smallest element in an array that contains A [ i ] exactly B [ i ] times | C ++ program for the above approach ; Function to find the Kth smallest element that contains A [ i ] exactly B [ i ] times ; Traverse the given array ; Stores the frequency of every elements ; Traverse the given array ; Initialize a variable to store the prefix sums ; Iterate over the range [ 0 , M ] ; Increment sum by freq [ i ] ; If sum is greater than or equal to K ; Return the current element as answer ; Return - 1 ; Driver Code ; Given Input ; Function call","#include <bits/stdc++.h>
using namespace std;
int KthSmallest(int A[], int B[], int N, int K) {
  int M = 0;
  for (int i = 0; i < N; i++) {
    M = max(A[i], M);
  }
  int freq[M + 1] = {0};
  for (int i = 0; i < N; i++) {
    freq[A[i]] += B[i];
  }
  int sum = 0;
  for (int i = 0; i <= M; i++) {
    sum += freq[i];
    if (sum >= K) {
      return i;
    }
  }
  return -1;
}
int main() {
  int A[] = {3, 4, 5};
  int B[] = {2, 1, 3};
  int N = sizeof(A) / sizeof(A[0]);
  int K = 4;
  cout << KthSmallest(A, B, N, K);
  return 0;
}",Kth smallest element in an array that contains A [ i ] exactly B [ i ] times.
697,Bitwise OR of Bitwise AND of all subarrays of an array | C ++ program for the above approach ; Function to find the Bitwise OR of Bitwise AND of all subarrays ; Stores the required result ; Generate all the subarrays ; Store the current element ; Find the Bitwise OR ; Update the result ; Print the result ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
void findbitwiseOR(int *a, int n) {
  int res = 0;
  for (int i = 0; i < n; i++) {
    int curr_sub_array = a[i];
    res = res | curr_sub_array;
    for (int j = i; j < n; j++) {
      curr_sub_array = curr_sub_array & a[j];
      res = res | curr_sub_array;
    }
  }
  cout << res;
}
int main() {
  int A[] = {1, 2, 3};
  int N = sizeof(A) / sizeof(A[0]);
  findbitwiseOR(A, N);
  return 0;
}",Bitwise OR of Bitwise AND of all subarrays of an array.
698,Bitwise OR of Bitwise AND of all subarrays of an array | C ++ program for the above approach ; Function to find the Bitwise OR of Bitwise AND of all consecutive subsets of the array ; Stores the required result ; Traverse the given array ; Print the result ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
void findbitwiseOR(int *a, int n) {
  int res = 0;
  for (int i = 0; i < n; i++)
    res = res | a[i];
  cout << res;
}
int main() {
  int A[] = {1, 2, 3};
  int N = sizeof(A) / sizeof(A[0]);
  findbitwiseOR(A, N);
  return 0;
}",Bitwise OR of Bitwise AND of all subarrays of an array.
699,Check if sum of digits of a number exceeds the product of digits of that number | C ++ program for the above approach ; Function to check if the sum of the digits of N is strictly greater than the product of the digits of N or not ; Stores the sum and the product of the digits of N ; Stores the last digit if N ; Increment the value of sumOfDigits ; Update the prodOfDigit ; Divide N by 10 ; Print the result ; Driver Code,"#include <iostream>
using namespace std;
void check(int n) {
  int sumOfDigit = 0;
  int prodOfDigit = 1;
  while (n > 0) {
    int rem;
    rem = n % 10;
    sumOfDigit += rem;
    prodOfDigit *= rem;
    n /= 10;
  }
  if (sumOfDigit > prodOfDigit)
    cout << ""Yes"";
  else
    cout << ""No"";
}
int main() {
  int N = 1234;
  check(N);
  return 0;
}",Check if sum of digits of a number exceeds the product of digits of that number.
700,Print all distinct even and odd prefix Bitwise XORs of first N natural numbers | C ++ program for the above approach ; Print all distinct even & odd prefix Bitwise XORs from 1 to N ; Print the even number ; Print the odd number ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
void evenOddBitwiseXOR(int N) {
  cout << ""Even: "" << 0 << "" "";
  for (int i = 4; i <= N; i = i + 4) {
    cout << i << "" "";
  }
  cout << ""\n"";
  cout << ""Odd: "" << 1 << "" "";
  for (int i = 4; i <= N; i = i + 4) {
    cout << i - 1 << "" "";
  }
  if (N % 4 == 2)
    cout << N + 1;
  else if (N % 4 == 3)
    cout << N;
}
int main() {
  int N = 6;
  evenOddBitwiseXOR(N);
  return 0;
}",Print all distinct even and odd prefix Bitwise XORs of first N natural numbers.
701,Lexicographically largest permutation possible by a swap that is smaller than a given array | C ++ program for the above approach ; Function to lexicographic largest permutation possible by a swap that is smaller than given array ; Find the index of first element such that arr [ i ] > arr [ i + 1 ] ; If the array is sorted in increasing order ; Find the index of first element which is smaller than arr [ i ] ; If arr [ j ] = = arr [ j - 1 ] ; Decrement j ; Swap the element ; Print the array arr [ ] ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
void findPermutation(vector<int> &arr) {
  int N = arr.size();
  int i = N - 2;
  while (i >= 0 && arr[i] <= arr[i + 1])
    i--;
  if (i == -1) {
    cout << ""-1"";
    return;
  }
  int j = N - 1;
  while (j > i && arr[j] >= arr[i])
    j--;
  while (j > i && arr[j] == arr[j - 1]) {
    j--;
  }
  swap(arr[i], arr[j]);
  for (auto &it : arr) {
    cout << it << ' ';
  }
}
int main() {
  vector<int> arr = {1, 2, 5, 3, 4, 6};
  findPermutation(arr);
  return 0;
}",Lexicographically largest permutation possible by a swap that is smaller than a given array.
702,"Absolute difference between the count of odd and even factors of N | C ++ program for the above approach ; Function to find the smallest prime factor of all the numbers using Sieve Of Eratosthenes ; Stores whether any number is prime or not ; Initialize smallest factor as 2 for all the even numbers ; Iterate over the range [ 3 , N ] ; If i is prime ; Iterate all multiples of i ; i is the smallest prime factor of i * j ; Function to find the absolute difference between the count of odd and even factors of N ; Stores the smallest prime factor of i ; Fill values in s [ ] using sieve of eratosthenes ; Stores the total number of factors and the total number of odd and even factors ; Store the current prime factor of the number N ; Store the power of current prime factor ; Loop while N is greater than 1 ; If N also has smallest prime factor as curr , then increment cnt by 1 ; Update only total number of factors if curr is 2 ; Update total number of factors and total number of odd factors ; Update current prime factor as s [ N ] and count as 1 ; Calculate the number of even factors ; Print the difference ; Driver Code","#include <bits/stdc++.h>
using namespace std;
void sieveOfEratosthenes(int N, int s[]) {
  vector<bool> prime(N + 1, false);
  for (int i = 2; i <= N; i += 2)
    s[i] = 2;
  for (int i = 3; i <= N; i += 2) {
    if (prime[i] == false) {
      s[i] = i;
      for (int j = i; j * i <= N; j += 2) {
        if (!prime[i * j]) {
          prime[i * j] = true;
          s[i * j] = i;
        }
      }
    }
  }
}
void findDifference(int N) {
  int s[N + 1];
  sieveOfEratosthenes(N, s);
  int total = 1, odd = 1, even = 0;
  int curr = s[N];
  int cnt = 1;
  while (N > 1) {
    N /= s[N];
    if (curr == s[N]) {
      cnt++;
      continue;
    }
    if (curr == 2) {
      total = total * (cnt + 1);
    } else {
      total = total * (cnt + 1);
      odd = odd * (cnt + 1);
    }
    curr = s[N];
    cnt = 1;
  }
  even = total - odd;
  cout << abs(even - odd);
}
int main() {
  int N = 12;
  findDifference(N);
  return 0;
}",Absolute difference between the count of odd and even factors of N.
703,Calculate Median from given values of Mean and Mode | C ++ program for the above approach ; Function to find the median of a group of data with given mean and mode ; Calculate the median ; Print the median ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
void findMedian(int Mean, int Mode) {
  double Median = (2 * Mean + Mode) / 3.0;
  cout << Median;
}
int main() {
  int mode = 6, mean = 3;
  findMedian(mean, mode);
  return 0;
}",Calculate Median from given values of Mean and Mode.
704,Program to find the Magnitude of a Vector | C ++ program for the above approach ; Function to calculate magnitude of a 3 dimensional vector ; Stores the sum of squares of coordinates of a vector ; Return the magnitude ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
float vectorMagnitude(int x, int y, int z) {
  int sum = x * x + y * y + z * z;
  return sqrt(sum);
}
int main() {
  int x = 1;
  int y = 2;
  int z = 3;
  cout << vectorMagnitude(x, y, z);
  return 0;
}",Program to find the Magnitude of a Vector.
705,Program to find the product of a number with a Mersenne Number | C ++ implementation of above approach ; Function to find prodcut of a Mersenne number with another number ; Stores the power of 2 of integer M + 1 ; Return the product ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
long multiplyByMersenne(long N, long M) {
  long x = log2(M + 1);
  return ((N << x) - N);
}
int main() {
  long N = 4;
  long M = 15;
  cout << multiplyByMersenne(N, M);
  return 0;
}",Program to find the product of a number with a Mersenne Number.
706,Nearest power of 2 of nearest perfect squares of non | C ++ program for the above approach ; Function to find nearest perfect square of num ; Calculate square root of num ; Calculate perfect square ; Find the nearest perfect square ; Function to find the power of 2 nearest to the number num ; Calculate log base 2 of num ; Highest power of 2 which is <= num ; Function to find the nearest perfect square and the nearest power of 2 of every array element whose occurrence is 1 ; Stores frequency of array elements ; Traverse the array and update frequency of current array element ; Traverse the map freq ; If the frequency is 1 ; Find nearest perfect square ; Print the nearest power of 2 ; If the any does not contain any non - repeating elements ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
int perfectSquare(int num) {
  int sr = sqrt(num);
  int a = sr * sr;
  int b = (sr + 1) * (sr + 1);
  if ((num - a) < (b - num)) {
    return a;
  } else {
    return b;
  }
}
int powerOfTwo(int num) {
  int lg = log2(num);
  int p = pow(2, lg);
  return p;
}
void uniqueElement(int arr[], int N) {
  bool ans = true;
  unordered_map<int, int> freq;
  for (int i = 0; i < N; i++) {
    freq[arr[i]]++;
  }
  for (auto el : freq) {
    if (el.second == 1) {
      ans = false;
      int ps = perfectSquare(el.first);
      cout << powerOfTwo(ps) << ' ';
    }
  }
  if (ans)
    cout << ""-1"";
}
int main() {
  int arr[] = {4, 11, 4, 3, 4};
  int N = sizeof(arr) / sizeof(arr[0]);
  uniqueElement(arr, N);
  return 0;
}",Nearest power of 2 of nearest perfect squares of non.
707,Partition array into two subarrays with every element in the right subarray strictly greater than every element in left subarray | C ++ program of the above approach ; Function to partition the array into two non - empty subarrays which satisfies the given condition ; Stores the suffix Min array ; Stores the Minimum of a suffix ; Traverse the array in reverse ; Update Minimum ; Store the Minimum ; Stores the Maximum value of a prefix ; Stores the index of the partition ; Update Max ; If Max is less than Min [ i + 1 ] ; Store the index of partition ; break ; If ind is not - 1 ; Print the first subarray ; Print the second subarray ; Otherwise ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
void partitionArray(int *a, int n) {
  int *Min = new int[n];
  int Mini = INT_MAX;
  for (int i = n - 1; i >= 0; i--) {
    Mini = min(Mini, a[i]);
    Min[i] = Mini;
  }
  int Maxi = INT_MIN;
  int ind = -1;
  for (int i = 0; i < n - 1; i++) {
    Maxi = max(Maxi, a[i]);
    if (Maxi < Min[i + 1]) {
      ind = i;
      break;
    }
  }
  if (ind != -1) {
    for (int i = 0; i <= ind; i++)
      cout << a[i] << "" "";
    cout << endl;
    for (int i = ind + 1; i < n; i++)
      cout << a[i] << "" "";
  } else
    cout << ""Impossible"";
}
int main() {
  int arr[] = {5, 3, 2, 7, 9};
  int N = 5;
  partitionArray(arr, N);
  return 0;
}",Partition array into two subarrays with every element in the right subarray strictly greater than every element in left subarray.
708,"Check if a number can be represented as sum of K positive integers out of which at least K | C ++ program for the above approach ; Function to count all prime factors of a given number ; Count the number of 2 s that divides n ; Since n is odd at this point , skip one element ; While i divides n , count i and divide n ; If n is a prime number greater than 2 ; Function to find the sum of first n nearly prime numbers ; Store the required sum ; Add this number if it is satisfies the condition ; Increment count of nearly prime numbers ; Function to check if N can be represented as sum of K different positive integers out of which at least K - 1 of them are nearly prime ; Store the sum of first K - 1 nearly prime numbers ; If sum is greater than or equal to n ; Otherwise , print Yes ; Driver Code","#include <bits/stdc++.h>
using namespace std;
int countPrimeFactors(int n) {
  int count = 0;
  while (n % 2 == 0) {
    n = n / 2;
    count++;
  }
  for (int i = 3; i <= sqrt(n); i = i + 2) {
    while (n % i == 0) {
      n = n / i;
      count++;
    }
  }
  if (n > 2)
    count++;
  return (count);
}
int findSum(int n) {
  int sum = 0;
  for (int i = 1, num = 2; i <= n; num++) {
    if (countPrimeFactors(num) == 2) {
      sum += num;
      i++;
    }
  }
  return sum;
}
void check(int n, int k) {
  int s = findSum(k - 1);
  if (s >= n)
    cout << ""No"";
  else
    cout << ""Yes"";
}
int main() {
  int n = 100, k = 6;
  check(n, k);
  return 0;
}",Check if a number can be represented as sum of K positive integers out of which at least K.
709,"Count ways to represent an integer as an exponent | C ++ program for the above approach ; Function to calculate GCD of a and b using Euclidean Algorithm ; Iterate until b is non - zero ; Return the GCD ; Function to count the number of ways N can be expressed as x ^ y ; Base Case ; Stores the gcd of powers ; Calculate the degree of 2 in N ; Calculate the degree of prime numbers in N ; Calculate the degree of prime ' i ' in N ; If N is a prime , g becomes 1. ; Stores the number of ways to represent N as x ^ y ; Find the number of Factors of g ; Update the count of ways ; Iterate to find rest of the prime numbers ; Find the power of i ; Update the count of ways ; If g is prime ; Return the total number of ways ; Driver Code","#include <bits/stdc++.h>
using namespace std;
long long int gcd(long long int a, long long int b) {
  while (b > 0) {
    long long int rem = a % b;
    a = b;
    b = rem;
  }
  return a;
}
int countNumberOfWays(long long int n) {
  if (n == 1)
    return -1;
  long long int g = 0;
  int power = 0;
  while (n % 2 == 0) {
    power++;
    n /= 2;
  }
  g = gcd(g, power);
  for (int i = 3; i <= sqrt(n); i += 2) {
    power = 0;
    while (n % i == 0) {
      power++;
      n /= i;
    }
    g = gcd(g, power);
  }
  if (n > 2)
    g = gcd(g, 1);
  int ways = 1;
  power = 0;
  while (g % 2 == 0) {
    g /= 2;
    power++;
  }
  ways *= (power + 1);
  for (int i = 3; i <= sqrt(g); i += 2) {
    power = 0;
    while (g % i == 0) {
      power++;
      g /= i;
    }
    ways *= (power + 1);
  }
  if (g > 2)
    ways *= 2;
  return ways;
}
int main() {
  int N = 64;
  cout << countNumberOfWays(N);
  return 0;
}",Count ways to represent an integer as an exponent.
710,"Highest power of 2 less than or equal to given Integer | C ++ implementation of the above approach ; Function to return the lowest power of 2 close to given positive number ; Floor function is used to determine the value close to the number ; Function to return the lowest power of 2 close to given negative number ; Ceil function is used for negative numbers as - 1 > - 4. It would be opposite to positive numbers where 1 < 4 ; Function to find the highest power of 2 ; To check if the given number is positive or negative ; If the number is negative , then the ceil of the positive number is calculated and negative sign is added ; Driver code","#include <bits/stdc++.h>
using namespace std;
int powOfPositive(int n) {
  int pos = floor(log2(n));
  return pow(2, pos);
}
int powOfNegative(int n) {
  int pos = ceil(log2(n));
  return (-1 * pow(2, pos));
}
void highestPowerOf2(int n) {
  if (n > 0) {
    cout << powOfPositive(n);
  } else {
    n = -n;
    cout << powOfNegative(n);
  }
}
int main() {
  int n = -24;
  highestPowerOf2(n);
  return 0;
}",Highest power of 2 less than or equal to given Integer.
711,Number of cards needed build a House of Cards of a given level N | C ++ implementation of the above approach ; Function to find number of cards needed ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
int noOfCards(int n) { return n * (3 * n + 1) / 2; }
int main() {
  int n = 3;
  cout << noOfCards(n) << "", "";
  return 0;
}",Number of cards needed build a House of Cards of a given level N.
712,Find smallest possible Number from a given large Number with same count of digits | C ++ implementation of the above approach ; Function for finding the smallest possible number after swapping the digits any number of times ; Variable to store the final answer ; Array to store the count of occurrence of each digit ; Loop to calculate the number of occurrences of every digit ; Loop to get smallest number ; Returning the answer ; Driver code,"#include <iostream>
using namespace std;
string smallestPoss(string s, int n) {
  string ans = """";
  int arr[10] = {0};
  for (int i = 0; i < n; i++) {
    arr[s[i] - 48]++;
  }
  for (int i = 0; i < 10; i++) {
    for (int j = 0; j < arr[i]; j++)
      ans = ans + to_string(i);
  }
  return ans;
}
int main() {
  int N = 15;
  string K = ""325343273113434"";
  cout << smallestPoss(K, N);
  return 0;
}",Find smallest possible Number from a given large Number with same count of digits.
713,Count the subarray with sum strictly greater than the sum of remaining elements | C ++ implementation of the above approach ; Function to count the number of sub - arrays with sum strictly greater than the remaining elements of array ; For loop for beginning point of a subarray ; For loop for ending point of the subarray ; Initialise subarray_sum and remaining_sum to 0 ; For loop to calculate the sum of generated subarray ; For loop to calculate the sum remaining array element ; Checking for condition when subarray sum is strictly greater than remaining sum of array element ; Driver code,"#include <bits/stdc++.h>
using namespace std;
int Count_subarray(int arr[], int n) {
  int subarray_sum, remaining_sum, count = 0;
  for (int i = 0; i < n; i++) {
    for (int j = i; j < n; j++) {
      subarray_sum = 0;
      remaining_sum = 0;
      for (int k = i; k <= j; k++) {
        subarray_sum += arr[k];
      }
      for (int l = 0; l < i; l++) {
        remaining_sum += arr[l];
      }
      for (int l = j + 1; l < n; l++) {
        remaining_sum += arr[l];
      }
      if (subarray_sum > remaining_sum) {
        count += 1;
      }
    }
  }
  return count;
}
int main() {
  int arr[] = {10, 9, 12, 6};
  int n = sizeof(arr) / sizeof(arr[0]);
  cout << Count_subarray(arr, n);
  return 0;
}",Count the subarray with sum strictly greater than the sum of remaining elements.
714,Count the subarray with sum strictly greater than the sum of remaining elements | C ++ implementation of the above approach ; Calculating total sum of given array ; For loop for beginning point of a subarray ; initialise subarray_sum to 0 ; For loop for calculating subarray_sum and remaining_sum ; Calculating subarray_sum and corresponding remaining_sum ; Checking for the condition when subarray sum is strictly greater than the remaining sum of the array element ; Driver code,"#include <bits/stdc++.h>
using namespace std;
int Count_subarray(int arr[], int n) {
  int total_sum = 0, subarray_sum, remaining_sum, count = 0;
  for (int i = 0; i < n; i++) {
    total_sum += arr[i];
  }
  for (int i = 0; i < n; i++) {
    subarray_sum = 0;
    for (int j = i; j < n; j++) {
      subarray_sum += arr[j];
      remaining_sum = total_sum - subarray_sum;
      if (subarray_sum > remaining_sum) {
        count += 1;
      }
    }
  }
  return count;
}
int main() {
  int arr[] = {10, 9, 12, 6};
  int n = sizeof(arr) / sizeof(arr[0]);
  cout << Count_subarray(arr, n);
  return 0;
}",Count the subarray with sum strictly greater than the sum of remaining elements.
715,Remove one element to get maximum XOR | C ++ implementation of the approach ; Function to return the maximized XOR after removing an element from the array ; Find XOR of the complete array ; To store the final answer ; Iterating through the array to find the final answer ; Return the final answer ; Driver code,"#include <bits/stdc++.h>
using namespace std;
int maxXOR(int *arr, int n) {
  int xorArr = 0;
  for (int i = 0; i < n; i++)
    xorArr ^= arr[i];
  int ans = 0;
  for (int i = 0; i < n; i++)
    ans = max(ans, (xorArr ^ arr[i]));
  return ans;
}
int main() {
  int arr[] = {1, 1, 3};
  int n = sizeof(arr) / sizeof(int);
  cout << maxXOR(arr, n);
  return 0;
}",Remove one element to get maximum XOR.
716,"Count of numbers from the range [ L , R ] which contains at least one digit that divides K | C ++ implementation of the approach ; Function that returns true if num contains at least one digit that divides k ; Get the last digit ; If the digit is non - zero and it divides k ; Remove the last digit ; There is no digit in num that divides k ; Function to return the required count of elements from the given range which contain at least one digit that divides k ; To store the result ; For every number from the range ; If any digit of the current number divides k ; Driver code","#include <bits/stdc++.h>
using namespace std;
bool digitDividesK(int num, int k) {
  while (num) {
    int d = num % 10;
    if (d != 0 and k % d == 0)
      return true;
    num = num / 10;
  }
  return false;
}
int findCount(int l, int r, int k) {
  int count = 0;
  for (int i = l; i <= r; i++) {
    if (digitDividesK(i, k))
      count++;
  }
  return count;
}
int main() {
  int l = 20, r = 35;
  int k = 45;
  cout << findCount(l, r, k);
  return 0;
}","Count of numbers from the range [ L , R ] which contains at least one digit that divides K."
717,Check if a given number is factorial of any number | C ++ implementation for the above approach ; Function to check if the given number is a factorial of any number ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
bool isFactorial(int n) {
  for (int i = 1;; i++) {
    if (n % i == 0) {
      n /= i;
    } else {
      break;
    }
  }
  if (n == 1) {
    return true;
  } else {
    return false;
  }
}
int main() {
  int n = 24;
  bool ans = isFactorial(n);
  if (ans == 1) {
    cout << ""Yes\n"";
  } else {
    cout << ""No\n"";
  }
  return 0;
}",Check if a given number is factorial of any number.
718,Remove an element to minimize the LCM of the given array | C ++ implementation of the above approach ; Function to return the LCM of two numbers ; Function to return the minimum LCM after removing a single element from the given array ; Prefix and Suffix arrays ; Single state dynamic programming relation for storing LCM of first i elements from the left in Prefix [ i ] ; Initializing Suffix array ; Single state dynamic programming relation for storing LCM of all the elements having index greater than or equal to i in Suffix [ i ] ; If first or last element of the array has to be removed ; If any other element is replaced ; Return the minimum LCM ; Driver code,"#include <bits/stdc++.h>
using namespace std;
int lcm(int a, int b) {
  int GCD = __gcd(a, b);
  return (a * b) / GCD;
}
int MinLCM(int a[], int n) {
  int Prefix[n + 2];
  int Suffix[n + 2];
  Prefix[1] = a[0];
  for (int i = 2; i <= n; i += 1) {
    Prefix[i] = lcm(Prefix[i - 1], a[i - 1]);
  }
  Suffix[n] = a[n - 1];
  for (int i = n - 1; i >= 1; i -= 1) {
    Suffix[i] = lcm(Suffix[i + 1], a[i - 1]);
  }
  int ans = min(Suffix[2], Prefix[n - 1]);
  for (int i = 2; i < n; i += 1) {
    ans = min(ans, lcm(Prefix[i - 1], Suffix[i + 1]));
  }
  return ans;
}
int main() {
  int a[] = {5, 15, 9, 36};
  int n = sizeof(a) / sizeof(a[0]);
  cout << MinLCM(a, n);
  return 0;
}",Remove an element to minimize the LCM of the given array.
719,Number of coloured 0 's in an N | C ++ implementation of the approach ; Function to return the count of coloured 0 s in an n - level hexagon ; Driver code,"#include <bits/stdc++.h>
using namespace std;
int count(int n) { return n * (3 * n - 1) / 2; }
int main() {
  int n = 3;
  cout << count(n);
  return 0;
}",Number of coloured 0 's in an N.
720,Minimum value to be assigned to the elements so that sum becomes greater than initial sum | C ++ implementation of the approach ; Function to return the minimum required value ; Find the sum of the array elements ; Return the required value ; Driver code,"#include <bits/stdc++.h>
using namespace std;
int findMinValue(int arr[], int n) {
  long sum = 0;
  for (int i = 0; i < n; i++)
    sum += arr[i];
  return ((sum / n) + 1);
}
int main() {
  int arr[] = {4, 2, 1, 10, 6};
  int n = sizeof(arr) / sizeof(int);
  cout << findMinValue(arr, n);
  return 0;
}",Minimum value to be assigned to the elements so that sum becomes greater than initial sum.
721,Color all boxes in line such that every M consecutive boxes are unique | C ++ implementation of the approach ; Function to return ( m ! % MOD ) ; Driver code,"#include <bits/stdc++.h>
using namespace std;
#defineMOD1000000007 int modFact(int n, int m) {
  int result = 1;
  for (int i = 1; i <= m; i++)
    result = (result * i) % MOD;
  return result;
}
int main() {
  int n = 3, m = 2;
  cout << modFact(n, m);
  return 0;
}",Color all boxes in line such that every M consecutive boxes are unique.
722,Sum of squares of all Subsets of given Array | C ++ implementation of the approach ; Function to return ( 2 ^ P % mod ) ; Function to return the sum of squares of subsets ; Sqauaring the elements and adding it to ans ; Driver code,"#include <bits/stdc++.h>
using namespace std;
const int mod = 1e9 + 7;
long long power(int p) {
  long long res = 1;
  for (int i = 1; i <= p; ++i) {
    res *= 2;
    res %= mod;
  }
  return res % mod;
}
long long subset_square_sum(vector<int> &A) {
  int n = (int)A.size();
  long long ans = 0;
  for (int i : A) {
    ans += (1 LL * i * i) % mod;
    ans %= mod;
  }
  return (1 LL * ans * power(n - 1)) % mod;
}
int main() {
  vector<int> A = {3, 7};
  cout << subset_square_sum(A);
  return 0;
}",Sum of squares of all Subsets of given Array.
723,Find the number of pairs such that their gcd is equals to 1 | CPP program to find the number of pairs such that gcd equals to 1 ; Function to calculate least prime factor of each number ; If it is a prime number ; For all multiples which are not visited yet . ; Function to find the value of Mobius function for all the numbers from 1 to n ; If number is one ; If number has a squared prime factor ; Multiply - 1 with the previous number ; Function to find the number of pairs such that gcd equals to 1 ; To store maximum number ; To store frequency of each number ; Find frequency and maximum number ; To store number of pairs with gcd equals to 1 ; Traverse through the all possible elements ; Return the number of pairs ; Driver code ; Function call,"#include <bits/stdc++.h>
using namespace std;
#defineN100050 int lpf[N], mobius[N];
void least_prime_factor() {
  for (int i = 2; i < N; i++)
    if (!lpf[i])
      for (int j = i; j < N; j += i)
        if (!lpf[j])
          lpf[j] = i;
}
void Mobius() {
  for (int i = 1; i < N; i++) {
    if (i == 1)
      mobius[i] = 1;
    else {
      if (lpf[i / lpf[i]] == lpf[i])
        mobius[i] = 0;
      else
        mobius[i] = -1 * mobius[i / lpf[i]];
    }
  }
}
int gcd_pairs(int a[], int n) {
  int maxi = 0;
  int fre[N] = {0};
  for (int i = 0; i < n; i++) {
    fre[a[i]]++;
    maxi = max(a[i], maxi);
  }
  least_prime_factor();
  Mobius();
  int ans = 0;
  for (int i = 1; i <= maxi; i++) {
    if (!mobius[i])
      continue;
    int temp = 0;
    for (int j = i; j <= maxi; j += i)
      temp += fre[j];
    ans += temp * (temp - 1) / 2 * mobius[i];
  }
  return ans;
}
int main() {
  int a[] = {1, 2, 3, 4, 5, 6};
  int n = sizeof(a) / sizeof(a[0]);
  cout << gcd_pairs(a, n);
  return 0;
}",Find the number of pairs such that their gcd is equals to 1.
724,Comparing X ^ Y and Y ^ X for very large values of X and Y | C ++ implementation of the approach ; Function to compare x ^ y and y ^ x ; Storing values OF x ^ y AND y ^ x ; Comparing values ; Driver code,"#include <bits/stdc++.h>
using namespace std;
void compareVal(int x, int y) {
  long double a = y * log(x);
  long double b = x * log(y);
  if (a > b)
    cout << x << ""^"" << y << "" > "" << y << ""^"" << x;
  else if (a < b)
    cout << x << ""^"" << y << "" < "" << y << ""^"" << x;
  else if (a == b)
    cout << x << ""^"" << y << "" = "" << y << ""^"" << x;
}
int main() {
  long double x = 4, y = 5;
  compareVal(x, y);
  return 0;
}",Comparing X ^ Y and Y ^ X for very large values of X and Y.
725,"Euler zigzag numbers ( Alternating Permutation ) | CPP program to find zigzag sequence ; Function to print first n zigzag numbers ; To store factorial and n 'th zig zag number ; Initialize factorial upto n ; Set first two zig zag numbers ; Print first two zig zag number ; Print the rest zig zag numbers ; Binomial ( n , k ) * a ( k ) * a ( n - k ) ; Store the value ; Print the number ; Driver code ; Function call","#include <bits/stdc++.h>
using namespace std;
void ZigZag(int n) {
  long long fact[n + 1], zig[n + 1] = {0};
  fact[0] = 1;
  for (int i = 1; i <= n; i++)
    fact[i] = fact[i - 1] * i;
  zig[0] = 1;
  zig[1] = 1;
  cout << ""zig zag numbers: "";
  cout << zig[0] << "" "" << zig[1] << "" "";
  for (int i = 2; i < n; i++) {
    long long sum = 0;
    for (int k = 0; k <= i - 1; k++) {
      sum +=
          (fact[i - 1] / (fact[i - 1 - k] * fact[k])) * zig[k] * zig[i - 1 - k];
    }
    zig[i] = sum / 2;
    cout << sum / 2 << "" "";
  }
}
int main() {
  int n = 10;
  ZigZag(n);
  return 0;
}",Euler zigzag numbers ( Alternating Permutation ).
726,Gijswijt 's Sequence | C ++ program to demonstrate Gijswijt 's sequence ; if the sequence is a ( 1 ) a ( 2 ) a ( 3 ) . . a ( n - 1 ) check if the sequence can be represented as x * ( y ^ k ) find the largest value of k ; count ; pattern of elements of size i from the end of sequence ; count ; extract the pattern in a reverse order ; check how many times the pattern is repeated ; if the element dosent match ; if the end of pattern is reached set value of k = 0 and increase the count ; return the max count ; print first n terms of Gijswijt 's sequence ; set the count ; stoes the element ; print the first n terms of the sequence ; push the element ; find the count for next number ; Driver code,"#include <bits/stdc++.h>
using namespace std;
int find_count(vector<int> ele) {
  int count = 0;
  for (int i = 0; i < ele.size(); i++) {
    vector<int> p;
    int c = 0;
    for (int j = ele.size() - 1; j >= (ele.size() - 1 - i) && j >= 0; j--)
      p.push_back(ele[j]);
    int j = ele.size() - 1, k = 0;
    while (j >= 0) {
      if (ele[j] != p[k])
        break;
      j--;
      k++;
      if (k == p.size()) {
        c++;
        k = 0;
      }
    }
    count = max(count, c);
  }
  return count;
}
void solve(int n) {
  int count = 1;
  vector<int> ele;
  for (int i = 0; i < n; i++) {
    cout << count << "", "";
    ele.push_back(count);
    count = find_count(ele);
  }
}
int main() {
  int n = 10;
  solve(n);
  return 0;
}",Gijswijt 's Sequence.
727,"Wedderburn – Etherington number | CPP program to find N terms of the sequence ; Stores the Wedderburn Etherington numbers ; Function to return the nth Wedderburn Etherington numbers ; Base case ; If n is even n = 2 x ; get x ; a ( 2 x ) = a ( 1 ) a ( 2 x - 1 ) + a ( 2 ) a ( 2 x - 2 ) + ... + a ( x - 1 ) a ( x + 1 ) ; a ( x ) ( a ( x ) + 1 ) / 2 ; Store the ans ; Return the required answer ; If n is odd ; a ( 2 x - 1 ) = a ( 1 ) a ( 2 x - 2 ) + a ( 2 ) a ( 2 x - 3 ) + ... + a ( x - 1 ) a ( x ) , ; Store the ans ; Return the required answer ; Function to print first N Wedderburn Etherington numbers ; Store first 3 numbers ; Print N terms ; Driver code ; function call","#include <bits/stdc++.h>
using namespace std;
map<int, int> store;
int Wedderburn(int n) {
  if (n <= 2)
    return store[n];
  else if (n % 2 == 0) {
    int x = n / 2, ans = 0;
    for (int i = 1; i < x; i++) {
      ans += store[i] * store[n - i];
    }
    ans += (store[x] * (store[x] + 1)) / 2;
    store[n] = ans;
    return ans;
  } else {
    int x = (n + 1) / 2, ans = 0;
    for (int i = 1; i < x; i++) {
      ans += store[i] * store[n - i];
    }
    store[n] = ans;
    return ans;
  }
}
void Wedderburn_Etherington(int n) {
  store[0] = 0;
  store[1] = 1;
  store[2] = 1;
  for (int i = 0; i < n; i++) {
    cout << Wedderburn(i);
    if (i != n - 1)
      cout << "", "";
  }
}
int main() {
  int n = 10;
  Wedderburn_Etherington(n);
  return 0;
}",Wedderburn – Etherington number.
728,Maximum value after merging all elements in the array | CPP program to maximum value after merging all elements in the array ; Function to maximum value after merging all elements in the array ; To check if positive and negative elements present or not ; Check for positive integer ; Check for negative integer ; If both positive and negative elements are present ; To store maximum value possible ; To find minimum value ; Remove minimum element ; Replace with absolute values ; To find minimum value ; Remove minimum element ; Return the required sum ; Driver code ; Function call,"#include <bits/stdc++.h>
using namespace std;
int Max_sum(int a[], int n) {
  int pos = 0, neg = 0;
  for (int i = 0; i < n; i++) {
    if (a[i] > 0)
      pos = 1;
    else if (a[i] < 0)
      neg = 1;
    if (pos == 1 and neg == 1)
      break;
  }
  int sum = 0;
  if (pos == 1 and neg == 1) {
    for (int i = 0; i < n; i++)
      sum += abs(a[i]);
  } else if (pos == 1) {
    int mini = a[0];
    sum = a[0];
    for (int i = 1; i < n; i++) {
      mini = min(mini, a[i]);
      sum += a[i];
    }
    sum -= 2 * mini;
  } else if (neg == 1) {
    for (int i = 0; i < n; i++)
      a[i] = abs(a[i]);
    int mini = a[0];
    sum = a[0];
    for (int i = 1; i < n; i++) {
      mini = min(mini, a[i]);
      sum += a[i];
    }
    sum -= 2 * mini;
  }
  return sum;
}
int main() {
  int a[] = {1, 3, 5, -2, -6};
  int n = sizeof(a) / sizeof(a[0]);
  cout << Max_sum(a, n);
  return 0;
}",Maximum value after merging all elements in the array.
729,Decimal to Binary using recursion and without using power operator | C ++ implementation of the approach ; Recursive function to convert n to its binary equivalent ; Base case ; Recursive call ; Driver code,"#include <bits/stdc++.h>
using namespace std;
void decimalToBinary(int n) {
  if (n == 0) {
    cout << ""0"";
    return;
  }
  decimalToBinary(n / 2);
  cout << n % 2;
}
int main() {
  int n = 13;
  decimalToBinary(n);
  return 0;
}",Decimal to Binary using recursion and without using power operator.
730,"Find minimum possible values of A , B and C when two of the ( A + B ) , ( A + C ) and ( B + C ) are given | C ++ implementation of the approach ; Function to find A , B and C ; Keep minimum number in x ; Find the numbers ; Driver code ; Function call","#include <bits/stdc++.h>
using namespace std;
void MinimumValue(int x, int y) {
  if (x > y)
    swap(x, y);
  int a = 1;
  int b = x - 1;
  int c = y - b;
  cout << a << "" "" << b << "" "" << c;
}
int main() {
  int x = 123, y = 13;
  MinimumValue(x, y);
  return 0;
}","Find minimum possible values of A , B and C when two of the ( A + B ) , ( A + C ) and ( B + C ) are given."
731,Check whether it is possible to convert A into B | C ++ implementation of the approach ; Function that returns true if A can be converted to B with the given operations ; If the current number ends with 1 ; If the current number is divisible by 2 ; If above two conditions fail ; If it is possible to convert A to B ; Driver code,"#include <bits/stdc++.h>
using namespace std;
bool canConvert(int a, int b) {
  while (b > a) {
    if (b % 10 == 1) {
      b /= 10;
      continue;
    }
    if (b % 2 == 0) {
      b /= 2;
      continue;
    }
    return false;
  }
  if (b == a)
    return true;
  return false;
}
int main() {
  int A = 2, B = 82;
  if (canConvert(A, B))
    cout << ""Yes"";
  else
    cout << ""No"";
  return 0;
}",Check whether it is possible to convert A into B.
732,Count Distinct Rectangles in N * N Chessboard | C ++ code to count distinct rectangle in a chessboard ; Function to return the count of distinct rectangles ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
int count(int N) {
  int a = 0;
  a = (N * (N + 1)) / 2;
  return a;
}
int main() {
  int N = 4;
  cout << count(N);
}",Count Distinct Rectangles in N * N Chessboard.
733,Total number of days taken to complete the task if after certain days one person leaves | C ++ implementation of the approach ; Function to return the number of days required ; Driver code,"#include <bits/stdc++.h>
using namespace std;
int numberOfDays(int a, int b, int n) {
  int Days = b * (n + a) / (a + b);
  return Days;
}
int main() {
  int a = 10, b = 20, n = 5;
  cout << numberOfDays(a, b, n);
  return 0;
}",Total number of days taken to complete the task if after certain days one person leaves.
734,Find average of two numbers using bit operation | C ++ implementation of the approach ; Function to return the average of x and y using bit operations ; Calculate the average Floor value of ( x + y ) / 2 ; Driver code,"#include <bits/stdc++.h>
using namespace std;
int getAverage(int x, int y) {
  int avg = (x & y) + ((x ^ y) >> 1);
  return avg;
}
int main() {
  int x = 10, y = 9;
  cout << getAverage(x, y);
  return 0;
}",Find average of two numbers using bit operation.
735,Smallest index such that there are no 0 or 1 to its right | C ++ program to implement the above approach ; Function to find the smallest index such that there are no 0 or 1 to its right ; Initially ; Traverse in the array ; Check if array element is 1 ; a [ i ] = 0 ; Return minimum of both ; Driver code,"#include <bits/stdc++.h>
using namespace std;
int smallestIndex(int a[], int n) {
  int right1 = 0, right0 = 0;
  for (int i = 0; i < n; i++) {
    if (a[i] == 1)
      right1 = i;
    else
      right0 = i;
  }
  return min(right1, right0);
}
int main() {
  int a[] = {1, 1, 1, 0, 0, 1, 0, 1, 1};
  int n = sizeof(a) / sizeof(a[0]);
  cout << smallestIndex(a, n);
  return 0;
}",Smallest index such that there are no 0 or 1 to its right.
736,"Total position where king can reach on a chessboard in exactly M moves | Set 2 | C ++ implementation of the approach ; Function to return the count of squares that can be visited by king in m moves ; To store the count of squares ; Check all squares of the chessboard ; Check if square ( i , j ) is at a distance <= m units from king 's current position ; Return count of squares ; Driver code","#include <bits/stdc++.h>
using namespace std;
int countSquares(int r, int c, int m) {
  int squares = 0;
  for (int i = 1; i <= 8; i++) {
    for (int j = 1; j <= 8; j++) {
      if (max(abs(i - r), abs(j - c)) <= m)
        squares++;
    }
  }
  return squares;
}
int main() {
  int r = 4, c = 4, m = 1;
  cout << countSquares(r, c, m) << endl;
  return 0;
}",Total position where king can reach on a chessboard in exactly M moves.
737,Number of quadruples where the first three terms are in AP and last three terms are in GP | C ++ implementation of the approach ; Function to return the count of quadruples ; Hash table to count the number of occurrences ; Traverse and increment the count ; Run two nested loop for second and third element ; If they are same ; Initially decrease the count ; Find the first element using common difference ; Find the fourth element using GP y ^ 2 = x * z property ; If it is an integer ; If not equal ; Same elements ; Later increase the value for future calculations ; Driver code,"#include <bits/stdc++.h>
using namespace std;
int countQuadruples(int a[], int n) {
  unordered_map<int, int> mpp;
  for (int i = 0; i < n; i++)
    mpp[a[i]]++;
  int count = 0;
  for (int j = 0; j < n; j++) {
    for (int k = 0; k < n; k++) {
      if (j == k)
        continue;
      mpp[a[j]]--;
      mpp[a[k]]--;
      int first = a[j] - (a[k] - a[j]);
      int fourth = (a[k] * a[k]) / a[j];
      if ((a[k] * a[k]) % a[j] == 0) {
        if (a[j] != a[k])
          count += mpp[first] * mpp[fourth];
        else
          count += mpp[first] * (mpp[fourth] - 1);
      }
      mpp[a[j]]++;
      mpp[a[k]]++;
    }
  }
  return count;
}
int main() {
  int a[] = {2, 6, 4, 9, 2};
  int n = sizeof(a) / sizeof(a[0]);
  cout << countQuadruples(a, n);
  return 0;
}",Number of quadruples where the first three terms are in AP and last three terms are in GP.
738,Numbers in a Range with given Digital Root | C ++ implementation of the approach ; Function to return the count of required numbers ; Count of numbers present in given range ; Number of groups of 9 elements starting from L ; Left over elements not covered in factor 9 ; One Number in each group of 9 ; To check if any number in rem satisfy the property ; Driver code,"#include <bits/stdc++.h>
#definelllonglongint
using namespace std;
int countNumbers(int L, int R, int K) {
  if (K == 9)
    K = 0;
  int totalnumbers = R - L + 1;
  int factor9 = totalnumbers / 9;
  int rem = totalnumbers % 9;
  int ans = factor9;
  for (int i = R; i > R - rem; i--) {
    int rem1 = i % 9;
    if (rem1 == K)
      ans++;
  }
  return ans;
}
int main() {
  int L = 10;
  int R = 22;
  int K = 3;
  cout << countNumbers(L, R, K);
  return 0;
}",Numbers in a Range with given Digital Root.
739,Sum of even values and update queries on an array | C ++ implementation of the approach ; Function to return the sum of even elements after updating value at given index ; Add given value to A [ index ] ; To store the sum of even elements ; If current element is even ; Function to print the result for every query ; Resultant vector that stores the result for every query ; Get sum of even elements after updating value at given index ; Store sum for each query ; Print the result for every query ; Driver code,"#include <bits/stdc++.h>
using namespace std;
int EvenSum(vector<int> &A, int index, int value) {
  A[index] = A[index] + value;
  int sum = 0;
  for (int i = 0; i < A.size(); i++)
    if (A[i] % 2 == 0)
      sum = sum + A[i];
  return sum;
}
void BalanceArray(vector<int> &A, vector<vector<int>> &Q) {
  vector<int> ANS;
  int i, sum;
  for (i = 0; i < Q.size(); i++) {
    int index = Q[i][0];
    int value = Q[i][1];
    sum = EvenSum(A, index, value);
    ANS.push_back(sum);
  }
  for (i = 0; i < ANS.size(); i++)
    cout << ANS[i] << "" "";
}
int main() {
  vector<int> A = {1, 2, 3, 4};
  vector<vector<int>> Q = {{0, 1}, {1, -3}, {0, -4}, {3, 2}};
  BalanceArray(A, Q);
  return 0;
}",Sum of even values and update queries on an array.
740,Sum of even values and update queries on an array | C ++ implementation of the approach ; Function to print the result for every query ; If current element is even ; If element is even then remove it from sum ; If the value becomes even after updating ; Store sum for each query ; Print the result for every query ; Driver code,"#include <bits/stdc++.h>
using namespace std;
void BalanceArray(vector<int> &A, vector<vector<int>> &Q) {
  vector<int> ANS;
  int i, sum = 0;
  for (i = 0; i < A.size(); i++)
    if (A[i] % 2 == 0)
      sum = sum + A[i];
  for (i = 0; i < Q.size(); i++) {
    int index = Q[i][0];
    int value = Q[i][1];
    if (A[index] % 2 == 0)
      sum = sum - A[index];
    A[index] = A[index] + value;
    if (A[index] % 2 == 0)
      sum = sum + A[index];
    ANS.push_back(sum);
  }
  for (i = 0; i < ANS.size(); i++)
    cout << ANS[i] << "" "";
}
int main() {
  vector<int> A = {1, 2, 3, 4};
  vector<vector<int>> Q = {{0, 1}, {1, -3}, {0, -4}, {3, 2}};
  BalanceArray(A, Q);
  return 0;
}",Sum of even values and update queries on an array.
741,Number of Hamiltonian cycle | C ++ program for implementation of the above program ; Function that calculates number of Hamiltonian cycle ; Calculating factorial ; Driver code,"#include <bits/stdc++.h>
using namespace std;
int Cycles(int N) {
  int fact = 1, result = 0;
  result = N - 1;
  int i = result;
  while (i > 0) {
    fact = fact * i;
    i--;
  }
  return fact / 2;
}
int main() {
  int N = 5;
  int Number = Cycles(N);
  cout << ""Hamiltonian cycles = "" << Number;
  return 0;
}",Number of Hamiltonian cycle.
742,Smallest integer greater than n such that it consists of digit m exactly k times | C ++ implementation of the approach ; Function that returns true if n contains digit m exactly k times ; Function to return the smallest integer > n with digit m occurring exactly k times ; Driver code,"#include <bits/stdc++.h>
using namespace std;
bool digitWell(int n, int m, int k) {
  int cnt = 0;
  while (n > 0) {
    if (n % 10 == m)
      ++cnt;
    n /= 10;
  }
  return cnt == k;
}
int findInt(int n, int m, int k) {
  int i = n + 1;
  while (true) {
    if (digitWell(i, m, k))
      return i;
    i++;
  }
}
int main() {
  int n = 111, m = 2, k = 2;
  cout << findInt(n, m, k);
  return 0;
}",Smallest integer greater than n such that it consists of digit m exactly k times.
743,Composite XOR and Coprime AND | C ++ implementation of the approach ; Function to return the count of odd numbers in the array ; Variable to count odd numbers ; Odd number ; Function to return the count of valid pairs ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
int countOdd(int arr[], int n) {
  int odd = 0;
  for (int i = 0; i < n; i++) {
    if (arr[i] % 2 == 1)
      odd++;
  }
  return odd;
}
int countValidPairs(int arr[], int n) {
  int odd = countOdd(arr, n);
  return (odd * (odd - 1)) / 2;
}
int main() {
  int arr[] = {1, 2, 3, 4, 5};
  int n = sizeof(arr) / sizeof(arr[0]);
  cout << countValidPairs(arr, n);
  return 0;
}",Composite XOR and Coprime AND.
744,Smallest perfect Cube divisible by all elements of an array | C ++ implementation of the approach ; Function to return the gcd of two numbers ; Function to return the lcm of all the elements of the array ; To calculate lcm of two numbers multiply them and divide the result by gcd of both the numbers ; Return the LCM of the array elements ; Function to return the smallest perfect cube divisible by all the elements of arr [ ] ; LCM of all the elements of arr [ ] ; If 2 divides lcm cnt number of times ; Check all the numbers that divide lcm ; Return the answer ; Driver code,"#include <bits/stdc++.h>
using namespace std;
#definelllonglongint ll gcd(ll a, ll b) {
  if (b == 0)
    return a;
  else
    return gcd(b, a % b);
}
ll lcmOfArray(int arr[], int n) {
  if (n < 1)
    return 0;
  ll lcm = arr[0];
  for (int i = 1; i < n; i++)
    lcm = (lcm * arr[i]) / gcd(lcm, arr[i]);
  return lcm;
}
int minPerfectCube(int arr[], int n) {
  ll minPerfectCube;
  ll lcm = lcmOfArray(arr, n);
  minPerfectCube = (long long)lcm;
  int cnt = 0;
  while (lcm > 1 && lcm % 2 == 0) {
    cnt++;
    lcm /= 2;
  }
  if (cnt % 3 == 2)
    minPerfectCube *= 2;
  else if (cnt % 3 == 1)
    minPerfectCube *= 4;
  int i = 3;
  while (lcm > 1) {
    cnt = 0;
    while (lcm % i == 0) {
      cnt++;
      lcm /= i;
    }
    if (cnt % 3 == 1)
      minPerfectCube *= i * i;
    else if (cnt % 3 == 2)
      minPerfectCube *= i;
    i += 2;
  }
  return minPerfectCube;
}
int main() {
  int arr[] = {10, 125, 14, 42, 100};
  int n = sizeof(arr) / sizeof(arr[0]);
  cout << minPerfectCube(arr, n);
  return 0;
}",Smallest perfect Cube divisible by all elements of an array.
745,Check if N is Strong Prime | C ++ program to check if given number is strong prime ; Utility function to check if a number is prime or not ; Corner cases ; This is checked so that we can skip middle five numbers in below loop ; Function that returns true if n is a strong prime ; If n is not a prime number or n is the first prime then return false ; Initialize previous_prime to n - 1 and next_prime to n + 1 ; Find next prime number ; Find previous prime number ; Arithmetic mean ; If n is a strong prime ; Driver code,"#include <bits/stdc++.h>
using namespace std;
bool isPrime(int n) {
  if (n <= 1)
    return false;
  if (n <= 3)
    return true;
  if (n % 2 == 0 n % 3 == 0)
    return false;
  for (int i = 5; i * i <= n; i = i + 6)
    if (n % i == 0 || n % (i + 2) == 0)
      return false;
  return true;
}
static bool isStrongPrime(int n) {
  if (!isPrime(n) n == 2)
    return false;
  int previous_prime = n - 1;
  int next_prime = n + 1;
  while (!isPrime(next_prime))
    next_prime++;
  while (!isPrime(previous_prime))
    previous_prime--;
  int mean = (previous_prime + next_prime) / 2;
  if (n > mean)
    return true;
  else
    return false;
}
int main() {
  int n = 11;
  if (isStrongPrime(n))
    cout << ""Yes"";
  else
    cout << ""No"";
  return 0;
}",Check if N is Strong Prime.
746,"Minimum removals in a number to be divisible by 10 power raised to K | CPP Program to count the number of digits that can be removed such that number is divisible by 10 ^ K ; function to return the required number of digits to be removed ; Converting the given number into string ; variable to store number of digits to be removed ; variable to denote if atleast one zero has been found ; zero found ; return size - 1 if K is not zero and atleast one zero is present , otherwise result ; Driver Code to test above function","#include <bits/stdc++.h>
using namespace std;
int countDigitsToBeRemoved(int N, int K) {
  string s = to_string(N);
  int res = 0;
  int f_zero = 0;
  for (int i = s.size() - 1; i >= 0; i--) {
    if (K == 0)
      return res;
    if (s[i] == '0') {
      f_zero = 1;
      K--;
    } else
      res++;
  }
  if (!K)
    return res;
  else if (f_zero)
    return s.size() - 1;
  return -1;
}
int main() {
  int N = 10904025, K = 2;
  cout << countDigitsToBeRemoved(N, K) << endl;
  N = 1000, K = 5;
  cout << countDigitsToBeRemoved(N, K) << endl;
  N = 23985, K = 2;
  cout << countDigitsToBeRemoved(N, K) << endl;
  return 0;
}",Minimum removals in a number to be divisible by 10 power raised to K.
747,"Program to find the sum of the series ( 1 / a + 2 / a ^ 2 + 3 / a ^ 3 + ... + n / a ^ n ) | C ++ program to find the sum of the given series ; Function to return the sum of the series ; variable to store the answer ; Math . pow ( x , y ) returns x ^ y ; Driver code ; Print the sum of the series","#include <iostream>
#include <math.h>
#include <stdio.h>
using namespace std;
float getSum(int a, int n) {
  float sum = 0;
  for (int i = 1; i <= n; ++i) {
    sum += (i / pow(a, i));
  }
  return sum;
}
int main() {
  int a = 3, n = 3;
  cout << (getSum(a, n));
  return 0;
}",Program to find the sum of the series ( 1 / a + 2 / a ^ 2 + 3 / a ^ 3 + ... + n / a ^ n ).
748,"Check if a number is an Unusual Number or not | C ++ Program to check Unusual number ; Utility function to find largest prime factor of a number ; Initialize the maximum prime factor variable with the lowest one ; Print the number of 2 s that divide n ; n >>= 1 ; equivalent to n /= 2 ; n must be odd at this point , thus skip the even numbers and iterate only for odd integers ; This condition is to handle the case when n is a prime number greater than 2 ; Function to check Unusual number ; Get the largest Prime Factor of the number ; Check if largest prime factor is greater than sqrt ( n ) ; Driver Code","#include <bits/stdc++.h>
using namespace std;
int largestPrimeFactor(int n) {
  int max = -1;
  while (n % 2 == 0) {
    max = 2;
  }
  for (int i = 3; i <= sqrt(n); i += 2) {
    while (n % i == 0) {
      max = i;
      n = n / i;
    }
  }
  if (n > 2)
    max = n;
  return max;
}
bool checkUnusual(int n) {
  int factor = largestPrimeFactor(n);
  if (factor > sqrt(n)) {
    return true;
  } else {
    return false;
  }
}
int main() {
  int n = 14;
  if (checkUnusual(n)) {
    cout << ""YES""
         << ""\n"";
  } else {
    cout << ""NO""
         << ""\n"";
  }
  return 0;
}",Check if a number is an Unusual Number or not.
749,Check if at least half array is reducible to zero by performing some operations | C ++ program to find whether half - array reducible to 0 ; Function to print the desired result after computation ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
void isHalfReducible(int arr[], int n, int m) {
  int frequencyHash[m + 1];
  int i;
  memset(frequencyHash, 0, sizeof(frequencyHash));
  for (i = 0; i < n; i++) {
    frequencyHash[arr[i] % (m + 1)]++;
  }
  for (i = 0; i <= m; i++) {
    if (frequencyHash[i] >= n / 2)
      break;
  }
  if (i <= m)
    cout << ""Yes"" << endl;
  else
    cout << ""No"" << endl;
}
int main() {
  int arr[] = {8, 16, 32, 3, 12};
  int n = sizeof(arr) / sizeof(arr[0]);
  int m = 7;
  isHalfReducible(arr, n, m);
  return 0;
}",Check if at least half array is reducible to zero by performing some operations.
750,"Check if the given number is Ore number or not | CPP program to check if the given number is Ore number ; Function that returns harmonic mean ; Note that this loop runs till square root ; If divisors are equal , store ' i ' ; else Otherwise store ' i ' and ' n / i ' both ; Utility function to calculate harmonic mean of the divisors ; Declare sum variables and initialize with zero . ; calculate denominator ; Calculate harmonic mean and return ; Function to check if a number is ore number ; Calculate Harmonic mean of divisors of n ; Check if harmonic mean is an integer or not ; Driver Code","#include <bits/stdc++.h>
using namespace std;
vector<int> arr;
void generateDivisors(int n) {
  for (int i = 1; i <= sqrt(n); i++) {
    if (n % i == 0) {
      if (n / i == i)
        arr.push_back(i);
      {
        arr.push_back(i);
        arr.push_back(n / i);
      }
    }
  }
}
double harmonicMean(int n) {
  generateDivisors(n);
  double sum = 0.0;
  int len = arr.size();
  for (int i = 0; i < len; i++)
    sum = sum + double(n / arr[i]);
  sum = double(sum / n);
  return double(arr.size() / sum);
}
bool isOreNumber(int n) {
  double mean = harmonicMean(n);
  if (mean - int(mean) == 0)
    return true;
  else
    return false;
}
int main() {
  int n = 28;
  if (isOreNumber(n))
    cout << ""YES"";
  else
    cout << ""NO"";
  return 0;
}",Check if the given number is Ore number or not.
751,"Check whether the given number is Euclid Number or not | CPP program to check Euclid Number ; Function to generate the Prime numbers and store their products ; Create a boolean array "" prime [ 0 . . n ] "" and initialize all entries it as true . A value in prime [ i ] will finally be false if i is Not a prime , else true . ; If prime [ p ] is not changed , then it is a prime ; Update all multiples of p ; store prefix product of prime numbers to unordered_set ' s ' ; update product by multiplying next prime ; insert ' produc + 1' to set ; Function to check the number for Euclid Number ; Check if number exist in unordered set or not If exist , return true ; Driver code ; Get the prime numbers ; Get n ; Check if n is Euclid Number ; Get n ; Check if n is Euclid Number","#include <bits/stdc++.h>
using namespace std;
#defineMAX10000 unordered_set < long long int> s;
void SieveOfEratosthenes() {
  bool prime[MAX];
  memset(prime, true, sizeof(prime));
  for (int p = 2; p * p < MAX; p++) {
    if (prime[p] == true) {
      for (int i = p * 2; i < MAX; i += p)
        prime[i] = false;
    }
  }
  long long int product = 1;
  for (int p = 2; p < MAX; p++) {
    if (prime[p]) {
      product = product * p;
      s.insert(product + 1);
    }
  }
}
bool isEuclid(long n) {
  if (s.find(n) != s.end())
    return true;
  else
    return false;
}
int main() {
  SieveOfEratosthenes();
  long n = 31;
  if (isEuclid(n))
    cout << ""YES\n"";
  else
    cout << ""NO\n"";
  n = 42;
  if (isEuclid(n))
    cout << ""YES\n"";
  else
    cout << ""NO\n"";
  return 0;
}",Check whether the given number is Euclid Number or not.
752,Check whether the given number is Wagstaff prime or not | CPP program to check if a number is Wagstaff prime or not ; Function to check if a number is prime or not ; Corner cases ; This is checked so that we can skip middle five numbers in below loop ; Utility function to check power of two ; Driver Program ; Check if number is prime and of the form ( 2 ^ q + 1 ) / 3,"#include <bits/stdc++.h>
using namespace std;
bool isPrime(int n) {
  if (n <= 1)
    return false;
  if (n <= 3)
    return true;
  if (n % 2 == 0 n % 3 == 0)
    return false;
  for (int i = 5; i * i <= n; i = i + 6) {
    if (n % i == 0 || n % (i + 2) == 0) {
      return false;
    }
  }
  return true;
}
bool isPowerOfTwo(int n) { return (n && !(n & (n - 1))); }
int main() {
  int n = 43;
  if (isPrime(n) && (isPowerOfTwo(n * 3 - 1))) {
    cout << ""YES\n"";
  } else {
    cout << ""NO\n"";
  }
  return 0;
}",Check whether the given number is Wagstaff prime or not.
753,Area of a square inscribed in a circle which is inscribed in a hexagon | C ++ Program to find the area of the square inscribed within the circle which in turn is inscribed in a hexagon ; Function to find the area of the square ; side of hexagon cannot be negative ; area of the square ; Driver code,"#include <bits/stdc++.h>
using namespace std;
float area(float a) {
  if (a < 0)
    return -1;
  float area = pow((a * sqrt(3)) / (sqrt(2)), 2);
  return area;
}
int main() {
  float a = 5;
  cout << area(a) << endl;
  return 0;
}",Area of a square inscribed in a circle which is inscribed in a hexagon.
754,"Program to find Nth term of series 1 , 6 , 17 , 34 , 56 , 86 , 121 , 162 , ... ... . | C ++ program to find the N - th term of the series : 1 , 6 , 17 , 34 , 56 , 86 , 121 , 162 , ... . . ; calculate Nth term of series ; Driver code","#include <iostream>
#include <math.h>
using namespace std;
int nthTerm(int n) { return 3 * pow(n, 2) - 4 * n + 2; }
int main() {
  int N = 4;
  cout << nthTerm(N) << endl;
  return 0;
}","Program to find Nth term of series 1 , 6 , 17 , 34 , 56 , 86 , 121 , 162 , ... ... .."
755,"Sum of the first N terms of the series 2 , 10 , 30 , 68 , ... . | C ++ program to find sum of first n terms ; Function to calculate the sum ; Driver code ; number of terms to be included in the sum ; find the Sum","#include <bits/stdc++.h>
using namespace std;
int calculateSum(int n) { return n * (n + 1) / 2 + pow((n * (n + 1) / 2), 2); }
int main() {
  int n = 3;
  cout << ""Sum = "" << calculateSum(n);
  return 0;
}","Sum of the first N terms of the series 2 , 10 , 30 , 68 , ... .."
756,"Check if two arrays are permutations of each other using Mathematical Operation | CPP code to check if arrays are permutations of eah other ; Function to check if arrays are permutations of each other . ; Calculating sum and multiply of first array ; Calculating sum and multiply of second array ; If sum and mul of both arrays are equal , return true , else return false . ; Driver code","#include <iostream>
using namespace std;
bool arePermutations(int a[], int b[], int n, int m) {
  int sum1 = 0, sum2 = 0, mul1 = 1, mul2 = 1;
  for (int i = 0; i < n; i++) {
    sum1 += a[i];
    mul1 *= a[i];
  }
  for (int i = 0; i < m; i++) {
    sum2 += b[i];
    mul2 *= b[i];
  }
  return ((sum1 == sum2) && (mul1 == mul2));
}
int main() {
  int a[] = {1, 3, 2};
  int b[] = {3, 1, 2};
  int n = sizeof(a) / sizeof(int);
  int m = sizeof(b) / sizeof(int);
  if (arePermutations(a, b, n, m))
    cout << ""Yes"" << endl;
  else
    cout << ""No"" << endl;
  return 0;
}",Check if two arrays are permutations of each other using Mathematical Operation.
757,Program to find the head start in a race | C ++ implementation of above approach ; Function to find the B start to C ; When B completed it 's 100 meter  then Completed meters by C is ; Driver Code . ; When A completed it 's 100 meter  Then completed meters of B and C is,"#include <bits/stdc++.h>
using namespace std;
int Race(int B, int C) {
  int result = 0;
  result = ((C * 100) / B);
  return 100 - result;
}
int main() {
  int B = 10, C = 28;
  B = 100 - B;
  C = 100 - C;
  cout << Race(B, C) << "" meters"";
  return 0;
}",Program to find the head start in a race.
758,Minimum time required to fill a cistern using N pipes | C ++ implementation of above approach ; Function to calculate the time ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
float Time(float arr[], int n, int Emptypipe) {
  float fill = 0;
  for (int i = 0; i < n; i++)
    fill += 1 / arr[i];
  fill = fill - (1 / (float)Emptypipe);
  return 1 / fill;
}
int main() {
  float arr[] = {12, 14};
  float Emptypipe = 30;
  int n = sizeof(arr) / sizeof(arr[0]);
  cout << floor(Time(arr, n, Emptypipe)) << "" Hours"";
  return 0;
}",Minimum time required to fill a cistern using N pipes.
759,Check if Decimal representation of an Octal number is divisible by 7 | CPP program to check if Decimal representation of an Octal number is divisible by 7 or not ; Function to check Divisibility ; Sum of all individual digits ; Condition ; Driver Code ; Octal number,"#include <bits/stdc++.h>
using namespace std;
int check(int n) {
  int sum = 0;
  while (n != 0) {
    sum += n % 10;
    n = n / 10;
  }
  if (sum % 7 == 0)
    return 1;
  else
    return 0;
}
int main() {
  int n = 25;
  (check(n) == 1) ? cout << ""YES"" : cout << ""NO"";
  return 0;
}",Check if Decimal representation of an Octal number is divisible by 7.
760,Sum of all the prime divisors of a number | CPP program to find sum of prime divisors of N ; Function to check if the number is prime or not . ; Corner cases ; This is checked so that we can skip middle five numbers in below loop ; function to find sum of prime divisors of N ; Driver code,"#include <bits/stdc++.h>
using namespace std;
#defineN1000005 bool isPrime(int n) {
  if (n <= 1)
    return false;
  if (n <= 3)
    return true;
  if (n % 2 == 0 n % 3 == 0)
    return false;
  for (int i = 5; i * i <= n; i = i + 6)
    if (n % i == 0 || n % (i + 2) == 0)
      return false;
  return true;
}
int SumOfPrimeDivisors(int n) {
  int sum = 0;
  for (int i = 1; i <= n; i++) {
    if (n % i == 0) {
      if (isPrime(i))
        sum += i;
    }
  }
  return sum;
}
int main() {
  int n = 60;
  cout << ""Sum of prime divisors of 60 is "" << SumOfPrimeDivisors(n) << endl;
}",Sum of all the prime divisors of a number.
761,Sum of all the prime divisors of a number | CPP program to find prime divisors of all numbers from 1 to n ; function to find prime divisors of all numbers from 1 to n ; if the number is prime ; add this prime to all it 's multiples ; Driver code,"#include <bits/stdc++.h>
using namespace std;
int Sum(int N) {
  int SumOfPrimeDivisors[N + 1] = {0};
  for (int i = 2; i <= N; ++i) {
    if (!SumOfPrimeDivisors[i]) {
      for (int j = i; j <= N; j += i) {
        SumOfPrimeDivisors[j] += i;
      }
    }
  }
  return SumOfPrimeDivisors[N];
}
int main() {
  int N = 60;
  cout << ""Sum of prime divisors of 60 is "" << Sum(N) << endl;
}",Sum of all the prime divisors of a number.
762,"Find ( a ^ b ) % m where ' b ' is very large | C ++ program to find ( a ^ b ) % m for b very large . ; Function to find power ; Update x if it is more than or equal to p ; If y is odd , multiply x with the result ; y must be even now y = y >> 1 ; y = y / 2 ; Driver Code ; String input as b is very large ; Reduce the number B to a small number using Fermat Little","#include <bits/stdc++.h>
#definelllonglongint
using namespace std;
ll power(ll x, ll y, ll p) {
  x = x % p;
  while (y > 0) {
    if (y & 1)
      res = (res * x) % p;
    x = (x * x) % p;
  }
  return res;
}
int main() {
  ll a = 3;
  string b = ""100000000000000000000000000"";
  ll remainderB = 0;
  ll MOD = 1000000007;
  for (int i = 0; i < b.length(); i++)
    remainderB = (remainderB * 10 + b[i] - '0') % (MOD - 1);
  cout << power(a, remainderB, MOD) << endl;
  return 0;
}",Find ( a ^ b ) % m where ' b ' is very large.
763,"Squares of numbers with repeated single digits | Set 1 ( 3 , 6 and 9 ) | C ++ program to find square of these large numbers ; Function to find the square of 333. . .333 , 666. . .666 and 999. . .999 ; if the number is 333. . .333 ; if the number is 666. . .666 ; if the number is 999. . .999 ; variable for hold result ; find the no of digit ; add size - 1 time a in result ; add one time b in result ; add size - 1 time c in result ; add one time d in result ; return result ; Drivers code ; find square of 33. .33 ; find square of 66. .66 ; find square of 66. .66","#include <iostream>
using namespace std;
string find_Square_369(string num) {
  char a, b, c, d;
  if (num[0] == '3')
    a = '1', b = '0', c = '8', d = '9';
  else if (num[0] == '6')
    a = '4', b = '3', c = '5', d = '6';
  else
    a = '9', b = '8', c = '0', d = '1';
  string result = """";
  int size = num.size();
  for (int i = 1; i < num.size(); i++)
    result += a;
  result += b;
  for (int i = 1; i < num.size(); i++)
    result += c;
  result += d;
  return result;
}
int main() {
  string num_3, num_6, num_9;
  num_3 = ""3333"";
  num_6 = ""6666"";
  num_9 = ""9999"";
  string result = """";
  result = find_Square_369(num_3);
  cout << ""Square of "" << num_3 << "" is : "" << result << endl;
  result = find_Square_369(num_6);
  cout << ""Square of "" << num_6 << "" is : "" << result << endl;
  result = find_Square_369(num_9);
  cout << ""Square of "" << num_9 << "" is : "" << result << endl;
  return 0;
}",Squares of numbers with repeated single digits.
764,"Trick for modular division ( ( x1 * x2 ... . xn ) / b ) mod ( m ) | To run this code , we need to copy modular inverse from below post . https : www . geeksforgeeks . org / multiplicative - inverse - under - modulo - m / ; naive method - calculating the result in a single line ; modular_inverse ( ) is a user defined function that calculates inverse of a number ; it will use extended Eucledian algorithm or Fermats Little Theorem for calculation . MMI of 120 under division by 1000000007 will be 808333339","int main() {
  long int naive_answer =
      ((long int)(55555 * 55554 * 55553 * 55552 * 55551) / 120) % 1000000007;
  long int ans = 1;
  long int i = modular_inverse(120, 10000007);
  for (int i = 0; i < 5; i++)
    ans = (ans * (55555 - i)) % 1000000007;
  ans = (ans * i) % 1000000007;
  cout << ""Answer using naive method: "" << naive_answer << endl;
  cout << ""Answer using multiplicative""
       << "" modular inverse concept: "" << ans;
  return 0;
}",Trick for modular division ( ( x1 * x2 ... . xn ) / b ) mod ( m ).
765,Trick for modular division ( ( x1 * x2 ... . xn ) / b ) mod ( m ) |,"#include <iostream>
using namespace std;
int main() {
  long int ans = 1;
  long int mod = (long int)1000000007 * 120;
  for (int i = 0; i < 5; i++)
    ans = (ans * (55555 - i)) % mod;
  ans = ans / 120;
  cout << ""Answer using shortcut: "" << ans;
  return 0;
}",Trick for modular division ( ( x1 * x2 ... . xn ) / b ) mod ( m ).
766,Ways to multiply n elements with an associative operation | C ++ code to find number of ways to multiply n elements with an associative operation ; Function to find the required factorial ; Function to find nCr ; function to find the number of ways ; Driver code,"#include <bits/stdc++.h>
using namespace std;
int fact(int n) {
  if (n == 0 n == 1)
    return 1;
  int ans = 1;
  for (int i = 1; i <= n; i++)
    ans = ans * i;
  return ans;
}
int nCr(int n, int r) {
  int Nr = n, Dr = 1, ans = 1;
  for (int i = 1; i <= r; i++) {
    ans = (ans * Nr) / (Dr);
    Nr--;
    Dr++;
  }
  return ans;
}
int solve(int n) {
  int N = 2 * n - 2;
  int R = n - 1;
  return nCr(N, R) * fact(n - 1);
}
int main() {
  int n = 6;
  cout << solve(n);
  return 0;
}",Ways to multiply n elements with an associative operation.
767,Pythagorean Triplet with given sum | C ++ program to find Pythagorean Triplet of given sum . ; Considering triplets in sorted order . The value of first element in sorted triplet can be at - most n / 3. ; The value of second element must be less than equal to n / 2 ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
void pythagoreanTriplet(int n) {
  for (int i = 1; i <= n / 3; i++) {
    for (int j = i + 1; j <= n / 2; j++) {
      int k = n - i - j;
      if (i * i + j * j == k * k) {
        cout << i << "", "" << j << "", "" << k;
        return;
      }
    }
  }
  cout << ""No Triplet"";
}
int main() {
  int n = 12;
  pythagoreanTriplet(n);
  return 0;
}",Pythagorean Triplet with given sum.
768,Program to print binomial expansion series | CPP program to print terms of binomial series and also calculate sum of series . ; function to calculate factorial of a number ; function to print the series ; calculating the value of n ! ; loop to display the series ; For calculating the value of nCr ; calculating the value of A to the power k and X to the power k ; display the series ; main function started,"#include <bits/stdc++.h>
using namespace std;
int factorial(int n) {
  int f = 1;
  for (int i = 2; i <= n; i++)
    f *= i;
  return f;
}
void series(int A, int X, int n) {
  int nFact = factorial(n);
  for (int i = 0; i < n + 1; i++) {
    int niFact = factorial(n - i);
    int iFact = factorial(i);
    int aPow = pow(A, n - i);
    int xPow = pow(X, i);
    cout << (nFact * aPow * xPow) / (niFact * iFact) << "" "";
  }
}
int main() {
  int A = 3, X = 4, n = 5;
  series(A, X, n);
  return 0;
}",Program to print binomial expansion series.
769,Sum of series with alternate signed squares of AP | CPP program to find sum of series with alternate signed square AP sums . ; function to calculate series sum ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
int seiresSum(int n, int a[]) {
  int res = 0;
  for (int i = 0; i < 2 * n; i++) {
    if (i % 2 == 0)
      res += a[i] * a[i];
    else
      res -= a[i] * a[i];
  }
  return res;
}
int main() {
  int n = 2;
  int a[] = {1, 2, 3, 4};
  cout << seiresSum(n, a);
  return 0;
}",Sum of series with alternate signed squares of AP.
770,Power of a prime number ‘ r ’ in n ! | C ++ program to find power of a prime number r in n ! ; Function to return power of a no . ' r ' in factorial of n ; Keep dividing n by powers of ' r ' and update count ; Driver program to test above function,"#include <bits/stdc++.h>
using namespace std;
int power(int n, int r) {
  int count = 0;
  for (int i = r; (n / i) >= 1; i = i * r)
    count += n / i;
  return count;
}
int main() {
  int n = 6, r = 3;
  printf("" %d "", power(n, r));
  return 0;
}",Power of a prime number ‘ r ’ in n !.
771,Average of first n odd naturals numbers | A C ++ program to find average of sum of first n odd natural numbers . ; Returns the Avg of first n odd numbers ; sum of first n odd number ; Average of first n odd numbers ; Driver Code,"#include <iostream>
using namespace std;
int avg_of_odd_num(int n) {
  int sum = 0;
  for (int i = 0; i < n; i++)
    sum += (2 * i + 1);
  return sum / n;
}
int main() {
  int n = 20;
  cout << avg_of_odd_num(n);
  return 0;
}",Average of first n odd naturals numbers.
772,Average of first n odd naturals numbers | CPP Program to find the average of sum of first n odd numbers ; Return the average of sum of first n odd numbers ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
int avg_of_odd_num(int n) { return n; }
int main() {
  int n = 8;
  cout << avg_of_odd_num(n);
  return 0;
}",Average of first n odd naturals numbers.
773,Program to print Fibonacci Triangle | C ++ Implementation for Fibonacci triangle ; function to fill Fibonacci Numbers in f [ ] ; 1 st and 2 nd number of the series are 1 and 1 ; Add the previous 2 numbers in the series and store it ; Fill Fibonacci numbers in f [ ] using fib ( ) . We need N = n * ( n + 1 ) / 2 Fibonacci numbers to make a triangle of height n ; To store next Fibonacci Number to print ; for loop to keep track of number of lines ; For loop to keep track of numbers in each line ; Driver code,"#include <bits/stdc++.h>
using namespace std;
void fib(int f[], int N) {
  f[1] = 1;
  f[2] = 1;
  for (int i = 3; i <= N; i++)
    f[i] = f[i - 1] + f[i - 2];
}
void fiboTriangle(int n) {
  int N = n * (n + 1) / 2;
  int f[N + 1];
  fib(f, N);
  int fiboNum = 1;
  for (int i = 1; i <= n; i++) {
    for (int j = 1; j <= i; j++)
      cout << f[fiboNum++] << "" "";
    cout << endl;
  }
}
int main() {
  int n = 5;
  fiboTriangle(n);
  return 0;
}",Program to print Fibonacci Triangle.
774,Average of odd numbers till a given odd number | Program to find average of odd numbers till a given odd number . ; Function to calculate the average of odd numbers ; count odd numbers ; store the sum of odd numbers ; driver function,"#include <stdio.h>
int averageOdd(int n) {
  if (n % 2 == 0) {
    printf(""Invalid Input"");
    return -1;
  }
  int sum = 0, count = 0;
  while (n >= 1) {
    count++;
    sum += n;
    n = n - 2;
  }
  return sum / count;
}
int main() {
  int n = 15;
  printf(""%d"", averageOdd(n));
  return 0;
}",Average of odd numbers till a given odd number.
775,Find max of two Rational numbers | CPP program to find max between two Rational numbers ; Get lcm of two number 's ; Get max rational number ; Find the LCM of first -> denominator and sec -> denominator ; Declare nume1 and nume2 for get the value of first numerator and second numerator ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
struct Rational {
  int nume, deno;
};
int lcm(int a, int b) { return (a * b) / (__gcd(a, b)); }
Rational maxRational(Rational first, Rational sec) {
  int k = lcm(first.deno, sec.deno);
  int nume1 = first.nume;
  int nume2 = sec.nume;
  nume1 *= k / (first.deno);
  nume2 *= k / (sec.deno);
  return (nume2 < nume1) ? first : sec;
}
int main() {
  Rational first = {3, 2};
  Rational sec = {3, 4};
  Rational res = maxRational(first, sec);
  cout << res.nume << ""/"" << res.deno;
  return 0;
}",Find max of two Rational numbers.
776,Trinomial Triangle | CPP Program to print trinomial triangle . ; Function to find the trinomial triangle value . ; base case ; base case ; recursive step . ; Function to print Trinomial Triangle of height n . ; printing n rows . ; printing first half of triangle ; printing second half of triangle . ; Driven Program,"#include <bits/stdc++.h>
using namespace std;
int TrinomialValue(int n, int k) {
  if (n == 0 && k == 0)
    return 1;
  if (k<-n k> n)
    return 0;
  return TrinomialValue(n - 1, k - 1) + TrinomialValue(n - 1, k) +
         TrinomialValue(n - 1, k + 1);
}
void printTrinomial(int n) {
  for (int i = 0; i < n; i++) {
    for (int j = -i; j <= 0; j++)
      cout << TrinomialValue(i, j) << "" "";
    for (int j = 1; j <= i; j++)
      cout << TrinomialValue(i, j) << "" "";
    cout << endl;
  }
}
int main() {
  int n = 4;
  printTrinomial(n);
  return 0;
}",Trinomial Triangle.
777,"Sum of largest prime factor of each number less than equal to n | C ++ implementation to find sum of largest prime factor of each number less than equal to n ; function to find sum of largest prime factor of each number less than equal to n ; Create an integer array "" prime [ 0 . . n ] "" and initialize all entries of it as 0. A value in prime [ i ] will finally be 0 if ' i ' is a prime , else it will contain the largest prime factor of ' i ' . ; If prime [ p ] is '0' , then it is a prime number ; Update all multiples of p ; Sum up the largest prime factor of all the numbers ; if ' p ' is a non - prime number then prime [ p ] gives its largesr prime factor ; ' p ' is a prime number ; required sum ; Driver program to test above","#include <bits/stdc++.h>
using namespace std;
int sumOfLargePrimeFactor(int n) {
  int prime[n + 1], sum = 0;
  memset(prime, 0, sizeof(prime));
  int max = n / 2;
  for (int p = 2; p <= max; p++) {
    if (prime[p] == 0) {
      for (int i = p * 2; i <= n; i += p)
        prime[i] = p;
    }
  }
  for (int p = 2; p <= n; p++) {
    if (prime[p])
      sum += prime[p];
    else
      sum += p;
  }
  return sum;
}
int main() {
  int n = 12;
  cout << ""Sum = "" << sumOfLargePrimeFactor(n);
  return 0;
}",Sum of largest prime factor of each number less than equal to n.
778,Sum of multiples of a number up to N | C ++ program to find sum of multiples of a number up to N efficiently ; Function for calculating sum of multiples of a upto N ; Number of multiples ; sum of first m natural numbers ; sum of multiples ; Driver code,"#include <iostream>
using namespace std;
int calculate_sum(int a, int N) {
  int m = N / a;
  int sum = m * (m + 1) / 2;
  int ans = a * sum;
  return ans;
}
int main() {
  int a = 7, N = 49;
  cout << ""Sum of multiples of "" << a << "" up to "" << N << "" = ""
       << calculate_sum(a, N) << endl;
  return 0;
}",Sum of multiples of a number up to N.
779,Given a HUGE number check if it 's a power of two. | C ++ program to find whether a number is power of 2 or not ; Function to check whether a number is power of 2 or not ; Driver function,"#include <bits/stdc++.h>
#include <boost/multiprecision/cpp_int.hpp>
using namespace std;
using namespace boost ::multiprecision;
bool ispowerof2(cpp_int num) {
  if ((num & (num - 1)) == 0)
    return 1;
  return 0;
}
int main() {
  cpp_int num = 549755813888;
  cout << ispowerof2(num) << endl;
  return 0;
}",Given a HUGE number check if it 's a power of two..
780,Count divisors of array multiplication | A simple C ++ program to count divisors in array multiplication . ; To count number of factors in a number ; Initialize count with 0 ; Increment count for every factor of the given number X . ; Return number of factors ; Returns number of divisors in array multiplication ; Multipliying all elements of the given array . ; Calling function which count number of factors of the number ; Driver code,"#include <iostream>
using namespace std;
int counDivisors(int X) {
  int count = 0;
  for (int i = 1; i <= X; ++i) {
    if (X % i == 0) {
      count++;
    }
  }
  return count;
}
int countDivisorsMult(int arr[], int n) {
  int mul = 1;
  for (int i = 0; i < n; ++i)
    mul *= arr[i];
  return counDivisors(mul);
}
int main() {
  int arr[] = {2, 4, 6};
  int n = sizeof(arr) / sizeof(arr[0]);
  cout << countDivisorsMult(arr, n) << endl;
  return 0;
}",Count divisors of array multiplication.
781,"Count divisors of array multiplication | C ++ program to count divisors in array multiplication . ; Create a boolean array "" isPrime [ 0 . . n ] "" and initialize all entries it as true . A value in isPrime [ i ] will finally be false if i is Not a isPrime , else true . ; If isPrime [ p ] is not changed , then it is a isPrime ; Update all multiples of p ; Print all isPrime numbers ; Returns number of divisors in array multiplication ; Find all prime numbers smaller than the largest element . ; Find counts of occurrences of each prime factor ; Compute count of all divisors using counts prime factors . ; Driver code","#include <bits/stdc++.h>
using namespace std;
void SieveOfEratosthenes(int largest, vector<int> &prime) {
  bool isPrime[largest + 1];
  memset(isPrime, true, sizeof(isPrime));
  for (int p = 2; p * p <= largest; p++) {
    if (isPrime[p] == true) {
      for (int i = p * 2; i <= largest; i += p)
        isPrime[i] = false;
    }
  }
  for (int p = 2; p <= largest; p++)
    if (isPrime[p])
      prime.push_back(p);
}
int countDivisorsMult(int arr[], int n) {
  int largest = *max_element(arr, arr + n);
  vector<int> prime;
  SieveOfEratosthenes(largest, prime);
  unordered_map<int, int> mp;
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < prime.size(); j++) {
      while (arr[i] > 1 && arr[i] % prime[j] == 0) {
        arr[i] /= prime[j];
        mp[prime[j]]++;
      }
    }
    if (arr[i] != 1)
      mp[arr[i]]++;
  }
  long long int res = 1;
  for (auto it : mp)
    res *= (it.second + 1 L);
  return res;
}
int main() {
  int arr[] = {2, 4, 6};
  int n = sizeof(arr) / sizeof(arr[0]);
  cout << countDivisorsMult(arr, n) << endl;
  return 0;
}",Count divisors of array multiplication.
782,"K distant prime pairs in a given range | C ++ program for the above approach ; Function to generate prime numbers in the given range [ L , R ] ; Store all value in the range ; Erase 1 as its non - prime ; Perform Sieve of Eratosthenes ; Find current multiple ; Erase as it is a non - prime ; Increment multiple ; Function to print all the prime pairs in the given range that differs by K ; Generate all prime number ; Traverse the Map M ; If it . first & ( it . first + K ) is prime then print this pair ; Driver Code ; Given range ; Given K ; Function Call","#include <bits/stdc++.h>
using namespace std;
void findPrimeNos(int L, int R, unordered_map<int, int> &M) {
  for (int i = L; i <= R; i++) {
    M[i]++;
  }
  if (M.find(1) != M.end()) {
    M.erase(1);
  }
  for (int i = 2; i <= sqrt(R); i++) {
    int multiple = 2;
    while ((i * multiple) <= R) {
      if (M.find(i * multiple) != M.end()) {
        M.erase(i * multiple);
      }
      multiple++;
    }
  }
}
void getPrimePairs(int L, int R, int K) {
  unordered_map<int, int> M;
  findPrimeNos(L, R, M);
  for (auto &it : M) {
    if (M.find(it.first + K) != M.end()) {
      cout << ""("" << it.first << "", "" << it.first + K << "") "";
    }
  }
}
int main() {
  int L = 1, R = 19;
  int K = 6;
  getPrimePairs(L, R, K);
  return 0;
}",K distant prime pairs in a given range.
783,Enneacontahexagon numbers | C ++ implementation for above approach ; Function to find the Nth Enneacontahexagon Number ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
int EnneacontahexagonNum(int n) { return (94 * n * n - 92 * n) / 2; }
int main() {
  int n = 3;
  cout << EnneacontahexagonNum(n);
  return 0;
}",Enneacontahexagon numbers.
784,Find two Composite Numbers such that there difference is N | C ++ code to Find two Composite Numbers such that there difference is N ; Function to find the two composite numbers ; Driver code,"#include <bits/stdc++.h>
using namespace std;
void find_composite_nos(int n) { cout << 9 * n << "" "" << 8 * n; }
int main() {
  int n = 4;
  find_composite_nos(n);
  return 0;
}",Find two Composite Numbers such that there difference is N.
785,"Count the number of pairs ( i , j ) such that either arr [ i ] is divisible by arr [ j ] or arr [ j ] is divisible by arr [ i ] | C ++ implementation of the approach ; Function to find number of unordered pairs ; Maximum element from the array ; Array to store the frequency of each element ; Stores the number of unordered pairs ; Store the frequency of each element ; Find the number of unordered pairs ; If the number j divisible by ith element is present in the array ; If the ith element of the array has frequency more than one ; Driver code","#include <bits/stdc++.h>
using namespace std;
int freqPairs(int arr[], int n) {
  int max = *(std ::max_element(arr, arr + n));
  int freq[max + 1] = {0};
  int count = 0;
  for (int i = 0; i < n; i++)
    freq[arr[i]]++;
  for (int i = 0; i < n; i++) {
    for (int j = 2 * arr[i]; j <= max; j += arr[i]) {
      if (freq[j] >= 1)
        count += freq[j];
    }
    if (freq[arr[i]] > 1) {
      count += freq[arr[i]] - 1;
      freq[arr[i]]--;
    }
  }
  return count;
}
int main() {
  int arr[] = {3, 2, 4, 2, 6};
  int n = (sizeof(arr) / sizeof(arr[0]));
  cout << freqPairs(arr, n);
  return 0;
}","Count the number of pairs ( i , j ) such that either arr [ i ] is divisible by arr [ j ] or arr [ j ] is divisible by arr [ i ]."
786,Find the Nth term of the series 1 + 2 + 6 + 15 + 31 + 56 + ... | C ++ program to find Nth term of the series : 1 + 2 + 6 + 15 + 31 + 56 + ... ; calculate Nth term of given series ; Driver code,"#include <iostream>
#include <math.h>
using namespace std;
int Nth_Term(int n) { return (2 * pow(n, 3) - 3 * pow(n, 2) + n + 6) / 6; }
int main() {
  int N = 8;
  cout << Nth_Term(N);
}",Find the Nth term of the series 1 + 2 + 6 + 15 + 31 + 56 + ....
787,Program to find N | C ++ program to find n - th number in a series made of digits 3 and 5 ; Function to find n - th number in series made of 3 and 5 ; create an array of size ( n + 1 ) ; If i is odd ; Driver code,"#include <bits/stdc++.h>
using namespace std;
int printNthElement(int n) {
  int arr[n + 1];
  arr[1] = 3;
  arr[2] = 5;
  for (int i = 3; i <= n; i++) {
    if (i % 2 != 0)
      arr[i] = arr[i / 2] * 10 + 3;
    else
      arr[i] = arr[(i / 2) - 1] * 10 + 5;
  }
  return arr[n];
}
int main() {
  int n = 6;
  cout << printNthElement(n);
  return 0;
}",Program to find N.
788,"Program to find Nth term of the series 3 , 6 , 18 , 24 , ... | CPP program to find N - th term of the series : 3 , 6 , 18 , 24 , 45 , 54. . . ; function to calculate Nth term of series ; By using above formula ; Driver Function ; get the value of N ; Calculate and print the Nth term","#include <iostream>
using namespace std;
int nthTerm(int N) { return (N * ((N / 2) + ((N % 2) * 2) + N)); }
int main() {
  int N = 5;
  cout << ""Nth term for N = "" << N << "" : "" << nthTerm(N);
  return 0;
}","Program to find Nth term of the series 3 , 6 , 18 , 24 , ...."
789,"Program to print binomial expansion series | CPP program to print terms of binomial series and also calculate sum of series . ; function to print the series ; Calculating and printing first term ; Computing and printing remaining terms ; Find current term using previous terms We increment power of X by 1 , decrement power of A by 1 and compute nCi using previous term by multiplying previous term with ( n - i + 1 ) / i ; main function started","#include <bits/stdc++.h>
using namespace std;
void series(int A, int X, int n) {
  int term = pow(A, n);
  cout << term << "" "";
  for (int i = 1; i <= n; i++) {
    term = term * X * (n - i + 1) / (i * A);
    cout << term << "" "";
  }
}
int main() {
  int A = 3, X = 4, n = 5;
  series(A, X, n);
  return 0;
}",Program to print binomial expansion series.
790,Check if a number is divisible by 8 using bitwise operators | C ++ program to check whether the number is divisible by 8 or not using bitwise operator ; function to check number is div by 8 or not using bitwise operator ; Driver program,"#include <bits/stdc++.h>
using namespace std;
int Div_by_8(int n) { return (((n >> 3) << 3) == n); }
int main() {
  int n = 16;
  if (Div_by_8(n))
    cout << ""YES"" << endl;
  else
    cout << ""NO"" << endl;
  return 0;
}",Check if a number is divisible by 8 using bitwise operators.
791,Average of even numbers till a given even number | Program to find average of even numbers till a given even number . ; Function to calculate the average of even numbers ; count even numbers ; store the sum of even numbers ; driver function,"#include <stdio.h>
int averageEven(int n) {
  if (n % 2 != 0) {
    printf(""Invalid Input"");
    return -1;
  }
  int sum = 0, count = 0;
  while (n >= 2) {
    count++;
    sum += n;
    n = n - 2;
  }
  return sum / count;
}
int main() {
  int n = 16;
  printf(""%d"", averageEven(n));
  return 0;
}",Average of even numbers till a given even number.
792,Average of even numbers till a given even number | Program to find average of even numbers till a given even nend umber . ; Function to calculate the average of even numbers ; driver function,"#include <bits/stdc++.h>
using namespace std;
int averageEven(int n) {
  if (n % 2 != 0) {
    cout << ""Invalid Input"";
    return -1;
  }
  return (n + 2) / 2;
}
int main() {
  int n = 16;
  cout << averageEven(n) << endl;
  return 0;
}",Average of even numbers till a given even number.
793,Largest number that divides x and is co | CPP program to find the Largest Coprime Divisor ; Recursive function to return gcd of a and b ; Everything divides 0 ; base case ; a is greater ; function to find largest coprime divisor ; divisor code,"#include <bits/stdc++.h>
using namespace std;
int gcd(int a, int b) {
  if (a == 0 b == 0)
    return 0;
  if (a == b)
    return a;
  if (a > b)
    return gcd(a - b, b);
  return gcd(a, b - a);
}
int cpFact(int x, int y) {
  while (gcd(x, y) != 1) {
    x = x / gcd(x, y);
  }
  return x;
}
int main() {
  int x = 15;
  int y = 3;
  cout << cpFact(x, y) << endl;
  x = 14;
  y = 28;
  cout << cpFact(x, y) << endl;
  x = 7;
  y = 3;
  cout << cpFact(x, y);
  return 0;
}",Largest number that divides x and is co.
794,Count numbers with unit digit k in given range | Simple CPP program to count numbers with last digit as k in given range . ; Returns count of numbers with k as last digit . ; Driver Program,"#include <bits/stdc++.h>
using namespace std;
int counLastDigitK(int low, int high, int k) {
  int count = 0;
  for (int i = low; i <= high; i++)
    if (i % 10 == k)
      count++;
  return count;
}
int main() {
  int low = 3, high = 35, k = 3;
  cout << counLastDigitK(low, high, k);
  return 0;
}",Count numbers with unit digit k in given range.
795,"Taxicab Numbers | C ++ implementation to print first N Taxicab ( 2 ) numbers : ; Starting from 1 , check every number if it is Taxicab until count reaches N . ; Try all possible pairs ( j , k ) whose cube sums can be i . ; Taxicab ( 2 ) found ; Driver code","#include <bits/stdc++.h>
using namespace std;
void printTaxicab2(int N) {
  int i = 1, count = 0;
  while (count < N) {
    int int_count = 0;
    for (int j = 1; j <= pow(i, 1.0 / 3); j++)
      for (int k = j + 1; k <= pow(i, 1.0 / 3); k++)
        if (j * j * j + k * k * k == i)
          int_count++;
    if (int_count == 2) {
      count++;
      cout << count << "" "" << i << endl;
    }
    i++;
  }
}
int main() {
  int N = 5;
  printTaxicab2(N);
  return 0;
}",Taxicab Numbers.
796,Composite Number | A optimized school method based C ++ program to check if a number is composite . ; Corner cases ; This is checked so that we can skip middle five numbers in below loop ; Driver Program to test above function,"#include <bits/stdc++.h>
using namespace std;
bool isComposite(int n) {
  if (n <= 1)
    return false;
  if (n <= 3)
    return false;
  if (n % 2 == 0 n % 3 == 0)
    return true;
  for (int i = 5; i * i <= n; i = i + 6)
    if (n % i == 0 || n % (i + 2) == 0)
      return true;
  return false;
}
int main() {
  isComposite(11) ? cout << "" true\n"" : cout << "" false\n"";
  isComposite(15) ? cout << "" true\n"" : cout << "" false\n"";
  return 0;
}",Composite Number.
797,Insert minimum number in array so that sum of array becomes prime | C ++ program to find minimum number to insert in array so their sum is prime ; function to check if a number is prime or not ; Corner case ; Check from 2 to n - 1 ; Find prime number greater than a number ; find prime greater than n ; check if num is prime ; increment num ; To find number to be added so sum of array is prime ; To find sum of array elements ; if sum is already prime return 0 ; To find prime number greater than sum ; Return difference of sum and num ; Driver code,"#include <bits/stdc++.h>
using namespace std;
bool isPrime(int n) {
  if (n <= 1)
    return false;
  for (int i = 2; i < n; i++)
    if (n % i == 0)
      return false;
  return true;
}
int findPrime(int n) {
  int num = n + 1;
  while (num) {
    if (isPrime(num))
      return num;
    num = num + 1;
  }
  return 0;
}
int minNumber(int arr[], int n) {
  int sum = 0;
  for (int i = 0; i < n; i++)
    sum += arr[i];
  if (isPrime(sum))
    return 0;
  int num = findPrime(sum);
  return num - sum;
}
int main() {
  int arr[] = {2, 4, 6, 8, 12};
  int n = sizeof(arr) / sizeof(arr[0]);
  cout << minNumber(arr, n);
  return 0;
}",Insert minimum number in array so that sum of array becomes prime.
798,Sum of divisors of factorial of a number | C ++ program to find sum of proper divisor of factorial of a number ; function to calculate factorial ; function to calculate sum of divisor ; Returns sum of divisors of n ! ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
int fact(int n) {
  if (n == 0)
    return 1;
  return n * fact(n - 1);
}
int div(int x) {
  int ans = 0;
  for (int i = 1; i <= x; i++)
    if (x % i == 0)
      ans += i;
  return ans;
}
int sumFactDiv(int n) { return div(fact(n)); }
int main() {
  int n = 4;
  cout << sumFactDiv(n);
}",Sum of divisors of factorial of a number.
799,"Sum of divisors of factorial of a number | C ++ program to find sum of divisors in n ! ; allPrimes [ ] stores all prime numbers less than or equal to n . ; Fills above vector allPrimes [ ] for a given n ; Create a boolean array "" prime [ 0 . . n ] "" and initialize all entries it as true . A value in prime [ i ] will finally be false if i is not a prime , else true . ; Loop to update prime [ ] ; If prime [ p ] is not changed , then it is a prime ; Update all multiples of p ; Store primes in the vector allPrimes ; Function to find all result of factorial number ; Initialize result ; find exponents of all primes which divides n and less than n ; Current divisor ; Find the highest power ( stored in exp ) ' ▁ ▁ of ▁ allPrimes [ i ] ▁ that ▁ divides ▁ n ▁ using ▁ ▁ Legendre ' s formula . ; Using the divisor function to calculate the sum ; return total divisors ; Driver program to run the cases","#include <bits/stdc++.h>
#include <math.h>
using namespace std;
vector<int> allPrimes;
void sieve(int n) {
  vector<bool> prime(n + 1, true);
  for (int p = 2; p * p <= n; p++) {
    if (prime[p] == true) {
      for (int i = p * 2; i <= n; i += p)
        prime[i] = false;
    }
  }
  for (int p = 2; p <= n; p++)
    if (prime[p])
      allPrimes.push_back(p);
}
int factorialDivisors(int n) {
  int result = 1;
  for (int i = 0; i < allPrimes.size(); i++) {
    int p = allPrimes[i];
    int exp = 0;
    while (p <= n) {
      exp = exp + (n / p);
      p = p * allPrimes[i];
    }
    result = result * (pow(allPrimes[i], exp + 1) - 1) / (allPrimes[i] - 1);
  }
  return result;
}
int main() {
  cout << factorialDivisors(4);
  return 0;
}",Sum of divisors of factorial of a number.
800,"Pandigital number in a given base | C ++ program to check if a number is pandigital in given base . ; Return true if n is pandigit else return false . ; Checking length is less than base ; Traversing each digit of the number . ; If digit is integer ; If digit is alphabet ; Checking hash array , if any index is unmarked . ; Driver Program","#include <bits/stdc++.h>
using namespace std;
bool checkPandigital(int b, char n[]) {
  if (strlen(n) < b)
    return false;
  bool hash[b];
  memset(hash, false, sizeof(hash));
  for (int i = 0; i < strlen(n); i++) {
    if (n[i] >= '0' && n[i] <= '9')
      hash[n[i] - '0'] = true;
    else if (n[i] - 'A' <= b - 11)
      hash[n[i] - 'A' + 10] = true;
  }
  for (int i = 0; i < b; i++)
    if (hash[i] == false)
      return false;
  return true;
}
int main() {
  int b = 13;
  char n[] = ""1298450376ABC"";
  (checkPandigital(b, n)) ? (cout << ""Yes"" << endl) : (cout << ""No"" << endl);
  return 0;
}",Pandigital number in a given base.
801,Convert a number m to n using minimum number of given operations | C ++ implementation to convert a number m to n using minimum number of given operations ; Function to find minimum number of given operations to convert m to n ; only way is to do - 1 ( m - n ) times ; not possible ; n is greater and n is odd ; perform ' - 1' on m ( or + 1 on n ) ; n is even ; perform ' * 2' on m ( or n / 2 on n ) ; Driver code,"#include <bits/stdc++.h>
using namespace std;
int convert(int m, int n) {
  if (m == n)
    return 0;
  if (m > n)
    return m - n;
  if (m <= 0 && n > 0)
    return -1;
  if (n % 2 == 1)
    return 1 + convert(m, n + 1);
  else
    return 1 + convert(m, n / 2);
}
int main() {
  int m = 3, n = 11;
  cout << ""Minimum number of operations : "" << convert(m, n);
  return 0;
}",Convert a number m to n using minimum number of given operations.
802,Seeds ( Or Seed Roots ) of a number | C ++ program to find Seed of a number ; Stores product of digits of x in prodDig [ x ] ; If x has single digit ; If digit product is already computed ; If digit product is not computed before . ; Prints all seeds of n ; Find all seeds using prodDig [ ] ; If there was no seed ; Print seeds ; Driver code,"#include <bits/stdc++.h>
using namespace std;
const int MAX = 10000;
int prodDig[MAX];
int getDigitProduct(int x) {
  if (x < 10)
    return x;
  if (prodDig[x] != 0)
    return prodDig[x];
  int prod = (x % 10) * getDigitProduct(x / 10);
  return (prodDig[x] = prod);
}
void findSeed(int n) {
  vector<int> res;
  for (int i = 1; i <= n / 2; i++)
    if (i * getDigitProduct(i) == n)
      res.push_back(i);
  if (res.size() == 0) {
    cout << ""NO seed exists\n"";
    return;
  }
  for (int i = 0; i < res.size(); i++)
    cout << res[i] << "" "";
}
int main() {
  long long int n = 138;
  findSeed(n);
  return 0;
}",Seeds ( Or Seed Roots ) of a number.
803,Number with maximum number of prime factors | C ++ program to find integer having maximum number of prime factor in first N natural numbers . ; Return smallest number having maximum prime factors . ; Sieve of eratosthenes method to count number of prime factors . ; Finding number having maximum number of prime factor . ; Driven Program,"#include <bits/stdc++.h>
using namespace std;
int maxPrimefactorNum(int N) {
  int arr[N + 5];
  memset(arr, 0, sizeof(arr));
  for (int i = 2; i * i <= N; i++) {
    if (!arr[i])
      for (int j = 2 * i; j <= N; j += i)
        arr[j]++;
    arr[i] = 1;
  }
  int maxval = 0, maxint = 1;
  for (int i = 1; i <= N; i++) {
    if (arr[i] > maxval) {
      maxval = arr[i];
      maxint = i;
    }
  }
  return maxint;
}
int main() {
  int N = 40;
  cout << maxPrimefactorNum(N) << endl;
  return 0;
}",Number with maximum number of prime factors.
804,Sum of all Subarrays | Set 1 | Efficient C ++ program to compute sum of subarray elements ; function compute sum all sub - array ; computing sum of subarray using formula ; return all subarray sum ; driver program to test above function,"#include <bits/stdc++.h>
using namespace std;
long int SubArraySum(int arr[], int n) {
  long int result = 0;
  for (int i = 0; i < n; i++)
    result += (arr[i] * (i + 1) * (n - i));
  return result;
}
int main() {
  int arr[] = {1, 2, 3};
  int n = sizeof(arr) / sizeof(arr[0]);
  cout << ""Sum of SubArray : "" << SubArraySum(arr, n) << endl;
  return 0;
}",Sum of all Subarrays.
805,Highest power of 2 less than or equal to given number | C ++ program to find highest power of 2 smaller than or equal to n . ; If i is a power of 2 ; Driver code,"#include <bits/stdc++.h>
using namespace std;
int highestPowerof2(int n) {
  int res = 0;
  for (int i = n; i >= 1; i--) {
    if ((i & (i - 1)) == 0) {
      res = i;
      break;
    }
  }
  return res;
}
int main() {
  int n = 10;
  cout << highestPowerof2(n);
  return 0;
}",Highest power of 2 less than or equal to given number.
806,"Find Cube Pairs | Set 2 ( A n ^ ( 1 / 3 ) Solution ) | C ++ program to find pairs that can represent the given number as sum of two cubes ; Function to find pairs that can represent the given number as sum of two cubes ; find cube root of n ; create a array of size of size ' cubeRoot ' ; for index i , cube [ i ] will contain i ^ 3 ; Find all pairs in above sorted array cube [ ] whose sum is equal to n ; Driver function","#include <cmath>
#include <iostream>
using namespace std;
void findPairs(int n) {
  int cubeRoot = pow(n, 1.0 / 3.0);
  int cube[cubeRoot + 1];
  for (int i = 1; i <= cubeRoot; i++)
    cube[i] = i * i * i;
  int l = 1;
  int r = cubeRoot;
  while (l < r) {
    if (cube[l] + cube[r] < n)
      l++;
    else if (cube[l] + cube[r] > n)
      r--;
    else {
      cout << ""("" << l << "", "" << r << "")"" << endl;
      l++;
      r--;
    }
  }
}
int main() {
  int n = 20683;
  findPairs(n);
  return 0;
}",Find Cube Pairs.
807,"Find Cube Pairs | Set 1 ( A n ^ ( 2 / 3 ) Solution ) | C ++ program to find pairs that can represent the given number as sum of two cubes ; Function to find pairs that can represent the given number as sum of two cubes ; find cube root of n ; create an empty map ; Consider all pairs such with values less than cuberoot ; find sum of current pair ( x , y ) ; do nothing if sum is not equal to given number ; if sum is seen before , we found two pairs ; if sum is seen for the first time ; Driver function","#include <bits/stdc++.h>
using namespace std;
void findPairs(int n) {
  int cubeRoot = pow(n, 1.0 / 3.0);
  unordered_map<int, pair<int, int>> s;
  for (int x = 1; x < cubeRoot; x++) {
    for (int y = x + 1; y <= cubeRoot; y++) {
      int sum = x * x * x + y * y * y;
      if (sum != n)
        continue;
      if (s.find(sum) != s.end()) {
        cout << ""("" << s[sum].first << "", "" << s[sum].second << "") and ("" << x
             << "", "" << y << "")"" << endl;
      } else
        s[sum] = make_pair(x, y);
    }
  }
}
int main() {
  int n = 13832;
  findPairs(n);
  return 0;
}",Find Cube Pairs.
808,Find the minimum difference between Shifted tables of two numbers | C ++ program to find the minimum difference between any two terms of two tables ; Utility function to find GCD of a and b ; Returns minimum difference between any two terms of shifted tables of ' a ' and ' b ' . ' x ' is shift in table of ' a ' and ' y ' is shift in table of ' b ' . ; Calculate gcd of a nd b ; Calculate difference between x and y ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
int gcd(int a, int b) {
  while (b != 0) {
    int t = b;
    b = a % b;
    a = t;
  }
  return a;
}
int findMinDiff(int a, int b, int x, int y) {
  int g = gcd(a, b);
  int diff = abs(x - y) % g;
  return min(diff, g - diff);
}
int main() {
  int a = 20, b = 52, x = 5, y = 7;
  cout << findMinDiff(a, b, x, y) << endl;
  return 0;
}",Find the minimum difference between Shifted tables of two numbers.
809,Find all divisors of a natural number | Set 2 | A O ( sqrt ( n ) ) program that prints all divisors in sorted order ; function to print the divisors ; Vector to store half of the divisors ; check if divisors are equal ; push the second divisor in the vector ; The vector will be printed in reverse ; Driver program to test above function,"#include <bits/stdc++.h>
using namespace std;
void printDivisors(int n) {
  vector<int> v;
  for (int i = 1; i <= sqrt(n); i++) {
    if (n % i == 0) {
      if (n / i == i)
        printf(""%d "", i);
      else {
        printf(""%d "", i);
        v.push_back(n / i);
      }
    }
  }
  for (int i = v.size() - 1; i >= 0; i--)
    printf(""%d "", v[i]);
}
int main() {
  printf(""The divisors of 100 are: n"");
  printDivisors(100);
  return 0;
}",Find all divisors of a natural number.
810,Find all divisors of a natural number | Set 2 | A O ( sqrt ( n ) ) program that prints all divisors in sorted order ; Function to print the divisors ; Driver code,"#include <iostream>
#include <math.h>
using namespace std;
void printDivisors(int n) {
  int i;
  for (i = 1; i * i < n; i++) {
    if (n % i == 0)
      cout << i << "" "";
  }
  if (i - (n / i) == 1) {
    i--;
  }
  for (; i >= 1; i--) {
    if (n % i == 0)
      cout << n / i << "" "";
  }
}
int main() {
  cout << ""The divisors of 100 are: \n"";
  printDivisors(100);
  return 0;
}",Find all divisors of a natural number.
811,Find all factors of a natural number | Set 1 | C ++ implementation of Naive method to print all divisors ; function to print the divisors ; Driver program to test above function,"#include <iostream>
using namespace std;
void printDivisors(int n) {
  for (int i = 1; i <= n; i++)
    if (n % i == 0)
      cout << "" "" << i;
}
int main() {
  cout << ""The divisors of 100 are: \n"";
  printDivisors(100);
  return 0;
}",Find all factors of a natural number.
812,"Find all factors of a natural number | Set 1 | A Better ( than Naive ) Solution to find all divisiors ; Function to print the divisors ; Note that this loop runs till square root ; If divisors are equal , print only one ; else Otherwise print both ; Driver program to test above function","#include <iostream>
#include <math.h>
using namespace std;
void printDivisors(int n) {
  for (int i = 1; i <= sqrt(n); i++) {
    if (n % i == 0) {
      if (n / i == i)
        cout << "" "" << i;
      cout << "" "" << i << "" "" << n / i;
    }
  }
}
int main() {
  cout << ""The divisors of 100 are: \n"";
  printDivisors(100);
  return 0;
}",Find all factors of a natural number.
813,"Sieve of Atkin | C ++ program for implementation of Sieve of Atkin ; 2 and 3 are known to be prime ; Initialise the sieve array with false values ; Mark sieve [ n ] is true if one of the following is true : a ) n = ( 4 * x * x ) + ( y * y ) has odd number of solutions , i . e . , there exist odd number of distinct pairs ( x , y ) that satisfy the equation and n % 12 = 1 or n % 12 = 5. b ) n = ( 3 * x * x ) + ( y * y ) has odd number of solutions and n % 12 = 7 c ) n = ( 3 * x * x ) - ( y * y ) has odd number of solutions , x > y and n % 12 = 11 ; Main part of Sieve of Atkin ; Mark all multiples of squares as non - prime ; Print primes using sieve [ ] ; Driver program","#include <bits/stdc++.h>
using namespace std;
int SieveOfAtkin(int limit) {
  if (limit > 2)
    cout << 2 << "" "";
  if (limit > 3)
    cout << 3 << "" "";
  bool sieve[limit];
  for (int i = 0; i < limit; i++)
    sieve[i] = false;
  for (int x = 1; x * x < limit; x++) {
    for (int y = 1; y * y < limit; y++) {
      int n = (4 * x * x) + (y * y);
      if (n <= limit && (n % 12 == 1 n % 12 == 5))
        sieve[n] ^= true;
      n = (3 * x * x) + (y * y);
      if (n <= limit && n % 12 == 7)
        sieve[n] ^= true;
      n = (3 * x * x) - (y * y);
      if (x > y && n <= limit && n % 12 == 11)
        sieve[n] ^= true;
    }
  }
  for (int r = 5; r * r < limit; r++) {
    if (sieve[r]) {
      for (int i = r * r; i < limit; i += r * r)
        sieve[i] = false;
    }
  }
  for (int a = 5; a < limit; a++)
    if (sieve[a])
      cout << a << "" "";
}
int main(void) {
  int limit = 20;
  SieveOfAtkin(limit);
  return 0;
}",Sieve of Atkin.
814,Find if a point lies inside a Circle | C ++ program to check if a point lies inside a circle or not ; Compare radius of circle with distance of its center from given point ; Driver function,"#include <bits/stdc++.h>
using namespace std;
bool isInside(int circle_x, int circle_y, int rad, int x, int y) {
  if ((x - circle_x) * (x - circle_x) + (y - circle_y) * (y - circle_y) <=
      rad * rad)
    return true;
  else
    return false;
}
int main() {
  int x = 1, y = 1;
  int circle_x = 0, circle_y = 1, rad = 2;
  isInside(circle_x, circle_y, rad, x, y) ? cout << ""Inside""
                                          : cout << ""Outside"";
}",Find if a point lies inside a Circle.
815,"Find all possible outcomes of a given expression | C ++ program to evaluate all possible values of a expression ; Utility function to evaluate a simple expression with one operator only . ; This function evaluates all possible values and returns a list of evaluated values . ; To store result ( all possible evaluations of given expression ' expr ' ) ; If there is only one character , it must be a digit ( or operand ) , return it . ; If there are only three characters , middle one must be operator and corner ones must be operand ; every i refers to an operator ; l refers to all the possible values in the left of operator ' expr [ i ] ' ; r refers to all the possible values in the right of operator ' expr [ i ] ' ; Take above evaluated all possible values in left side of ' i ' ; Take above evaluated all possible values in right side of ' i ' ; Calculate value for every pair and add the value to result . ; Driver program","#include <bits/stdc++.h>
using namespace std;
int eval(int a, char op, int b) {
  if (op == '+')
    return a + b;
  if (op == '-')
    return a - b;
  if (op == '*')
    return a * b;
}
vector<int> evaluateAll(string expr, int low, int high) {
  vector<int> res;
  if (low == high) {
    res.push_back(expr[low] - '0');
    return res;
  }
  if (low == (high - 2)) {
    int num = eval(expr[low] - '0', expr[low + 1], expr[low + 2] - '0');
    res.push_back(num);
    return res;
  }
  for (int i = low + 1; i <= high; i += 2) {
    vector<int> l = evaluateAll(expr, low, i - 1);
    vector<int> r = evaluateAll(expr, i + 1, high);
    for (int s1 = 0; s1 < l.size(); s1++) {
      for (int s2 = 0; s2 < r.size(); s2++) {
        int val = eval(l[s1], expr[i], r[s2]);
        res.push_back(val);
      }
    }
  }
  return res;
}
int main() {
  string expr = ""1*2+3*4"";
  int len = expr.length();
  vector<int> ans = evaluateAll(expr, 0, len - 1);
  for (int i = 0; i < ans.size(); i++)
    cout << ans[i] << endl;
  return 0;
}",Find all possible outcomes of a given expression.
816,"Program to check if a given number is Lucky ( all digits are different ) | C ++ program to check if a given number is lucky ; This function returns true if n is lucky ; Create an array of size 10 and initialize all elements as false . This array is used to check if a digit is already seen or not . ; Traverse through all digits of given number ; Find the last digit ; If digit is already seen , return false ; Mark this digit as seen ; REmove the last digit from number ; Driver program to test above function .","#include <iostream>
using namespace std;
bool isLucky(int n) {
  bool arr[10];
  for (int i = 0; i < 10; i++)
    arr[i] = false;
  while (n > 0) {
    int digit = n % 10;
    if (arr[digit])
      return false;
    arr[digit] = true;
    n = n / 10;
  }
  return true;
}
int main() {
  int arr[] = {1291, 897, 4566, 1232, 80, 700};
  int n = sizeof(arr) / sizeof(arr[0]);
  for (int i = 0; i < n; i++)
    isLucky(arr[i]) ? cout << arr[i] << "" is Lucky \n""
                    : cout << arr[i] << "" is not Lucky \n"";
  return 0;
}",Program to check if a given number is Lucky ( all digits are different ).
817,"Print squares of first n natural numbers without using * , / and | C ++ program to print squares of first ' n ' natural numbers wothout using * , / and - ; Initialize ' square ' and first odd number ; Calculate and print squares ; Print square ; Update ' square ' and ' odd ' ; Driver program to test above function","#include <iostream>
using namespace std;
void printSquares(int n) {
  int square = 0, odd = 1;
  for (int x = 0; x < n; x++) {
    cout << square << "" "";
    square = square + odd;
    odd = odd + 2;
  }
}
int main() {
  int n = 5;
  printSquares(n);
}","Print squares of first n natural numbers without using * , / and."
818,Write a program to reverse digits of a number | C ++ program to reverse digits of a number ; Recursive function to reverse digits of num ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
int reversDigits(int num) {
  static int rev_num = 0;
  static int base_pos = 1;
  if (num > 0) {
    reversDigits(num / 10);
    rev_num += (num % 10) * base_pos;
    base_pos *= 10;
  }
  return rev_num;
}
int main() {
  int num = 4562;
  cout << ""Reverse of no. is "" << reversDigits(num);
  return 0;
}",Write a program to reverse digits of a number.
819,Find a number such that maximum in array is minimum possible after XOR | C ++ program that find the minimum possible maximum ; Recursive function that find the minimum value after exclusive - OR ; Condition if ref size is zero or bit is negative then return 0 ; Condition if current bit is off then push current value in curr_off vector ; Condition if current bit is on then push current value in curr_on vector ; Condition if curr_off is empty then call recursive function on curr_on vector ; Condition if curr_on is empty then call recursive function on curr_off vector ; Return the minimum of curr_off and curr_on and add power of 2 of current bit ; Function that print the minimum value after exclusive - OR ; Pushing values in vector ; Printing answer ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
int RecursiveFunction(vector<int> ref, int bit) {
  if (ref.size() == 0 bit < 0)
    return 0;
  vector<int> curr_on, curr_off;
  for (int i = 0; i < ref.size(); i++) {
    if (((ref[i] >> bit) & 1) == 0)
      curr_off.push_back(ref[i]);
    else
      curr_on.push_back(ref[i]);
  }
  if (curr_off.size() == 0)
    return RecursiveFunction(curr_on, bit - 1);
  if (curr_on.size() == 0)
    return RecursiveFunction(curr_off, bit - 1);
  return min(RecursiveFunction(curr_off, bit - 1),
             RecursiveFunction(curr_on, bit - 1)) +
         (1 << bit);
}
void PrintMinimum(int a[], int n) {
  vector<int> v;
  for (int i = 0; i < n; i++)
    v.push_back(a[i]);
  cout << RecursiveFunction(v, 30) << ""\n"";
}
int main() {
  int arr[] = {3, 2, 1};
  int size = sizeof(arr) / sizeof(arr[0]);
  PrintMinimum(arr, size);
  return 0;
}",Find a number such that maximum in array is minimum possible after XOR.
820,Count of elements which are equal to the XOR of the next two elements | C ++ implementation of the approach ; Function to return the count of elements which are equal to the XOR of the next two elements ; To store the required count ; For every element of the array such that it has at least two elements appearing after it in the array ; If current element is equal to the XOR of the next two elements in the array ; Driver code,"#include <bits/stdc++.h>
using namespace std;
int cntElements(int arr[], int n) {
  int cnt = 0;
  for (int i = 0; i < n - 2; i++) {
    if (arr[i] == (arr[i + 1] ^ arr[i + 2])) {
      cnt++;
    }
  }
  return cnt;
}
int main() {
  int arr[] = {4, 2, 1, 3, 7, 8};
  int n = sizeof(arr) / sizeof(int);
  cout << cntElements(arr, n);
  return 0;
}",Count of elements which are equal to the XOR of the next two elements.
821,Number of triplets in array having subarray xor equal | A simple C ++ program to find Number of triplets in array having subarray xor equal ; Function to return the count ; Initialise result ; Pick 1 st element of the triplet ; Pick 2 nd element of the triplet ; Pick 3 rd element of the triplet ; Taking xor in the first subarray ; Taking xor in the second subarray ; If both xor is equal ; Driver Code ; Function Calling,"#include <bits/stdc++.h>
using namespace std;
int xor_triplet(int arr[], int n) {
  int ans = 0;
  for (int i = 0; i < n; i++) {
    for (int j = i + 1; j < n; j++) {
      for (int k = j; k < n; k++) {
        int xor1 = 0, xor2 = 0;
        for (int x = i; x < j; x++) {
          xor1 ^= arr[x];
        }
        for (int x = j; x <= k; x++) {
          xor2 ^= arr[x];
        }
        if (xor1 == xor2) {
          ans++;
        }
      }
    }
  }
  return ans;
}
int main() {
  int arr[] = {1, 2, 3, 4, 5};
  int n = sizeof(arr) / sizeof(arr[0]);
  cout << xor_triplet(arr, n);
  return 0;
}",Number of triplets in array having subarray xor equal.
822,Number of triplets in array having subarray xor equal | C ++ trie based program to find the Number of triplets in array having subarray xor equal ; maximum number of bits in an integer <= 1e9 ; Structure of a Trie Node ; [ 0 ] index is bit 0 and [ 1 ] index is bit 1 ; Sum of indexes inserted at at a node ; Number of indexes inserted at a node ; Constructor to initialize a newly created node ; Function to insert curr_xor into the trie ; Iterate from the 31 st bit to the 0 th bit of curr_xor number ; Check if the current bit is set or not ; If this node isn 't already  present in the trie structure  insert it into the trie. ; Increase the sum of indexes by the current index value ; Increase the number of indexes by 1 ; Function to check if curr_xor is present in trie or not ; Iterate from the 31 st bit to the 0 th bit of curr_xor number ; Check if the current bit is set or not ; If this node isn 't already  present in the trie structure  that means no sub array till  current index has 0 xor so  return 0 ; Calculate the number of index inserted at final node ; Calculate the sum of index inserted at final node ; Function to return the count of valid triplets ; To store cumulative xor ; The root of the trie ; Insert the curr_xor in the trie ; Update the cumulative xor ; Check if the cumulative xor is present in the trie or not if present then add ( sz * index ) - sum ; Driver Code ; Given array,"#include <bits/stdc++.h>
using namespace std;
#definelg31 struct TrieNode {
  TrieNode *children[2];
  int sum_of_indexes;
  int number_of_indexes;
  TrieNode() {
    this->children[0] = nullptr;
    this->children[1] = nullptr;
    this->sum_of_indexes = 0;
    this->number_of_indexes = 0;
  }
};
void insert(TrieNode *node, int num, int index) {
  for (int bits = lg; bits >= 0; bits--) {
    int curr_bit = (num >> bits) & 1;
    if (node->children[curr_bit] == nullptr) {
      node->children[curr_bit] = new TrieNode();
    }
    node = node->children[curr_bit];
  }
  node->sum_of_indexes += index;
  node->number_of_indexes++;
}
int query(TrieNode *node, int num, int index) {
  for (int bits = lg; bits >= 0; bits--) {
    int curr_bit = (num >> bits) & 1;
    if (node->children[curr_bit] == nullptr) {
      return 0;
    }
    node = node->children[curr_bit];
  }
  int sz = node->number_of_indexes;
  int sum = node->sum_of_indexes;
  int ans = (sz * index) - (sum);
  return ans;
}
int no_of_triplets(int arr[], int n) {
  int curr_xor = 0;
  int number_of_triplets = 0;
  TrieNode *root = new TrieNode();
  for (int i = 0; i < n; i++) {
    int x = arr[i];
    insert(root, curr_xor, i);
    curr_xor ^= x;
    number_of_triplets += query(root, curr_xor, i);
  }
  return number_of_triplets;
}
int main() {
  int arr[] = {5, 2, 7};
  int n = sizeof(arr) / sizeof(arr[0]);
  cout << no_of_triplets(arr, n);
  return 0;
}",Number of triplets in array having subarray xor equal.
823,Find the number of pair of Ideal nodes in a given tree | C ++ implementation of the approach ; Adjacency list ; bit : bit array i and j are starting and ending index INCLUSIVE ; bit : bit array n : size of bit array i is the index to be updated diff is ( new_val - old_val ) ; DFS function to find ideal pairs ; Function for initialisation ; Function to add an edge ; Function to find number of ideal pairs ; Find root of the tree ; Driver code ; Add edges ; Function call,"#include <bits/stdc++.h>
using namespace std;
#defineN100005 int n, k;
vector<int> al[N];
long long Ideal_pair;
long long bit[N];
bool root_node[N];
long long bit_q(int i, int j) {
  long long sum = 0 ll;
  while (j > 0) {
    sum += bit[j];
    j -= (j & (j * -1));
  }
  i--;
  while (i > 0) {
    sum -= bit[i];
    i -= (i & (i * -1));
  }
  return sum;
}
void bit_up(int i, long long diff) {
  while (i <= n) {
    bit[i] += diff;
    i += i & -i;
  }
}
void dfs(int node) {
  Ideal_pair += bit_q(max(1, node - k), min(n, node + k));
  bit_up(node, 1);
  for (int i = 0; i < al[node].size(); i++)
    dfs(al[node][i]);
  bit_up(node, -1);
}
void initialise() {
  Ideal_pair = 0;
  for (int i = 0; i <= n; i++) {
    root_node[i] = true;
    bit[i] = 0 LL;
  }
}
void Add_Edge(int x, int y) {
  al[x].push_back(y);
  root_node[y] = false;
}
long long Idealpairs() {
  int r = -1;
  for (int i = 1; i <= n; i++)
    if (root_node[i]) {
      r = i;
      break;
    }
  dfs(r);
  return Ideal_pair;
}
int main() {
  n = 6, k = 3;
  initialise();
  Add_Edge(1, 2);
  Add_Edge(1, 3);
  Add_Edge(3, 4);
  Add_Edge(3, 5);
  Add_Edge(3, 6);
  cout << Idealpairs();
  return 0;
}",Find the number of pair of Ideal nodes in a given tree.
824,Print bitwise AND set of a number N | CPP program to print all bitwise subsets of N ( Efficient approach ) ; function to find bitwise subsets Efficient approach ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
void printSubsets(int n) {
  for (int i = n; i > 0; i = (i - 1) & n)
    cout << i << "" "";
  cout << 0;
}
int main() {
  int n = 9;
  printSubsets(n);
  return 0;
}",Print bitwise AND set of a number N.
825,"Check if a number is divisible by 17 using bitwise operators | CPP program to check if a number is divisible by 17 or not using bitwise operator . ; function to check recursively if the number is divisible by 17 or not ; if n = 0 or n = 17 then yes ; if n is less then 17 , not divisible by 17 ; reducing the number by floor ( n / 16 ) - n % 16 ; driver code to check the above function","#include <bits/stdc++.h>
using namespace std;
bool isDivisibleby17(int n) {
  if (n == 0 n == 17)
    return true;
  if (n < 17)
    return false;
  return isDivisibleby17((int)(n >> 4) - (int)(n & 15));
}
int main() {
  int n = 35;
  if (isDivisibleby17(n))
    cout << n << "" is divisible by 17"";
  else
    cout << n << "" is not divisible by 17"";
  return 0;
}",Check if a number is divisible by 17 using bitwise operators.
826,Largest number with binary representation is m 1 's and m | CPP program to find largest number smaller than equal to n with m set bits then m - 1 0 bits . ; Returns largest number with m set bits then m - 1 0 bits . ; Start with 2 bits . ; initial answer is 1 which meets the given condition ; check for all numbers ; compute the number ; if less then N ; increment m to get the next number ; driver code to check the above condition,"#include <bits/stdc++.h>
using namespace std;
long long answer(long long n) {
  long m = 2;
  long long ans = 1;
  long long r = 1;
  while (r < n) {
    r = (int)(pow(2, m) - 1) * (pow(2, m - 1));
    if (r < n)
      ans = r;
    m++;
  }
  return ans;
}
int main() {
  long long n = 7;
  cout << answer(n);
  return 0;
}",Largest number with binary representation is m 1 's and m.
827,Find most significant set bit of a number | Simple CPP program to find MSB number for given n . ; Driver code,"#include <iostream>
using namespace std;
int setBitNumber(int n) {
  if (n == 0)
    return 0;
  int msb = 0;
  n = n / 2;
  while (n != 0) {
    n = n / 2;
    msb++;
  }
  return (1 << msb);
}
int main() {
  int n = 0;
  cout << setBitNumber(n);
  return 0;
}",Find most significant set bit of a number.
828,Find most significant set bit of a number | CPP program to find MSB number for given n . ; Suppose n is 273 ( binary is 100010001 ) . It does following 100010001 | 010001000 = 110011001 ; This makes sure 4 bits ( From MSB and including MSB ) are set . It does following 110011001 | 001100110 = 111111111 ; Increment n by 1 so that there is only one set bit which is just before original MSB . n now becomes 1000000000 ; Return original MSB after shifting . n now becomes 100000000 ; Driver code,"#include <iostream>
using namespace std;
int setBitNumber(int n) {
  n |= n >> 1;
  n |= n >> 2;
  n |= n >> 4;
  n |= n >> 8;
  n |= n >> 16;
  n = n + 1;
  return (n >> 1);
}
int main() {
  int n = 273;
  cout << setBitNumber(n);
  return 0;
}",Find most significant set bit of a number.
829,Count trailing zero bits using lookup table | Simple C ++ code for counting trailing zeros in binary representation of a number ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
int countTrailingZero(int x) {
  int count = 0;
  while ((x & 1) == 0) {
    x = x >> 1;
    count++;
  }
  return count;
}
int main() {
  cout << countTrailingZero(11) << endl;
  return 0;
}",Count trailing zero bits using lookup table.
830,Count trailing zero bits using lookup table | C ++ code for counting trailing zeros in binary representation of a number ; Map a bit value mod 37 to its position ; Only difference between ( x and - x ) is the value of signed magnitude ( leftmostbit ) negative numbers signed bit is 1 ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
int countTrailingZero(int x) {
  static const int lookup[] = {
      32, 0,  1,  26, 2,  23, 27, 0,  3, 16, 24, 30, 28, 11, 0,  13, 4,  7, 17,
      0,  25, 22, 31, 15, 29, 10, 12, 6, 0,  21, 14, 9,  5,  20, 8,  19, 18};
  return lookup[(-x & x) % 37];
}
int main() {
  cout << countTrailingZero(48) << endl;
  return 0;
}",Count trailing zero bits using lookup table.
831,Calculate 7 n / 8 without using division and multiplication operators | C ++ program to evaluate ceil ( 7 n / 8 ) without using * and / ; Note the inner bracket here . This is needed because precedence of ' - ' operator is higher than ' < < ' ; Driver code,"#include <iostream>
using namespace std;
int multiplyBySevenByEight(int n) { return (n - (n >> 3)); }
int main() {
  int n = 9;
  cout << multiplyBySevenByEight(n);
  return 0;
}",Calculate 7 n / 8 without using division and multiplication operators.
832,"Longest set of Palindrome Numbers from the range [ L , R ] with at most K difference between its maximum and minimum | C ++ program for the above approach ; Function to search the rightmost index of given number ; Store the rightmost index ; Calculate the mid ; If given number <= num ; Assign ans = mid ; Update low ; Update high ; return ans ; Function to check if the given number is palindrome or not ; Generate reverse of the given number ; If n is a palindrome ; Function to find the maximum size of group of palindrome numbers having difference between maximum and minimum element at most K ; Stores the all the palindromic numbers in the range [ L , R ] ; Traverse over the range [ L , R ] ; If i is a palindrome ; Append the number in the list ; Stores count of maximum palindromic numbers ; Iterate each element in the list ; Calculate rightmost index in the list < current element + K ; Check if there is rightmost index from the current index ; Return the count ; Driver Code","#include <bits/stdc++.h>
using namespace std;
static int search(vector<int> list, int num) {
  int low = 0, high = list.size() - 1;
  int ans = -1;
  while (low <= high) {
    int mid = low + (high - low) / 2;
    if (list[mid] <= num) {
      ans = mid;
      low = mid + 1;
    } else
      high = mid - 1;
  }
  return ans;
}
bool isPalindrome(int n) {
  int rev = 0;
  int temp = n;
  while (n > 0) {
    rev = rev * 10 + n % 10;
    n /= 10;
  }
  return rev == temp;
}
int countNumbers(int L, int R, int K) {
  vector<int> list;
  for (int i = L; i <= R; i++) {
    if (isPalindrome(i)) {
      list.push_back(i);
    }
  }
  int count = 0;
  for (int i = 0; i < list.size(); i++) {
    int right_index = search(list, list[i] + K - 1);
    if (right_index != -1)
      count = max(count, right_index - i + 1);
  }
  return count;
}
int main() {
  int L = 98, R = 112;
  int K = 13;
  cout << countNumbers(L, R, K);
}","Longest set of Palindrome Numbers from the range [ L , R ] with at most K difference between its maximum and minimum."
833,Maximize Sum possible by subtracting same value from all elements of a Subarray of the given Array | C ++ program to implement the above approach ; Function to generate previous smaller element for each array element ; The first element has no previous smaller ; Stack to keep track of elements that have occurred previously ; Push the first index ; Pop all the elements until the previous element is smaller than current element ; Store the previous smaller element ; Push the index of the current element ; Return the array ; Function to generate next smaller element for each array element ; Stack to keep track of elements that have occurring next ; Iterate in reverse order for calculating next smaller ; Pop all the elements until the next element is smaller than current element ; Store the next smaller element ; Push the index of the current element ; Return the array ; Function to find the maximum sum by subtracting same value from all elements of a Subarray ; Stores previous smaller element ; Stores next smaller element ; Calculate contribution of each element ; Return answer ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
vector<int> findPrevious(vector<int> a, int n) {
  vector<int> ps(n);
  ps[0] = -1;
  stack<int> Stack;
  Stack.push(0);
  for (int i = 1; i < n; i++) {
    while (Stack.size() > 0 && a[Stack.top()] >= a[i])
      Stack.pop();
    ps[i] = Stack.size() > 0 ? Stack.top() : -1;
    Stack.push(i);
  }
  return ps;
}
vector<int> findNext(vector<int> a, int n) {
  vector<int> ns(n);
  ns[n - 1] = n;
  stack<int> Stack;
  Stack.push(n - 1);
  for (int i = n - 2; i >= 0; i--) {
    while (Stack.size() > 0 && a[Stack.top()] >= a[i])
      Stack.pop();
    ns[i] = Stack.size() > 0 ? Stack.top() : n;
    Stack.push(i);
  }
  return ns;
}
int findMaximumSum(vector<int> a, int n) {
  vector<int> prev_smaller = findPrevious(a, n);
  vector<int> next_smaller = findNext(a, n);
  int max_value = 0;
  for (int i = 0; i < n; i++) {
    max_value = max(max_value, a[i] * (next_smaller[i] - prev_smaller[i] - 1));
  }
  return max_value;
}
int main() {
  int n = 3;
  vector<int> a{80, 48, 82};
  cout << findMaximumSum(a, n);
  return 0;
}",Maximize Sum possible by subtracting same value from all elements of a Subarray of the given Array.
834,"Check if the given string is shuffled substring of another string | This function returns true if contents of arr1 [ ] and arr2 [ ] are same , otherwise false . ; This function search for all permutations of pat [ ] in txt [ ] ; countP [ ] : Store count of all characters of pattern countTW [ ] : Store count of current window of text ; Traverse through remaining characters of pattern ; Compare counts of current window of text with counts of pattern [ ] ; Add current character to current window ; Remove the first character of previous window ; Check for the last window in text ; Driver program to test above function","#include <cstring>
#include <iostream>
#defineMAX256
using namespace std;
bool compare(char arr1[], char arr2[]) {
  for (int i = 0; i < MAX; i++)
    if (arr1[i] != arr2[i])
      return false;
  return true;
}
bool search(char *pat, char *txt) {
  int M = strlen(pat), N = strlen(txt);
  char countP[MAX] = {0}, countTW[MAX] = {0};
  for (int i = 0; i < M; i++) {
    (countP[pat[i]])++;
    (countTW[txt[i]])++;
  }
  for (int i = M; i < N; i++) {
    if (compare(countP, countTW))
      return true;
    (countTW[txt[i]])++;
    countTW[txt[i - M]]--;
  }
  if (compare(countP, countTW))
    return true;
  return false;
}
int main() {
  char txt[] = ""BACDGABCDA"";
  char pat[] = ""ABCD"";
  if (search(pat, txt))
    cout << ""Yes"";
  else
    cout << ""No"";
  return 0;
}",Check if the given string is shuffled substring of another string.
835,Maximize the median of the given array after adding K elements to the same array | C ++ implementation of the approach ; Function to return the maximized median ; Sort the array ; If size is even ; If size is odd ; Driver code,"#include <bits/stdc++.h>
using namespace std;
float getMaxMedian(int arr[], int n, int k) {
  int size = n + k;
  sort(arr, arr + n);
  if (size % 2 == 0) {
    float median = (float)(arr[(size / 2) - 1] + arr[size / 2]) / 2;
    return median;
  }
  float median = arr[size / 2];
  return median;
}
int main() {
  int arr[] = {3, 2, 3, 4, 2};
  int n = sizeof(arr) / sizeof(arr[0]);
  int k = 2;
  cout << getMaxMedian(arr, n, k);
  return 0;
}",Maximize the median of the given array after adding K elements to the same array.
836,Sort 3 Integers without using if condition or using only max ( ) function | C ++ program to print three numbers in sorted order using max function ; Find maximum element ; Find minimum element ; Driver code,"#include <bits/stdc++.h>
using namespace std;
void printSorted(int a, int b, int c) {
  int get_max = max(a, max(b, c));
  int get_min = -max(-a, max(-b, -c));
  int get_mid = (a + b + c) - (get_max + get_min);
  cout << get_min << "" "" << get_mid << "" "" << get_max;
}
int main() {
  int a = 4, b = 1, c = 9;
  printSorted(a, b, c);
  return 0;
}",Sort 3 Integers without using if condition or using only max ( ) function.
837,Binary Insertion Sort | iterative implementation ; Function to sort an array a [ ] of size ' n ' ; find location where selected should be inseretd ; Move all elements after location to create space ; Driver Code,"#include <iostream>
using namespace std;
int binarySearch(int a[], int item, int low, int high) {
  while (low <= high) {
    int mid = low + (high - low) / 2;
    if (item == a[mid])
      return mid + 1;
    else if (item > a[mid])
      low = mid + 1;
    else
      high = mid - 1;
  }
  return low;
}
void insertionSort(int a[], int n) {
  int i, loc, j, k, selected;
  for (i = 1; i < n; ++i) {
    j = i - 1;
    selected = a[i];
    loc = binarySearch(a, selected, 0, j);
    while (j >= loc) {
      a[j + 1] = a[j];
      j--;
    }
    a[j + 1] = selected;
  }
}
int main() {
  int a[] = {37, 23, 0, 17, 12, 72, 31, 46, 100, 88, 54};
  int n = sizeof(a) / sizeof(a[0]), i;
  insertionSort(a, n);
  cout << ""Sorted array: \n"";
  for (i = 0; i < n; i++)
    cout << "" "" << a[i];
  return 0;
}",Binary Insertion Sort.
838,"Insertion Sort | C ++ program for insertion sort ; Function to sort an array using insertion sort ; Move elements of arr [ 0. . i - 1 ] , that are greater than key , to one position ahead of their current position ; A utility function to print an array of size n ; Driver code","#include <bits/stdc++.h>
using namespace std;
void insertionSort(int arr[], int n) {
  int i, key, j;
  for (i = 1; i < n; i++) {
    key = arr[i];
    j = i - 1;
    while (j >= 0 && arr[j] > key) {
      arr[j + 1] = arr[j];
      j = j - 1;
    }
    arr[j + 1] = key;
  }
}
void printArray(int arr[], int n) {
  int i;
  for (i = 0; i < n; i++)
    cout << arr[i] << "" "";
  cout << endl;
}
int main() {
  int arr[] = {12, 11, 13, 5, 6};
  int n = sizeof(arr) / sizeof(arr[0]);
  insertionSort(arr, n);
  printArray(arr, n);
  return 0;
}",Insertion Sort.
839,"Count of distinct permutation of a String obtained by swapping only unequal characters | C ++ program for the above approach ; Function to calculate total number of valid permutations ; Creating count which is equal to the Total number of characters present and ans that will store the number of unique permutations ; Storing frequency of each character present in the string ; Adding count of characters by excluding characters equal to current char ; Reduce the frequency of the current character and count by 1 , so that it cannot interfere with the calculations of the same elements present to the right of it . ; Return ans + 1 ( Because the given string is also a unique permutation ) ; Driver Code","#include <bits/stdc++.h>
using namespace std;
int validPermutations(string str) {
  unordered_map<char, int> m;
  int count = str.length(), ans = 0;
  for (int i = 0; i < str.length(); i++) {
    m[str[i]]++;
  }
  for (int i = 0; i < str.length(); i++) {
    ans += count - m[str[i]];
    m[str[i]]--;
    count--;
  }
  return ans + 1;
}
int main() {
  string str = ""sstt"";
  cout << validPermutations(str);
  return 0;
}",Count of distinct permutation of a String obtained by swapping only unequal characters.
840,Counts paths from a point to reach Origin | C ++ program to count total number of paths from a point to origin ; DP based function to count number of paths ; Fill entries in bottommost row and leftmost columns ; Fill DP in bottom up manner ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
int countPaths(int n, int m) {
  int dp[n + 1][m + 1];
  for (int i = 0; i <= n; i++)
    dp[i][0] = 1;
  for (int i = 0; i <= m; i++)
    dp[0][i] = 1;
  for (int i = 1; i <= n; i++)
    for (int j = 1; j <= m; j++)
      dp[i][j] = dp[i - 1][j] + dp[i][j - 1];
  return dp[n][m];
}
int main() {
  int n = 3, m = 2;
  cout << "" Number of Paths "" << countPaths(n, m);
  return 0;
}",Counts paths from a point to reach Origin.
841,"Coin Change | DP | Recursive C ++ program for coin change problem . ; Returns the count of ways we can sum S [ 0. . . m - 1 ] coins to get sum n ; If n is 0 then there is 1 solution ( do not include any coin ) ; If n is less than 0 then no solution exists ; If there are no coins and n is greater than 0 , then no solution exist ; count is sum of solutions ( i ) including S [ m - 1 ] ( ii ) excluding S [ m - 1 ] ; Driver code","#include <bits/stdc++.h>
using namespace std;
int count(int S[], int m, int n) {
  if (n == 0)
    return 1;
  if (n < 0)
    return 0;
  if (m <= 0 && n >= 1)
    return 0;
  return count(S, m - 1, n) + count(S, m, n - S[m - 1]);
}
int main() {
  int i, j;
  int arr[] = {1, 2, 3};
  int m = sizeof(arr) / sizeof(arr[0]);
  cout << "" "" << count(arr, m, 4);
  return 0;
}",Coin Change.
842,Coin Change | DP | Either Pick this coin or not ; else We have no option but to leave this coin ; cin >> tc ;,"#include <bits/stdc++.h>
using namespace std;
int coinchange(vector<int> &a, int v, int n, vector<vector<int>> &dp) {
  if (v == 0)
    return dp[n][v] = 1;
  if (n == 0)
    return 0;
  if (dp[n][v] != -1)
    return dp[n][v];
  if (a[n - 1] <= v) {
    return dp[n][v] =
               coinchange(a, v - a[n - 1], n, dp) + coinchange(a, v, n - 1, dp);
  }
  return dp[n][v] = coinchange(a, v, n - 1, dp);
}
int32_t main() {
  int tc = 1;
  while (tc--) {
    int n, v;
    n = 3, v = 4;
    vector<int> a = {1, 2, 3};
    vector<vector<int>> dp(n + 1, vector<int>(v + 1, -1));
    int res = coinchange(a, v, n, dp);
    cout << res << endl;
  }
}",Coin Change.
843,"Check if two strings are same ignoring their cases | Function to compare two strings ignoring their cases ; Convert to uppercase using transform ( ) function and :: toupper in STL ; Comparing both using inbuilt function ; if strings are equal , return true otherwise false ; Function to print the same or not same if strings are equal or not equal ; Driver Code","#include <bits/stdc++.h>
using namespace std;
bool equalIgnoreCase(string str1, string str2) {
  int i = 0;
  transform(str1.begin(), str1.end(), str1.begin(), ::toupper);
  transform(str2.begin(), str2.end(), str2.begin(), ::toupper);
  int x = str1.compare(str2);
  if (x != 0)
    return false;
  else
    return true;
}
void equalIgnoreCaseUtil(string str1, string str2) {
  bool res = equalIgnoreCase(str1, str2);
  if (res == true)
    cout << ""Same"" << endl;
  else
    cout << ""Not Same"" << endl;
}
int main() {
  string str1, str2;
  str1 = ""Geeks"";
  str2 = ""geeks"";
  equalIgnoreCaseUtil(str1, str2);
  str1 = ""Geek"";
  str2 = ""geeksforgeeks"";
  equalIgnoreCaseUtil(str1, str2);
  return 0;
}",Check if two strings are same ignoring their cases.
844,Replace every consonant sequence with its length in the given string | C ++ implementation of the approach ; Function to return the converted string after replacing every consonant sequence with its length ; To store the resultant string ; Checking each character for consonant sequence ; Count the length of consonants sequence ; Add the length in the string ; Add the vowel ; Check for the last consonant sequence in the string ; Return the resultant string ; Driver code,"#include <bits/stdc++.h>
using namespace std;
string replaceConsonants(string str) {
  string res = """";
  int i = 0, count = 0;
  while (i < str.length()) {
    if (str[i] != 'a' && str[i] != 'e' && str[i] != 'i' && str[i] != 'o' &&
        str[i] != 'u') {
      i++;
      count++;
    } else {
      if (count > 0)
        res += to_string(count);
      res += str[i];
      i++;
      count = 0;
    }
  }
  if (count > 0)
    res += to_string(count);
  return res;
}
int main() {
  string str = ""abcdeiop"";
  cout << replaceConsonants(str);
  return 0;
}",Replace every consonant sequence with its length in the given string.
845,Encrypt string with product of number of vowels and consonants in substring of size k | CPP Program to Encrypt string with product of number of vowels and consonants in every substring of size k ; isVowel ( ) is a function that returns true for a vowel and false otherwise . ; function to Encrypt the dtring ; for each substring ; substring of size k ; counting number of vowels and consonants ; append product to answer . ; Driven Program,"#include <bits/stdc++.h>
using namespace std;
bool isVowel(char c) { return (c == 'a' c == 'e' c == 'i' c == 'o' c == 'u'); }
string encryptString(string s, int n, int k) {
  int countVowels = 0;
  int countConsonants = 0;
  string ans = """";
  for (int l = 0; l <= n - k; l++) {
    countVowels = 0;
    countConsonants = 0;
    for (int r = l; r <= l + k - 1; r++) {
      if (isVowel(s[r]) == true)
        countVowels++;
      else
        countConsonants++;
    }
    ans += to_string(countVowels * countConsonants);
  }
  return ans;
}
int main() {
  string s = ""hello"";
  int n = s.length();
  int k = 2;
  cout << encryptString(s, n, k) << endl;
  return 0;
}",Encrypt string with product of number of vowels and consonants in substring of size k.
846,String containing first letter of every word in a given string with spaces | C ++ implementation of the above approach ; we are splitting the input based on spaces ( s ) + : this regular expression will handle scenarios where we have words separated by multiple spaces ; charAt ( 0 ) will pick only the first character from the string and append to buffer ; Driver code,"#include <bits/stdc++.h>
using namespace std;
string processWords(char *input) {
  char *p;
  vector<string> s;
  p = strtok(input, "" "");
  while (p != NULL) {
    s.push_back(p);
    p = strtok(NULL, "" "");
  }
  string charBuffer;
  for (string values : s)
    charBuffer += values[0];
  return charBuffer;
}
int main() {
  char input[] = ""geeks for geeks"";
  cout << processWords(input);
  return 0;
}",String containing first letter of every word in a given string with spaces.
847,"Generate all binary strings without consecutive 1 's | C ++ program to Generate all binary string without consecutive 1 's of size K ; A utility function generate all string without consecutive 1 'sof size K ; Print binary string without consecutive 1 's ; Terminate binary string ; If previous character is '1' then we put only 0 at end of string example str = ""01"" then new string be ""010"" ; If previous character is '0' than we put both '1' and '0' at end of string example str = ""00"" then new string ""001"" and ""000"" ; Function generate all binary string without consecutive 1 's ; Base case ; One by one stores every binary string of length K ; Generate all Binary string starts with '0' ; Generate all Binary string starts with '1' ; Driver program to test above function","#include <bits/stdc++.h>
using namespace std;
void generateAllStringsUtil(int K, char str[], int n) {
  if (n == K) {
    str[n] = '\0';
    cout << str << "" "";
    return;
  }
  if (str[n - 1] == '1') {
    str[n] = '0';
    generateAllStringsUtil(K, str, n + 1);
  }
  if (str[n - 1] == '0') {
    str[n] = '0';
    generateAllStringsUtil(K, str, n + 1);
    str[n] = '1';
    generateAllStringsUtil(K, str, n + 1);
  }
}
void generateAllStrings(int K) {
  if (K <= 0)
    return;
  char str[K];
  str[0] = '0';
  generateAllStringsUtil(K, str, 1);
  str[0] = '1';
  generateAllStringsUtil(K, str, 1);
}
int main() {
  int K = 3;
  generateAllStrings(K);
  return 0;
}",Generate all binary strings without consecutive 1 's.
848,Largest right circular cylinder within a cube | C ++ Program to find the biggest right circular cylinder that can be fit within a cube ; Function to find the biggest right circular cylinder ; side cannot be negative ; radius of right circular cylinder ; height of right circular cylinder ; volume of right circular cylinder ; Driver code,"#include <bits/stdc++.h>
using namespace std;
float findVolume(float a) {
  if (a < 0)
    return -1;
  float r = a / 2;
  float h = a;
  float V = 3.14 * pow(r, 2) * h;
  return V;
}
int main() {
  float a = 5;
  cout << findVolume(a) << endl;
  return 0;
}",Largest right circular cylinder within a cube.
849,Program for volume of Pyramid | CPP program to find the volume . ; Function to find the volume of triangular pyramid ; Function to find the volume of square pyramid ; Function to find the volume of pentagonal pyramid ; Function to find the volume of hexagonal pyramid ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
float volumeTriangular(int a, int b, int h) {
  float vol = (0.1666) * a * b * h;
  return vol;
}
float volumeSquare(int b, int h) {
  float vol = (0.33) * b * b * h;
  return vol;
}
float volumePentagonal(int a, int b, int h) {
  float vol = (0.83) * a * b * h;
  return vol;
}
float volumeHexagonal(int a, int b, int h) {
  float vol = a * b * h;
  return vol;
}
int main() {
  int b = 4, h = 9, a = 4;
  cout << ""Volume of triangular""
       << "" base pyramid is "" << volumeTriangular(a, b, h) << endl;
  cout << ""Volume of square ""
       << "" base pyramid is "" << volumeSquare(b, h) << endl;
  cout << ""Volume of pentagonal""
       << "" base pyramid is "" << volumePentagonal(a, b, h) << endl;
  cout << ""Volume of Hexagonal""
       << "" base pyramid is "" << volumeHexagonal(a, b, h);
  return 0;
}",Program for volume of Pyramid.
850,Program to find area of a Trapezoid | C ++ program to calculate area of a trapezoid ; Function for the area ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
double Area(int b1, int b2, int h) { return ((b1 + b2) / 2) * h; }
int main() {
  int base1 = 8, base2 = 10, height = 6;
  double area = Area(base1, base2, height);
  cout << ""Area is: "" << area;
  return 0;
}",Program to find area of a Trapezoid.
851,Find number of diagonals in n sided convex polygon | C ++ function to find number of diagonals in n sided convex polygon ; driver code to test above function,"#include <iostream>
using namespace std;
int numberOfDiagonals(int n) { return n * (n - 3) / 2; }
int main() {
  int n = 5;
  cout << n << "" sided convex polygon have "";
  cout << numberOfDiagonals(n) << "" diagonals"";
  return 0;
}",Find number of diagonals in n sided convex polygon.
852,Area of the largest Rectangle without a given point | C ++ implementation to find area of largest Rectangle without hole within a given Rectangle ; Function to find the maximum area such that it does not contains any hole ; Area for all the possible positions of the cut ; Find the maximum area among the above rectangles ; Driver Code ; Function call,"#include <bits/stdc++.h>
using namespace std;
void maximumArea(int l, int b, int x, int y) {
  int left, right, above, below;
  left = x * b;
  right = (l - x - 1) * b;
  above = l * y;
  below = (b - y - 1) * l;
  cout << max(max(left, right), max(above, below));
}
int main() {
  int L = 8, B = 8;
  int X = 0, Y = 0;
  maximumArea(l, b, x, y);
  return 0;
}",Area of the largest Rectangle without a given point.
853,"Minimize cost of removals required to make all remaining characters of the string unique | C ++ program for the above approach ; Function to find the minimum cost of removing characters to make the string unique ; Store the minimum cost required ; Create a dictionary to store the maximum cost of removal a character ; Create a dictionary to store the total deletion cost of a character ; Traverse the string , S ; Keep track of maximum cost of each character ; Update the maximum deletion cost ; Keep track of the total cost of each character ; Update the total deletion cost ; Traverse through all the unique characters ; Keep the maximum cost character and delete the rest ; Return the answer ; Driver code ; Given string ; Given cost array ; Function Call","#include <bits/stdc++.h>
using namespace std;
int delCost(string s, int cost[]) {
  int ans = 0;
  map<char, int> forMax;
  map<char, int> forTot;
  for (int i = 0; i < s.length(); i++) {
    if (!forMax[s[i]]) {
      forMax[s[i]] = cost[i];
    } else {
      forMax[s[i]] = max(cost[i], forMax[s[i]]);
    }
    if (!forTot[s[i]]) {
      forTot[s[i]] = cost[i];
    } else {
      forTot[s[i]] = forTot[s[i]] + cost[i];
    }
  }
  for (auto i : forMax) {
    ans += forTot[i.first] - i.second;
  }
  return ans;
}
int main() {
  string s = ""AAABBB"";
  int cost[] = {1, 2, 3, 4, 5, 6};
  cout << (delCost(s, cost));
}",Minimize cost of removals required to make all remaining characters of the string unique.
854,"Smallest divisor of N closest to X | C ++ program for the above approach ; Define macros ; Stores divisors for all numbers in the vector divisors ; i is the divisor and j is the multiple ; Function to compare the closeness of the given target ; Function to find the element closest to target in divisors vector ; Corner cases ; Perform binary search ; Check if target is less than the array element then search in left half ; Check if target is greater than previous to mid , return closest of two ; Repeat for left half ; Check if target is greater than mid ; Update i ; Only single element left after search ; Function to print the divisor of N closest to X ; Function call to calculate and stores divisors of all numbers in a vector ; Stores the closest value to target ; Print the answer ; Driver Code ; Given N & X ; Function Call","#include <bits/stdc++.h>
using namespace std;
#defineMAX10000 vector < vector < int>> divisors(MAX + 1);
void computeDivisors() {
  for (int i = 1; i <= MAX; i++) {
    for (int j = i; j <= MAX; j += i) {
      divisors[j].push_back(i);
    }
  }
}
int getClosest(int val1, int val2, int target) {
  if (target - val1 >= val2 - target)
    return val2;
  else
    return val1;
}
int findClosest(vector<int> &arr, int n, int target) {
  if (target <= arr[0])
    return arr[0];
  if (target >= arr[n - 1])
    return arr[n - 1];
  int i = 0, j = n, mid = 0;
  while (i < j) {
    mid = (i + j) / 2;
    if (arr[mid] == target)
      return arr[mid];
    if (target < arr[mid]) {
      if (mid > 0 && target > arr[mid - 1])
        return getClosest(arr[mid - 1], arr[mid], target);
      j = mid;
    } else {
      if (mid < n - 1 && target < arr[mid + 1])
        return getClosest(arr[mid], arr[mid + 1], target);
      i = mid + 1;
    }
  }
  return arr[mid];
}
void printClosest(int N, int X) {
  computeDivisors();
  int ans = findClosest(divisors[N], divisors[N].size(), X);
  cout << ans;
}
int main() {
  int N = 16, X = 5;
  printClosest(N, X);
}",Smallest divisor of N closest to X.
855,"Count elements of same value placed at same indices of two given arrays | C ++ program for the above approach ; Function to count maximum matched elements from the arrays A [ ] and B [ ] ; Stores position of elements of array A [ ] in the array B [ ] ; Keep track of difference between the indices ; Traverse the array A [ ] ; Traverse the array B [ ] ; If difference is negative , add N to it ; Keep track of the number of shifts required to place elements at same indices ; Return the max matches ; Driver code ; Returns the count of matched elements","#include <bits/stdc++.h>
using namespace std;
int maxMatch(int A[], int B[], int M, int N) {
  map<int, int> Aindex;
  map<int, int> diff;
  for (int i = 0; i < M; i++) {
    Aindex[A[i]] = i;
  }
  for (int i = 0; i < N; i++) {
    if (i - Aindex[B[i]] < 0) {
      diff[M + i - Aindex[B[i]]] += 1;
    } else {
      diff[i - Aindex[B[i]]] += 1;
    }
  }
  int max = 0;
  for (auto ele = diff.begin(); ele != diff.end(); ele++) {
    if (ele->second > max) {
      max = ele->second;
    }
  }
  return max;
}
int main() {
  int A[] = {5, 3, 7, 9, 8};
  int B[] = {8, 7, 3, 5, 9};
  int M = sizeof(A) / sizeof(A[0]);
  int N = sizeof(B) / sizeof(B[0]);
  cout << maxMatch(A, B, M, N);
  return 0;
}",Count elements of same value placed at same indices of two given arrays.
856,"Check if given Sudoku solution is valid or not | C ++ program to implement the above approach ; Function to check if all elements of the board [ ] [ ] array store value in the range [ 1 , 9 ] ; Traverse board [ ] [ ] array ; Check if board [ i ] [ j ] lies in the range ; Function to check if the solution of sudoku puzzle is valid or not ; Check if all elements of board [ ] [ ] stores value in the range [ 1 , 9 ] ; Stores unique value from 1 to N ; Traverse each row of the given array ; Initialize unique [ ] array to false ; Traverse each column of current row ; Stores the value of board [ i ] [ j ] ; Check if current row stores duplicate value ; Traverse each column of the given array ; Initialize unique [ ] array to false ; Traverse each row of current column ; Stores the value of board [ j ] [ i ] ; Check if current column stores duplicate value ; Traverse each block of size 3 * 3 in board [ ] [ ] array ; j stores first column of each 3 * 3 block ; Initialize unique [ ] array to false ; Traverse current block ; Stores row number of current block ; Stores column number of current block ; Stores the value of board [ X ] [ Y ] ; Check if current block stores duplicate value ; If all conditions satisfied ; Driver Code","#include <bits/stdc++.h>
using namespace std;
#defineN9 bool isinRange(int board[][N]) {
  for (int i = 0; i < N; i++) {
    for (int j = 0; j < N; j++) {
      if (board[i][j] <= 0 board[i][j] > 9) {
        return false;
      }
    }
  }
  return true;
}
bool isValidSudoku(int board[][N]) {
  if (isinRange(board) == false) {
    return false;
  }
  bool unique[N + 1];
  for (int i = 0; i < N; i++) {
    memset(unique, false, sizeof(unique));
    for (int j = 0; j < N; j++) {
      int Z = board[i][j];
      if (unique[Z]) {
        return false;
      }
      unique[Z] = true;
    }
  }
  for (int i = 0; i < N; i++) {
    memset(unique, false, sizeof(unique));
    for (int j = 0; j < N; j++) {
      int Z = board[j][i];
      if (unique[Z]) {
        return false;
      }
      unique[Z] = true;
    }
  }
  for (int i = 0; i < N - 2; i += 3) {
    for (int j = 0; j < N - 2; j += 3) {
      memset(unique, false, sizeof(unique));
      for (int k = 0; k < 3; k++) {
        for (int l = 0; l < 3; l++) {
          int X = i + k;
          int Y = j + l;
          int Z = board[X][Y];
          if (unique[Z]) {
            return false;
          }
          unique[Z] = true;
        }
      }
    }
  }
  return true;
}
int main() {
  int board[N][N] = {{7, 9, 2, 1, 5, 4, 3, 8, 6}, {6, 4, 3, 8, 2, 7, 1, 5, 9},
                     {8, 5, 1, 3, 9, 6, 7, 2, 4}, {2, 6, 5, 9, 7, 3, 8, 4, 1},
                     {4, 8, 9, 5, 6, 1, 2, 7, 3}, {3, 1, 7, 4, 8, 2, 9, 6, 5},
                     {1, 3, 6, 7, 4, 8, 5, 9, 2}, {9, 7, 4, 2, 1, 5, 6, 3, 8},
                     {5, 2, 8, 6, 3, 9, 4, 1, 7}};
  if (isValidSudoku(board)) {
    cout << ""Valid"";
  } else {
    cout << ""Not Valid"";
  }
}",Check if given Sudoku solution is valid or not.
857,Subarray of length K whose concatenation forms a palindrome | C ++ program for the above approach ; Function to check if a number is Palindrome or not here i is the starting index and j is the last index of the subarray ; If the integer at i is not equal to j then the subarray is not palindrome ; Otherwise ; all a [ i ] is equal to a [ j ] then the subarray is palindrome ; Function to find a subarray whose concatenation forms a palindrome and return its starting index ; Iterating over subarray of length k and checking if that subarray is palindrome ; If no subarray is palindrome ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
bool palindrome(vector<int> a, int i, int j) {
  while (i < j) {
    if (a[i] != a[j])
      return false;
    i++;
    j--;
  }
  return true;
}
int findSubArray(vector<int> arr, int k) {
  int n = sizeof(arr) / sizeof(arr[0]);
  for (int i = 0; i <= n - k; i++) {
    if (palindrome(arr, i, i + k - 1))
      return i;
  }
  return -1;
}
int main() {
  vector<int> arr = {2, 3, 5, 1, 3};
  int k = 4;
  int ans = findSubArray(arr, k);
  if (ans == -1)
    cout << -1 << ""\n"";
  else {
    for (int i = ans; i < ans + k; i++)
      cout << arr[i] << "" "";
    cout << ""\n"";
  }
  return 0;
}",Subarray of length K whose concatenation forms a palindrome.
858,"Check if a sequence of path visits any coordinate twice or not | C ++ program for the above approach ; Function to check if the man crosses previous visited coordinate or not ; Stores the count of crossed vertex ; Stores ( x , y ) coordinates ; The coordinates for the origin ; Iterate over the string ; Condition to increment X or Y co - ordinates respectively ; Check if ( x , y ) is already visited ; Print the result ; Driver Code ; Given string ; Function Call","#include <bits/stdc++.h>
using namespace std;
bool isCrossed(string path) {
  if (path.size() == 0)
    return false;
  bool ans = false;
  set<pair<int, int>> set;
  int x = 0, y = 0;
  set.insert({x, y});
  for (int i = 0; i < path.size(); i++) {
    if (path[i] == 'N')
      set.insert({x, y++});
    if (path[i] == 'S')
      set.insert({x, y--});
    if (path[i] == 'E')
      set.insert({x++, y});
    if (path[i] == 'W')
      set.insert({x--, y});
    if (set.find({x, y}) != set.end()) {
      ans = true;
      break;
    }
  }
  if (ans)
    cout << ""Crossed"";
  else
    cout << ""Not Crossed"";
}
int main() {
  string path = ""NESW"";
  isCrossed(path);
  return 0;
}",Check if a sequence of path visits any coordinate twice or not.
859,Maximum width of an N | C ++ program to implement the above approach ; Function to find the maximum width of the tree using level order traversal ; Store the edges of the tree ; Stores maximum width of the tree ; Stores the nodes of each level ; Insert root node ; Perform level order traversal on the tree ; Stores the size of the queue ; Update maximum width ; Push the nodes of the next level and pop the elements of the current level ; Get element from the front the Queue ; Push all nodes of the next level . ; Return the result . ; Driver Code ; Constructed tree is : 1 / | \ 2 - 1 3 / \ \ 4 5 8 / / | \ 2 6 12 7,"#include <bits/stdc++.h>
using namespace std;
int maxWidth(int N, int M, vector<int> cost, vector<vector<int>> s) {
  vector<int> adj[N];
  for (int i = 0; i < M; i++) {
    adj[s[i][0]].push_back(s[i][1]);
  }
  int result = 0;
  queue<int> q;
  q.push(0);
  while (!q.empty()) {
    int count = q.size();
    result = max(count, result);
    while (count--) {
      int temp = q.front();
      q.pop();
      for (int i = 0; i < adj[temp].size(); i++) {
        q.push(adj[temp][i]);
      }
    }
  }
  return result;
}
int main() {
  int N = 11, M = 10;
  vector<vector<int>> edges;
  edges.push_back({0, 1});
  edges.push_back({0, 2});
  edges.push_back({0, 3});
  edges.push_back({1, 4});
  edges.push_back({1, 5});
  edges.push_back({3, 6});
  edges.push_back({4, 7});
  edges.push_back({6, 10});
  edges.push_back({6, 8});
  edges.push_back({6, 9});
  vector<int> cost = {1, 2, -1, 3, 4, 5, 8, 2, 6, 12, 7};
  cout << maxWidth(N, M, cost, edges);
  return 0;
}",Maximum width of an N.
860,Minimize sum of prime numbers added to make an array non | C ++ Program to implement the above approach ; Stores if an index is a prime / non - prime value ; Stores the prime ; Function to generate all prime numbers ; If current element is prime ; Set all its multiples non - prime ; Store all prime numbers ; Function to find the closest prime to a particular number ; Applying binary search on primes vector ; If the prime added makes the elements equal ; Return this as the closest prime ; If the array remains non - decreasing ; Search for a bigger prime number ; Otherwise ; Check if a smaller prime can make array non - decreasing or not ; Return closest number ; Function to find the minimum cost ; Find all primes ; Store the result ; Iterate over the array ; Current element is less than the previous element ; Find the closest prime which makes the array non decreasing ; Add to overall cost ; Update current element ; Return the minimum cost ; Driver Code ; Given array ; Function Call,"#include <bits/stdc++.h>
using namespace std;
#defineMAX10000000 bool isPrime[MAX];
vector<int> primes;
void SieveOfEratosthenes() {
  memset(isPrime, true, sizeof(isPrime));
  for (int p = 2; p * p <= MAX; p++) {
    if (isPrime[p] == true) {
      for (int i = p * p; i <= MAX; i += p)
        isPrime[i] = false;
    }
  }
  for (int p = 2; p <= MAX; p++)
    if (isPrime[p])
      primes.push_back(p);
}
int prime_search(vector<int> primes, int diff) {
  int low = 0;
  int high = primes.size() - 1;
  int res;
  while (low <= high) {
    int mid = (low + high) / 2;
    if (primes[mid] == diff) {
      return primes[mid];
    } else if (primes[mid] < diff) {
      low = mid + 1;
    } else {
      res = primes[mid];
      high = mid - 1;
    }
  }
  return res;
}
int minCost(int arr[], int n) {
  SieveOfEratosthenes();
  int res = 0;
  for (int i = 1; i < n; i++) {
    if (arr[i] < arr[i - 1]) {
      int diff = arr[i - 1] - arr[i];
      int closest_prime = prime_search(primes, diff);
      res += closest_prime;
      arr[i] += closest_prime;
    }
  }
  return res;
}
int main() {
  int arr[] = {2, 1, 5, 4, 3};
  int n = 5;
  cout << minCost(arr, n);
  return 0;
}",Minimize sum of prime numbers added to make an array non.
861,Count ways to split a Binary String into three substrings having equal count of zeros | C ++ implementation for the above approach ; Function to return ways to split a string into three parts with the equal number of 0 ; Store total count of 0 s ; Count total no . of 0 s character in given string ; If total count of 0 character is not divisible by 3 ; Initialize mp to store frequency of k ; Traverse string to find ways to split string ; Increment count if 0 appears ; Increment result if sum equal to 2 * k and k exists in mp ; Insert sum in mp ; Return result ; Driver Code ; Given string ; Function call,"#include <bits/stdc++.h>
using namespace std;
int count(string s) {
  int cnt = 0;
  for (char c : s) {
    cnt += c == '0' ? 1 : 0;
  }
  if (cnt % 3 != 0)
    return 0;
  int res = 0, k = cnt / 3, sum = 0;
  map<int, int> mp;
  for (int i = 0; i < s.length(); i++) {
    sum += s[i] == '0' ? 1 : 0;
    if (sum == 2 * k && mp.find(k) != mp.end() && i < s.length() - 1 && i > 0) {
      res += mp[k];
    }
    mp[sum]++;
  }
  return res;
}
int main() {
  string str = ""01010"";
  cout << count(str);
}",Count ways to split a Binary String into three substrings having equal count of zeros.
862,Count ways to split a Binary String into three substrings having equal count of zeros | C ++ program for above approach ; Function to calculate the number of ways to split ; Calculating the total number of zeros ; Case1 If total count of zeros is not divisible by 3 ; Case2 if total count of zeros is zero ; Number of zeros in each substring ; Initialising zero to the number of ways for first and second cut ; Initializing the count ; Traversing from the beginning ; Incrementing the count if the element is '0' ; Incrementing the ways for the 1 st cut if count is equal to zeros required in each substring ; Incrementing the ways for the 2 nd cut if count is equal to 2 * ( zeros required in each substring ) ; Total number of ways to split is multiplication of ways for the 1 st and 2 nd cut ; Driver Code ; Function Call,"#include <bits/stdc++.h>
using namespace std;
int splitstring(string s) {
  int n = s.length();
  int zeros = 0;
  for (int i = 0; i < n; i++)
    if (s[i] == '0')
      zeros++;
  if (zeros % 3 != 0)
    return 0;
  if (zeros == 0)
    return ((n - 1) * (n - 2)) / 2;
  int zerosInEachSubstring = zeros / 3;
  int waysOfFirstCut = 0, waysOfSecondCut = 0;
  int count = 0;
  for (int i = 0; i < n; i++) {
    if (s[i] == '0')
      count++;
    if (count == zerosInEachSubstring)
      waysOfFirstCut++;
    else if (count == 2 * zerosInEachSubstring)
      waysOfSecondCut++;
  }
  return waysOfFirstCut * waysOfSecondCut;
}
int main() {
  string s = ""01010"";
  cout << ""The number of ways to split is "" << splitstring(s) << endl;
}",Count ways to split a Binary String into three substrings having equal count of zeros.
863,"Check if a string can be converted to another by swapping of adjacent characters of given type | C ++ program for the above approach ; Function to check if it is possible to transform start to end ; Check the sequence of A , B in both strings str1 and str2 ; If both the strings are not equal ; Traverse the strings ; Check for indexes of A and B ; Driver Code ; Function Call","#include <bits/stdc++.h>
using namespace std;
bool canTransform(string str1, string str2) {
  string s1 = """";
  string s2 = """";
  for (char c : str1) {
    if (c != 'C') {
      s1 += c;
    }
  }
  for (char c : str2) {
    if (c != 'C') {
      s2 += c;
    }
  }
  if (s1 != s2)
    return false;
  int i = 0;
  int j = 0;
  int n = str1.length();
  while (i < n and j < n) {
    if (str1[i] == 'C') {
      i++;
    } else if (str2[j] == 'C') {
      j++;
    } else {
      if ((str1[i] == 'A' and i < j) or (str1[i] == 'B' and i > j)) {
        return false;
      }
      i++;
      j++;
    }
  }
  return true;
}
int main() {
  string str1 = ""BCCABCBCA"";
  string str2 = ""CBACCBBAC"";
  if (canTransform(str1, str2)) {
    cout << ""Yes"";
  } else {
    cout << ""No"";
  }
  return 0;
}",Check if a string can be converted to another by swapping of adjacent characters of given type.
864,Longest Substring having equal count of Vowels and Consonants | C ++ Program to implement the above approach ; Function to return the length of the longest substring having equal number of vowel and consonant ; Generate the array ; Initialize variable to store result ; Stores the sum of subarray ; Map to store indices of the sum ; Loop through the array ; If sum is 0 ; Count of vowels and consonants are equal ; Update the maximum length of substring in HashMap ; Store the index of the sum ; Return the maximum length of required substring ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
int maxsubstringLength(string S, int N) {
  int arr[N];
  for (int i = 0; i < N; i++)
    if (S[i] == 'a' S[i] == 'e' S[i] == 'i' S[i] == 'o' S[i] == 'u')
      arr[i] = 1;
    else
      arr[i] = -1;
  int maxLen = 0;
  int curr_sum = 0;
  unordered_map<int, int> hash;
  for (int i = 0; i < N; i++) {
    curr_sum += arr[i];
    if (curr_sum == 0)
      maxLen = max(maxLen, i + 1);
    if (hash.find(curr_sum) != hash.end())
      maxLen = max(maxLen, i - hash[curr_sum]);
    else
      hash[curr_sum] = i;
  }
  return maxLen;
}
int main() {
  string S = ""geeksforgeeks"";
  int n = sizeof(S) / sizeof(S[0]);
  cout << maxsubstringLength(S, n);
  return 0;
}",Longest Substring having equal count of Vowels and Consonants.
865,"Minimum Distance from a given Cell to all other Cells of a Matrix | C ++ Program to implement the above approach ; Stores the accessible directions ; Function to find the minimum distance from a given cell to all other cells in the matrix ; Stores the accessible cells from current cell ; Insert pair ( x , y ) ; Iterate untill queue is empty ; Extract the pair ; Pop them ; Checking boundary condition ; If the cell is not visited ; Assign the minimum distance ; Insert the traversed neighbour into the queue ; Driver Code ; Print the required distances","#include <bits/stdc++.h>
using namespace std;
int mat[1001][1001];
int r, c, x, y;
int dx[] = {0, -1, -1, -1, 0, 1, 1, 1};
int dy[] = {1, 1, 0, -1, -1, -1, 0, 1};
void FindMinimumDistance() {
  queue<pair<int, int>> q;
  q.push({x, y});
  mat[x][y] = 0;
  while (!q.empty()) {
    x = q.front().first;
    y = q.front().second;
    q.pop();
    for (int i = 0; i < 8; i++) {
      int a = x + dx[i];
      int b = y + dy[i];
      if (a < 0 a >= r b >= c b < 0)
        continue;
      if (mat[a][b] == 0) {
        mat[a][b] = mat[x][y] + 1;
        q.push({a, b});
      }
    }
  }
}
int main() {
  r = 5, c = 5, x = 1, y = 1;
  int t = x;
  int l = y;
  mat[x][y] = 0;
  FindMinimumDistance();
  mat[t][l] = 0;
  for (int i = 0; i < r; i++) {
    for (int j = 0; j < c; j++) {
      cout << mat[i][j] << "" "";
    }
    cout << endl;
  }
}",Minimum Distance from a given Cell to all other Cells of a Matrix.
866,Minimum flips required to convert given string into concatenation of equal substrings of length K | C ++ Program to implement the above approach ; Function that returns the minimum number of flips to convert the s into a concatenation of K - length sub - string ; Stores the result ; Iterate through string index ; Stores count of 0 s & 1 s ; Iterate making K jumps ; Count 0 's ; Count 1 's ; Add minimum flips for index i ; Return minimum number of flips ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
int minOperations(string S, int K) {
  int ans = 0;
  for (int i = 0; i < K; i++) {
    int zero = 0, one = 0;
    for (int j = i; j < S.size(); j += K) {
      if (S[j] == '0')
        zero++;
      else
        one++;
    }
    ans += min(zero, one);
  }
  return ans;
}
int main() {
  string S = ""110100101"";
  int K = 3;
  cout << minOperations(S, K);
  return 0;
}",Minimum flips required to convert given string into concatenation of equal substrings of length K.
867,Find the missing number in unordered Arithmetic Progression | C ++ program for the above approach ; Function to get the missing element ; For maximum Element in the array ; For minimum Element in the array ; For xor of all elements ; Common difference of AP series ; find maximum and minimum element ; Calculating common difference ; Calculate the XOR of all elements ; Perform XOR with actual AP series resultant x will be the ans ; Return the missing element ; Driver Code ; Given array ; Function Call ; Print the missing element,"#include <bits/stdc++.h>
using namespace std;
int missingElement(int arr[], int n) {
  int max_ele = arr[0];
  int min_ele = arr[0];
  int x = 0;
  int d;
  for (int i = 0; i < n; i++) {
    if (arr[i] > max_ele)
      max_ele = arr[i];
    if (arr[i] < min_ele)
      min_ele = arr[i];
  }
  d = (max_ele - min_ele) / n;
  for (int i = 0; i < n; i++) {
    x = x ^ arr[i];
  }
  for (int i = 0; i <= n; i++) {
    x = x ^ (min_ele + (i * d));
  }
  return x;
}
int main() {
  int arr[] = {12, 3, 6, 15, 18};
  int n = sizeof(arr) / sizeof(arr[0]);
  int element = missingElement(arr, n);
  cout << element;
}",Find the missing number in unordered Arithmetic Progression.
868,"Given a string and an integer k , find the kth sub | C ++ implementation of the approach ; Function to prints kth sub - string ; Total sub - strings possible ; If k is greater than total number of sub - strings ; To store number of sub - strings starting with ith character of the string ; Compute the values ; substring [ i - 1 ] is added to store the cumulative sum ; Binary search to find the starting index of the kth sub - string ; To store the ending index of the kth sub - string ; Print the sub - string ; Driver code","#include <bits/stdc++.h>
using namespace std;
void Printksubstring(string str, int n, int k) {
  int total = (n * (n + 1)) / 2;
  if (k > total) {
    printf(""-1\n"");
    return;
  }
  int substring[n + 1];
  substring[0] = 0;
  int temp = n;
  for (int i = 1; i <= n; i++) {
    substring[i] = substring[i - 1] + temp;
    temp--;
  }
  int l = 1;
  int h = n;
  int start = 0;
  while (l <= h) {
    int m = (l + h) / 2;
    if (substring[m] > k) {
      start = m;
      h = m - 1;
    } else if (substring[m] < k)
      l = m + 1;
    else {
      start = m;
      break;
    }
  }
  int end = n - (substring[start] - k);
  for (int i = start - 1; i < end; i++)
    cout << str[i];
}
int main() {
  string str = ""abc"";
  int k = 4;
  int n = str.length();
  Printksubstring(str, n, k);
  return 0;
}","Given a string and an integer k , find the kth sub."
869,Lower Insertion Point | C ++ program to find the lower insertion point of an element in a sorted array ; Function to return the lower insertion point of an element in a sorted array ; Base cases ; Final check for the remaining elements which are < X ; Driver code,"#include <iostream>
using namespace std;
int LowerInsertionPoint(int arr[], int n, int X) {
  if (X < arr[0])
    return 0;
  else if (X > arr[n - 1])
    return n;
  int lowerPnt = 0;
  int i = 1;
  while (i < n && arr[i] < X) {
    lowerPnt = i;
    i = i * 2;
  }
  while (lowerPnt < n && arr[lowerPnt] < X)
    lowerPnt++;
  return lowerPnt;
}
int main() {
  int arr[] = {2, 3, 4, 4, 5, 6, 7, 9};
  int n = sizeof(arr) / sizeof(arr[0]);
  int X = 4;
  cout << LowerInsertionPoint(arr, n, X);
  return 0;
}",Lower Insertion Point.
870,Number of positions with Same address in row major and column major order | CPP Program to count the number of positions with same address in row major and column major order ; Returns count of required positions ; horizontal 1D array ; vertical 1D array ; iterating for all possible i ; checking if j is integer ; checking if j lies b / w 1 to N ; iterating for all possible j ; checking if i is integer ; checking if i lies b / w 1 to M ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
int getCount(int M, int N) {
  int count = 0;
  if (M == 1)
    return N;
  if (N == 1)
    return M;
  if (N > M) {
    for (int i = 1; i <= M; i++) {
      int numerator = N * i - N + M - i;
      int denominator = M - 1;
      if (numerator % denominator == 0) {
        int j = numerator / denominator;
        if (j >= 1 && j <= N)
          count++;
      }
    }
  } else {
    for (int j = 1; j <= N; j++) {
      int numerator = M * j - M + N - j;
      int denominator = N - 1;
      if (numerator % denominator == 0) {
        int i = numerator / denominator;
        if (i >= 1 && i <= M)
          count++;
      }
    }
  }
  return count;
}
int main() {
  int M = 3, N = 5;
  cout << getCount(M, N) << endl;
  return 0;
}",Number of positions with Same address in row major and column major order.
871,Maximum in an array that can make another array sorted | C ++ program to make array sorted ; Function to check whether there is any swappable element present to make the first array sorted ; wrongIdx is the index of the element which is making the first array unsorted ; Find the maximum element which satisfies the the above mentioned neighboring conditions ; if res is true then swap the element and make the first array sorted ; Function to print the sorted array if elements are swapped . ; Drivers code,"#include <bits/stdc++.h>
using namespace std;
bool swapElement(int arr1[], int arr2[], int n) {
  int wrongIdx = 0;
  for (int i = 1; i < n; i++) {
    if (arr1[i] < arr1[i - 1])
      wrongIdx = i;
  }
  int maximum = INT_MIN;
  int maxIdx = -1;
  bool res = false;
  for (int i = 0; i < n; i++) {
    if (arr2[i] > maximum && arr2[i] >= arr1[wrongIdx - 1]) {
      if (wrongIdx + 1 <= n - 1 && arr2[i] <= arr1[wrongIdx + 1]) {
        maximum = arr2[i];
        maxIdx = i;
        res = true;
      }
    }
  }
  if (res)
    swap(arr1[wrongIdx], arr2[maxIdx]);
  return res;
}
void getSortedArray(int arr1[], int arr2[], int n) {
  if (swapElement(arr1, arr2, n))
    for (int i = 0; i < n; i++)
      cout << arr1[i] << "" "";
  else
    cout << ""Not Possible"" << endl;
}
int main() {
  int arr1[] = {1, 3, 7, 4, 10};
  int arr2[] = {2, 1, 6, 8, 9};
  int n = sizeof(arr1) / sizeof(arr1[0]);
  getSortedArray(arr1, arr2, n);
}",Maximum in an array that can make another array sorted.
872,Middle of three using minimum comparisons | CPP program to find middle of three distinct numbers ; Function to find the middle of three numbers ; Compare each three number to find middle number . Enter only if a > b ; Decided a is not greater than b . ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
int middleOfThree(int a, int b, int c) {
  if (a > b) {
    if (b > c)
      return b;
    else if (a > c)
      return c;
    else
      return a;
  } else {
    if (a > c)
      return a;
    else if (b > c)
      return c;
    else
      return b;
  }
}
int main() {
  int a = 20, b = 30, c = 40;
  cout << middleOfThree(a, b, c);
  return 0;
}",Middle of three using minimum comparisons.
873,Sort the matrix column | C ++ program for the above approach ; Function to find the transpose of the matrix mat [ ] ; Stores the transpose of matrix mat [ ] [ ] ; Traverse each row of the matrix ; Traverse each column of the matrix ; Transpose matrix elements ; Function to sort the given matrix in row wise manner ; Traverse the row ; Row - Wise Sorting ; Function to print the matrix in column wise sorted manner ; Function call to find transpose of the the matrix mat [ ] [ ] ; Sorting the matrix row - wise ; Calculate transpose of B [ ] [ ] ; Print the matrix mat [ ] [ ] ; Driver Code ; Input ; Function call to print the matrix in column wise sorted manner,"#include <bits/stdc++.h>
using namespace std;
vector<vector<int>> transpose(vector<vector<int>> mat, int row, int col) {
  vector<vector<int>> tr(col, vector<int>(row));
  for (int i = 0; i < row; i++) {
    for (int j = 0; j < col; j++) {
      tr[j][i] = mat[i][j];
    }
  }
  return tr;
}
void RowWiseSort(vector<vector<int>> &B) {
  for (int i = 0; i < (int)B.size(); i++) {
    sort(B[i].begin(), B[i].end());
  }
}
void sortCol(vector<vector<int>> mat, int N, int M) {
  vector<vector<int>> B = transpose(mat, N, M);
  RowWiseSort(B);
  mat = transpose(B, M, N);
  for (int i = 0; i < N; i++) {
    for (int j = 0; j < M; j++) {
      cout << mat[i][j] << "" "";
    }
    cout <<'';
  }
}
int main() {
  vector<vector<int>> mat = {{1, 6, 10}, {8, 5, 9}, {9, 4, 15}, {7, 3, 60}};
  int N = mat.size();
  int M = mat[0].size();
  sortCol(mat, N, M);
  return 0;
}",Sort the matrix column.
874,Largest area possible after removal of a series of horizontal & vertical bars | C ++ program for the above approach ; Function to find the largest area when a series of horizontal & vertical bars are removed ; Stores all bars ; Insert horizontal bars ; Insert vertictal bars ; Remove horizontal separators from s1 ; Remove vertical separators from s2 ; Stores left out horizontal and vertical separators ; Sort both list in ascending order ; Find maximum difference of neighbors of list1 ; Find max difference of neighbors of list2 ; Print largest volume ; Driver code ; Given value of N & M ; Given arrays ; Function call to find the largest area when a series of horizontal & vertical bars are removed,"#include <bits/stdc++.h>
using namespace std;
void largestArea(int N, int M, int H[], int V[], int h, int v) {
  set<int> s1;
  set<int> s2;
  for (int i = 1; i <= N + 1; i++)
    s1.insert(i);
  for (int i = 1; i <= M + 1; i++)
    s2.insert(i);
  for (int i = 0; i < h; i++) {
    s1.erase(H[i]);
  }
  for (int i = 0; i < v; i++) {
    s2.erase(V[i]);
  }
  int list1[s1.size()];
  int list2[s2.size()];
  int i = 0;
  for (auto it1 = s1.begin(); it1 != s1.end(); it1++) {
    list1[i++] = *it1;
  }
  i = 0;
  for (auto it2 = s2.begin(); it2 != s2.end(); it2++) {
    list2[i++] = *it2;
  }
  sort(list1, list1 + s1.size());
  sort(list2, list2 + s2.size());
  int maxH = 0, p1 = 0, maxV = 0, p2 = 0;
  for (int j = 0; j < s1.size(); j++) {
    maxH = max(maxH, list1[j] - p1);
    p1 = list1[j];
  }
  for (int j = 0; j < s2.size(); j++) {
    maxV = max(maxV, list2[j] - p2);
    p2 = list2[j];
  }
  cout << (maxV * maxH) << endl;
}
int main() {
  int N = 3, M = 3;
  int H[] = {2};
  int V[] = {2};
  int h = sizeof(H) / sizeof(H[0]);
  int v = sizeof(V) / sizeof(V[0]);
  largestArea(N, M, H, V, h, v);
  return 0;
}",Largest area possible after removal of a series of horizontal & vertical bars.
875,"Check if an array can be sorted by swapping pairs from indices consisting of unequal elements in another array | C ++ Program for above approach ; Function to check if array , A [ ] can be converted into sorted array by swapping ( A [ i ] , A [ j ] ) if B [ i ] not equal to B [ j ] ; Stores if array A [ ] is sorted in descending order or not ; Traverse the array A [ ] ; If A [ i ] is greater than A [ i + 1 ] ; Update flag ; If array is sorted in ascending order ; count = 2 : Check if 0 s and 1 s both present in the B [ ] ; Traverse the array ; If current element is 0 ; Update count ; Traverse the array B [ ] ; If current element is 1 ; If both 0 s and 1 s are present in the array ; Driver Code ; Input array A [ ] ; Input array B [ ] ; Function call ; If true , print YES ; Else print NO","#include <bits/stdc++.h>
using namespace std;
bool checkifSorted(int A[], int B[], int N) {
  bool flag = false;
  for (int i = 0; i < N - 1; i++) {
    if (A[i] > A[i + 1]) {
      flag = true;
      break;
    }
  }
  if (!flag) {
    return true;
  }
  int count = 0;
  for (int i = 0; i < N; i++) {
    if (B[i] == 0) {
      count++;
      break;
    }
  }
  for (int i = 0; i < N; i++) {
    if (B[i] == 1) {
      count++;
      break;
    }
  }
  if (count == 2) {
    return true;
  }
  return false;
}
int main() {
  int A[] = {3, 1, 2};
  int B[] = {0, 1, 1};
  int N = sizeof(A) / sizeof(A[0]);
  bool check = checkifSorted(A, B, N);
  if (check) {
    cout << ""YES"" << endl;
  } else {
    cout << ""NO"" << endl;
  }
  return 0;
}",Check if an array can be sorted by swapping pairs from indices consisting of unequal elements in another array.
876,Minimum swaps required between two strings to make one string strictly greater than the other | C ++ program for the above approach ; Function to find the minimum number of steps to make A > B ; If all character are same and M <= N ; If there lies any character in B which is greater than B [ 0 ] ; If there lies any character in A which is smaller than A [ 0 ] ; If there lies a character which is in A and greater than A [ 0 ] ; If there lies a character which is in B and less than B [ 0 ] ; Otherwise ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
int minSteps(string A, string B, int M, int N) {
  if (A[0] > B[0])
    return 0;
  if (B[0] > A[0]) {
    return 1;
  }
  if (M <= N && A[0] == B[0] && count(A.begin(), A.end(), A[0]) == M &&
      count(B.begin(), B.end(), B[0]) == N)
    return -1;
  for (int i = 1; i < N; i++) {
    if (B[i] > B[0])
      return 1;
  }
  for (int i = 1; i < M; i++) {
    if (A[i] < A[0])
      return 1;
  }
  for (int i = 1; i < M; i++) {
    if (A[i] > A[0]) {
      swap(A[i], B[0]);
      swap(A[0], B[0]);
      return 2;
    }
  }
  for (int i = 1; i < N; i++) {
    if (B[i] < B[0]) {
      swap(A[0], B[i]);
      swap(A[0], B[0]);
      return 2;
    }
  }
  return 0;
}
int main() {
  string A = ""adsfd"";
  string B = ""dffff"";
  int M = A.length();
  int N = B.length();
  cout << minSteps(A, B, M, N);
  return 0;
}",Minimum swaps required between two strings to make one string strictly greater than the other.
877,Count minimum number of moves to front or end to sort an array | C ++ algorithm of above approach ; Driver Code ; Function to find minimum number of operation required so that array becomes meaningful ; Initializing vector of pair type which contains value and index of arr ; Sorting array num on the basis of value ; Initializing variables used to find maximum length of increasing streak in index ; Updating streak ; Returning number of elements left except streak,"#include <bits/stdc++.h>
#include <vector>
using namespace std;
int main() {
  int arr[] = {4, 7, 2, 3, 9};
  int n = sizeof(arr) / sizeof(arr[0]);
  int count = minOperations(arr, n);
  cout << count;
}
int minOperations(int arr[], int n) {
  vector<pair<int, int>> vect;
  for (int i = 0; i < n; i++) {
    vect.push_back(make_pair(arr[i], i));
  }
  sort(vect.begin(), vect.end());
  int res = 1;
  int streak = 1;
  int prev = vect[0].second;
  for (int i = 1; i < n; i++) {
    if (prev < vect[i].second) {
      res++;
      streak = max(streak, res);
    } else
      res = 1;
    prev = vect[i].second;
  }
  return n - streak;
}",Count minimum number of moves to front or end to sort an array.
878,Maximize sum of pairwise products generated from the given Arrays | C ++ Program to implement the above approach ; Variables which represent the size of the array ; Stores the results ; Function to return the maximum possible sum ; Stores the count of arrays processed ; If more than two arrays have been processed ; If an already computed subproblem occurred ; Explore all the possible pairs ; Recursive function call ; Memoize the maximum ; Returning the value ; Function to return the maximum sum of products of pairs possible ; Initialising the dp array to - 1 ; Sort the arrays in descending order ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
#definemaxN201 int n1, n2, n3;
int dp[maxN][maxN][maxN];
int getMaxSum(int i, int j, int k, int arr1[], int arr2[], int arr3[]) {
  int cnt = 0;
  if (i >= n1)
    cnt++;
  if (j >= n2)
    cnt++;
  if (k >= n3)
    cnt++;
  if (cnt >= 2)
    return 0;
  if (dp[i][j][k] != -1)
    return dp[i][j][k];
  int ans = 0;
  if (i < n1 && j < n2)
    ans = max(ans,
              getMaxSum(i + 1, j + 1, k, arr1, arr2, arr3) + arr1[i] * arr2[j]);
  if (i < n1 && k < n3)
    ans = max(ans,
              getMaxSum(i + 1, j, k + 1, arr1, arr2, arr3) + arr1[i] * arr3[k]);
  if (j < n2 && k < n3)
    ans = max(ans,
              getMaxSum(i, j + 1, k + 1, arr1, arr2, arr3) + arr2[j] * arr3[k]);
  dp[i][j][k] = ans;
  return dp[i][j][k];
}
int maxProductSum(int arr1[], int arr2[], int arr3[]) {
  memset(dp, -1, sizeof(dp));
  sort(arr1, arr1 + n1);
  reverse(arr1, arr1 + n1);
  sort(arr2, arr2 + n2);
  reverse(arr2, arr2 + n2);
  sort(arr3, arr3 + n3);
  reverse(arr3, arr3 + n3);
  return getMaxSum(0, 0, 0, arr1, arr2, arr3);
}
int main() {
  n1 = 2;
  int arr1[] = {3, 5};
  n2 = 2;
  int arr2[] = {2, 1};
  n3 = 3;
  int arr3[] = {4, 3, 5};
  cout << maxProductSum(arr1, arr2, arr3);
  return 0;
}",Maximize sum of pairwise products generated from the given Arrays.
879,Largest lexicographic triplet from a given Array that forms a triangle | C ++ Program to implement the the above approach ; Function to find lexicographically largest triplet that forms a triangle in the given array ; Sort the array ; Iterate from the end of the array ; If the triplet forms a triangle ; If triplet found ; Print the triplet ; Otherwise ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
void findTriplet(int arr[], int N) {
  sort(arr, arr + N);
  int flag = 0, i;
  for (i = N - 1; i - 2 >= 0; i--) {
    if (arr[i - 2] + arr[i - 1] > arr[i]) {
      flag = 1;
      break;
    }
  }
  if (flag) {
    cout << arr[i - 2] << "" "" << arr[i - 1] << "" "" << arr[i] << endl;
  } else {
    cout << -1 << endl;
  }
}
int main() {
  int arr[] = {4, 2, 10, 3, 5};
  int N = sizeof(arr) / sizeof(arr[0]);
  findTriplet(arr, N);
  return 0;
}",Largest lexicographic triplet from a given Array that forms a triangle.
880,Count of all pairs in an Array with minimum absolute difference | C ++ program for the above approach ; Function to return the count of all pairs having minimal absolute difference ; Stores the count of pairs ; Sort the array ; Stores the minimum difference between adjacent pairs ; Update the minimum difference between pairs ; Increase count of pairs with difference equal to that of minimum difference ; Return the final count ; Driver Code ; Given array arr [ ] ; Function Call,"#include <bits/stdc++.h>
using namespace std;
int numberofpairs(int arr[], int N) {
  int answer = 0;
  sort(arr, arr + N);
  int minDiff = INT_MAX;
  for (int i = 0; i < N - 1; i++)
    minDiff = min(minDiff, arr[i + 1] - arr[i]);
  for (int i = 0; i < N - 1; i++) {
    if (arr[i + 1] - arr[i] == minDiff)
      answer++;
  }
  return answer;
}
int main() {
  int arr[] = {4, 2, 1, 3};
  int N = (sizeof arr) / (sizeof arr[0]);
  cout << numberofpairs(arr, N) << ""\n"";
  return 0;
}",Count of all pairs in an Array with minimum absolute difference.
881,Maximum size subset with given sum using Backtracking | C ++ Program to implement the above approach ; Initialise maximum possible length of subsequence ; Store elements to compare max_length with its size and change the value of max_length accordingly ; Store the elements of the longest subsequence ; Function to find the length of longest subsequence ; Update max_length ; Store the subsequence elements ; Recursively proceed with obtained sum ; poping elements from back of vector store ; if sum > 0 then we don 't  required thatsubsequence  so return and continue  with earlier elements ; Sort the given array ; Traverse the array ; If max_length is already greater than or equal than remaining length ; Driver code,"#include <bits/stdc++.h>
using namespace std;
int max_length = 0;
vector<int> store;
vector<int> ans;
void find_max_length(vector<int> &arr, int index, int sum, int k) {
  sum = sum + arr[index];
  store.push_back(arr[index]);
  if (sum == k) {
    if (max_length < store.size()) {
      max_length = store.size();
      ans = store;
    }
  }
  for (int i = index + 1; i < arr.size(); i++) {
    if (sum + arr[i] <= k) {
      find_max_length(arr, i, sum, k);
      store.pop_back();
    } else
      return;
  }
  return;
}
int longestSubsequence(vector<int> arr, int n, int k) {
  sort(arr.begin(), arr.end());
  for (int i = 0; i < n; i++) {
    if (max_length >= n - i)
      break;
    store.clear();
    find_max_length(arr, i, 0, k);
  }
  return max_length;
}
int main() {
  vector<int> arr{-3, 0, 1, 1, 2};
  int n = arr.size();
  int k = 1;
  cout << longestSubsequence(arr, n, k);
  return 0;
}",Maximum size subset with given sum using Backtracking.
882,Sort decreasing permutation of N using triple swaps | C ++ implementation to sort decreasing permutation of N using triple swaps ; Function to sort Array ; The three indices that has to be chosen ; Check if possible to sort array ; Swapping to bring element at required position Bringing at least one element at correct position ; Tracing changes in Array ; Print the sorted array ; If not possible to sort ; Driver code,"#include <bits/stdc++.h>
using namespace std;
void sortArray(int A[], int N) {
  int x, y, z;
  if (N % 4 == 0 N % 4 == 1) {
    for (int i = 0; i < N / 2; i++) {
      x = i;
      if (i % 2 == 0) {
        y = N - i - 2;
        z = N - i - 1;
      }
      A[z] = A[y];
      A[y] = A[x];
      A[x] = x + 1;
    }
    cout << ""Sorted Array: "";
    for (int i = 0; i < N; i++)
      cout << A[i] << "" "";
  } else
    cout << ""-1"";
}
int main() {
  int A[] = {5, 4, 3, 2, 1};
  int N = sizeof(A) / sizeof(A[0]);
  sortArray(A, N);
  return 0;
}",Sort decreasing permutation of N using triple swaps.
883,Find K such that changing all elements of the Array greater than K to K will make array sum N | C ++ implementation of the approach ; Function to return K such that changing all elements greater than K to K will make array sum N otherwise return - 1 ; Sorting the array in increasing order ; Loop through all the elements of the array ; Checking if sum of array equals N ; Driver code,"#include <bits/stdc++.h>
using namespace std;
int findK(int arr[], int size, int N) {
  sort(arr, arr + size);
  int temp_sum = 0;
  for (int i = 0; i < size; i++) {
    temp_sum += arr[i];
    if (N - temp_sum == arr[i] * (size - i - 1)) {
      return arr[i];
    }
  }
  return -1;
}
int main() {
  int arr[] = {3, 1, 10, 4, 8};
  int size = sizeof(arr) / sizeof(int);
  int N = 16;
  cout << findK(arr, size, N);
  return 0;
}",Find K such that changing all elements of the Array greater than K to K will make array sum N.
884,Find three element from given three arrays such that their sum is X | Set 2 | C ++ implementation of the approach ; Function that returns true if there exists a triplet with sum x ; Sorting arrays such that a [ ] represents smallest array ; Iterating the smallest array ; Two pointers on second and third array ; If a valid triplet is found ; Driver code,"#include <bits/stdc++.h>
using namespace std;
bool existsTriplet(int a[], int b[], int c[], int x, int l1, int l2, int l3) {
  if (l2 <= l1 and l2 <= l3)
    swap(l2, l1), swap(a, b);
  else if (l3 <= l1 and l3 <= l2)
    swap(l3, l1), swap(a, c);
  for (int i = 0; i < l1; i++) {
    int j = 0, k = l3 - 1;
    while (j < l2 and k >= 0) {
      if (a[i] + b[j] + c[k] == x)
        return true;
      if (a[i] + b[j] + c[k] < x)
        j++;
      else
        k--;
    }
  }
  return false;
}
int main() {
  int a[] = {2, 7, 8, 10, 15};
  int b[] = {1, 6, 7, 8};
  int c[] = {4, 5, 5};
  int l1 = sizeof(a) / sizeof(int);
  int l2 = sizeof(b) / sizeof(int);
  int l3 = sizeof(c) / sizeof(int);
  int x = 14;
  if (existsTriplet(a, b, c, x, l1, l2, l3))
    cout << ""Yes"";
  else
    cout << ""No"";
  return 0;
}",Find three element from given three arrays such that their sum is X.
885,"Arrange given numbers to form the smallest number | C ++ implementation of the approach ; Utility function to print the contents of an array ; A comparison function that return true if ' AB ' is smaller than ' BA ' when we concatenate two numbers ' A ' and ' B ' For example , it will return true if we pass 12 and 24 as arguments . This function will be used by sort ( ) function ; Convert first number to string format ; Convert second number to string format ; Check if ' AB ' is smaller or ' BA ' and return bool value since comparison operator ' < = ' returns true or false ; Function to print the arrangement with the smallest value ; If we pass the name of the comparison function it will sort the array according to the compare function ; Print the sorted array ; Driver code","#include <algorithm>
#include <iostream>
using namespace std;
void printArr(int arr[], int n) {
  for (int i = 0; i < n; i++)
    cout << arr[i];
}
bool compare(int num1, int num2) {
  string A = to_string(num1);
  string B = to_string(num2);
  return (A + B) <= (B + A);
}
void printSmallest(int N, int arr[]) {
  sort(arr, arr + N, compare);
  printArr(arr, N);
}
int main() {
  int arr[] = {5, 6, 2, 9, 21, 1};
  int N = sizeof(arr) / sizeof(arr[0]);
  printSmallest(N, arr);
  return 0;
}",Arrange given numbers to form the smallest number.
886,Stable Selection Sort | C ++ program for modifying Selection Sort so that it becomes stable . ; Iterate through array elements ; Find minimum element from arr [ i ] to arr [ n - 1 ] . ; Move minimum element at current i . ; Driver code,"#include <iostream>
using namespace std;
void stableSelectionSort(int a[], int n) {
  for (int i = 0; i < n - 1; i++) {
    int min = i;
    for (int j = i + 1; j < n; j++)
      if (a[min] > a[j])
        min = j;
    int key = a[min];
    while (min > i) {
      a[min] = a[min - 1];
      min--;
    }
    a[i] = key;
  }
}
void printArray(int a[], int n) {
  for (int i = 0; i < n; i++)
    cout << a[i] << "" "";
  cout << endl;
}
int main() {
  int a[] = {4, 5, 3, 2, 4, 1};
  int n = sizeof(a) / sizeof(a[0]);
  stableSelectionSort(a, n);
  printArray(a, n);
  return 0;
}",Stable Selection Sort.
887,Permute two arrays such that sum of every pair is greater or equal to K | C ++ program to check whether permutation of two arrays satisfy the condition a [ i ] + b [ i ] >= k . ; Check whether any permutation exists which satisfy the condition . ; Sort the array a [ ] in decreasing order . ; Sort the array b [ ] in increasing order . ; Checking condition on each index . ; Driven Program,"#include <bits/stdc++.h>
using namespace std;
bool isPossible(int a[], int b[], int n, int k) {
  sort(a, a + n);
  sort(b, b + n, greater<int>());
  for (int i = 0; i < n; i++)
    if (a[i] + b[i] < k)
      return false;
  return true;
}
int main() {
  int a[] = {2, 1, 3};
  int b[] = {7, 8, 9};
  int k = 10;
  int n = sizeof(a) / sizeof(a[0]);
  isPossible(a, b, n, k) ? cout << ""Yes"" : cout << ""No"";
  return 0;
}",Permute two arrays such that sum of every pair is greater or equal to K.
888,Sort an array according to count of set bits | C ++ program to implement simple approach to sort an array according to count of set bits . ; Function to count setbits ; Function to sort By SetBitCount ; Iterate over all values and insert into multimap ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
int setBitCount(int num) {
  int count = 0;
  while (num) {
    if (num & 1)
      count++;
    num >>= 1;
  }
  return count;
}
void sortBySetBitCount(int arr[], int n) {
  multimap<int, int> count;
  for (int i = 0; i < n; ++i) {
    count.insert({(-1) * setBitCount(arr[i]), arr[i]});
  }
  for (auto i : count)
    cout << i.second << "" "";
  cout << ""\n"";
}
int main() {
  int arr[] = {1, 2, 3, 4, 5, 6};
  int n = sizeof(arr) / sizeof(arr[0]);
  sortBySetBitCount(arr, n);
}",Sort an array according to count of set bits.
889,"Check if end of given Binary string can be reached by choosing jump value in between given range | C ++ program for the above approach ; Function to check if it is possible to reach the end of the binary string using the given jumps ; Stores the DP states ; Initial state ; Stores count of indices from which it is possible to reach index i ; Traverse the given string ; Update the values of pre accordingly ; If the jump size is out of the range [ L , R ] ; Return answer ; Driver Code","#include <bits/stdc++.h>
using namespace std;
bool canReach(string s, int L, int R) {
  vector<int> dp(s.length());
  dp[0] = 1;
  int pre = 0;
  for (int i = 1; i < s.length(); i++) {
    if (i >= L) {
      pre += dp[i - L];
    }
    if (i > R) {
      pre -= dp[i - R - 1];
    }
    dp[i] = (pre > 0) and (s[i] == '0');
  }
  return dp[s.length() - 1];
}
int main() {
  string S = ""01101110"";
  int L = 2, R = 3;
  cout << (canReach(S, L, R) ? ""Yes"" : ""No"");
  return 0;
}",Check if end of given Binary string can be reached by choosing jump value in between given range.
890,Split an array into subarrays with maximum Bitwise XOR of their respective Bitwise OR values | C ++ program for the above approach ; Recursive function to find all the possible breaking of arrays into subarrays and find the maximum Bitwise XOR ; If the value of N is 0 ; Stores the result if the new group is formed with the first element as arr [ i ] ; Stores if the result if the arr [ i ] is included in the last group ; Returns the maximum of x and y ; Function to find the maximum possible Bitwise XOR of all possible values of the array after breaking the arrays into subarrays ; Return the result ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
int maxXORUtil(int arr[], int N, int xrr, int orr) {
  if (N == 0)
    return xrr ^ orr;
  int x = maxXORUtil(arr, N - 1, xrr ^ orr, arr[N - 1]);
  int y = maxXORUtil(arr, N - 1, xrr, orr arr[N - 1]);
  return max(x, y);
}
int maximumXOR(int arr[], int N) { return maxXORUtil(arr, N, 0, 0); }
int main() {
  int arr[] = {1, 5, 7};
  int N = sizeof(arr) / sizeof(arr[0]);
  cout << maximumXOR(arr, N);
  return 0;
}",Split an array into subarrays with maximum Bitwise XOR of their respective Bitwise OR values.
891,"Construct an N | C ++ program to implement the above approach ; Keep track of visited nodes ; Function to construct a tree such that there are no two adjacent nodes with the same weight ; If minimum and maximum elements are equal , i . e . array contains one distinct element ; Tree cannot be constructed ; Otherwise ; Tree can be constructed ; Choose weights [ 0 ] as root ; First Node is visited ; Traverse the array ; Otherwise , make an edge ; Mark this node as visited ; Find a weight not same as the root & make edges with that node ; Join non - roots with remaining nodes ; Check if current node ' s ▁ weight ▁ ▁ is ▁ same ▁ as ▁ root ▁ node ' s weight and if it is not visited or not ; Driver Code ; Function Call","#include <bits/stdc++.h>
using namespace std;
const int N = 1e5 + 5;
int visited[N];
void construct_tree(int weights[], int n) {
  int minimum = *min_element(weights, weights + n);
  int maximum = *max_element(weights, weights + n);
  if (minimum == maximum) {
    cout << ""No"";
    return;
  } else {
    cout << ""Yes"" << endl;
  }
  int root = weights[0];
  visited[1] = 1;
  for (int i = 0; i < n; i++) {
    if (weights[i] != root && visited[i + 1] == 0) {
      cout << 1 << "" "" << i + 1 << "" "" << endl;
      visited[i + 1] = 1;
    }
  }
  int notroot = 0;
  for (int i = 0; i < n; i++) {
    if (weights[i] != root) {
      notroot = i + 1;
      break;
    }
  }
  for (int i = 0; i < n; i++) {
    if (weights[i] == root && visited[i + 1] == 0) {
      cout << notroot << "" "" << i + 1 << endl;
      visited[i + 1] = 1;
    }
  }
}
int main() {
  int weights[] = {1, 2, 1, 2, 5};
  int N = sizeof(weights) / sizeof(weights[0]);
  construct_tree(weights, N);
}",Construct an N.
892,Minimize cost to convert given string into concatenation of equal substrings of length K | C ++ program for the above approach ; Function to find minimum cost to convert given String into String of K length same subString ; Stores length of String ; Stores the minimum cost ; Traverse left subString of k length ; Stores the frequency ; Stores minimum cost for sequence of S [ i ] % k indices ; Check for optimal character ; Find sum of distance ' a ' + ch from character S [ i ] % k indices ; Choose minimum cost for each index i ; Increment ans ; Print minimum cost to convert String ; Driver Code ; Given String S ; Function Call,"#include <bits/stdc++.h>
using namespace std;
void minCost(string s, int k) {
  int n = s.size();
  int ans = 0;
  for (int i = 0; i < k; i++) {
    int a[26];
    for (int p = 0; p < 26; p++) {
      a[p] = 0;
    }
    for (int j = i; j < n; j += k) {
      a[s[j] - 'a']++;
    }
    int min_cost = INT_MAX;
    for (int ch = 0; ch < 26; ch++) {
      int cost = 0;
      for (int tr = 0; tr < 26; tr++)
        cost += abs(ch - tr) * a[tr];
      min_cost = min(min_cost, cost);
    }
    ans += min_cost;
  }
  cout << (ans);
}
int main() {
  string S = ""abcdefabc"";
  int K = 3;
  minCost(S, K);
}",Minimize cost to convert given string into concatenation of equal substrings of length K.
893,Split first N natural numbers into two sets with minimum absolute difference of their sums | C ++ program to implement the above approach ; Function to split the first N natural numbers into two sets having minimum absolute difference of their sums ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
int minAbsDiff(int N) {
  if (N % 4 == 0 N % 4 == 3) {
    return 0;
  }
  return 1;
}
int main() {
  int N = 6;
  cout << minAbsDiff(N);
}",Split first N natural numbers into two sets with minimum absolute difference of their sums.
894,Find maximum matching in a given Binary Tree | C ++ program for the above approach ; Adjacency list to store edges ; Add an edge between U and V in tree ; Edge from u to v ; Edge from V to U ; Function that finds the maximum matching of the DFS ; Go further as we are not allowed to go towards its parent ; If U and its parent P is not taken then we must take & mark them as taken ; Increment size of edge set ; Function to find the maximum matching in a graph ; Taking 1 as a root of the tree ; Print maximum Matching ; Driver Code ; Joining edge between two nodes in tree ; Function Call,"#include <bits/stdc++.h>
using namespace std;
#defineN10000 vector < int> adj[N];
int used[N];
int max_matching;
void AddEdge(int u, int v) {
  adj[u].push_back(v);
  adj[v].push_back(u);
}
void Matching_dfs(int u, int p) {
  for (int i = 0; i < adj[u].size(); i++) {
    if (adj[u][i] != p) {
      Matching_dfs(adj[u][i], u);
    }
  }
  if (!used[u] and !used[p] and p != 0) {
    max_matching++;
    used[u] = used[p] = 1;
  }
}
void maxMatching() {
  Matching_dfs(1, 0);
  cout << max_matching << ""\n"";
}
int main() {
  int n = 5;
  AddEdge(1, 2);
  AddEdge(1, 3);
  AddEdge(3, 4);
  AddEdge(3, 5);
  maxMatching();
  return 0;
}",Find maximum matching in a given Binary Tree.
895,Minimize cost to Swap two given Arrays | C ++ program to implement the above approach ; Function to calculate and return the minimum cost required to swap two arrays ; Return the total minimum cost ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
int getMinCost(vector<int> A, vector<int> B, int N) {
  int mini = INT_MAX;
  for (int i = 0; i < N; i++) {
    mini = min(mini, min(A[i], B[i]));
  }
  return mini * (2 * N - 1);
}
int main() {
  int N = 3;
  vector<int> A = {1, 4, 2};
  vector<int> B = {10, 6, 12};
  cout << getMinCost(A, B, N);
  return 0;
}",Minimize cost to Swap two given Arrays.
896,Print all possible ways to write N as sum of two or more positive integers | C ++ program for the above approach ; Function to print the values stored in vector arr ; Traverse the vector arr ; Recursive function to print different ways in which N can be written as a sum of at 2 or more positive integers ; If n is zero then print this ways of breaking numbers ; Start from previous element in the representation till n ; Include current element from representation ; Call function again with reduced sum ; Backtrack to remove current element from representation ; Driver Code ; Given sum N ; To store the representation of breaking N ; Function Call,"#include <bits/stdc++.h>
using namespace std;
void printVector(vector<int> &arr) {
  if (arr.size() != 1) {
    for (int i = 0; i < arr.size(); i++) {
      cout << arr[i] << "" "";
    }
    cout << endl;
  }
}
void findWays(vector<int> &arr, int i, int n) {
  if (n == 0)
    printVector(arr);
  for (int j = i; j <= n; j++) {
    arr.push_back(j);
    findWays(arr, j, n - j);
    arr.pop_back();
  }
}
int main() {
  int n = 4;
  vector<int> arr;
  findWays(arr, 1, n);
  return 0;
}",Print all possible ways to write N as sum of two or more positive integers.
897,Maximize count of Decreasing Subsequences from the given Array | C ++ Program to implement the above approach ; Function to count maximum subsequence ; Stores the frequency of array elements ; Stores max frequency ; Update frequency of A [ i ] ; Update max subsequence ; Print the count ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
void Maximum_subsequence(int A[], int N) {
  unordered_map<int, int> frequency;
  int max_freq = 0;
  for (int i = 0; i < N; i++) {
    frequency[A[i]]++;
  }
  for (auto it : frequency) {
    if (it.second > max_freq) {
      max_freq = it.second;
    }
  }
  cout << max_freq << endl;
}
int main() {
  int arr[] = {5, 2, 6, 5, 2, 4, 5, 2};
  int N = sizeof(arr) / sizeof(arr[0]);
  Maximum_subsequence(arr, N);
  return 0;
}",Maximize count of Decreasing Subsequences from the given Array.
898,Check if a string can be split into two strings with same number of K | C ++ implementation of the above approach ; Function to print the arrangement of characters ; Stores frequency of characters ; Count the character having frequency K ; Count the character having frequency greater than K and not equal to 2 K ; Case 1 ; Case 2 ; Case 3 ; If all cases fail ; Driver Code,"#include <bits/stdc++.h>
using namespace std;
void DivideString(string s, int n, int k) {
  int i, c = 0, no = 1;
  int c1 = 0, c2 = 0;
  int fr[26] = {0};
  string ans = """";
  for (i = 0; i < n; i++) {
    fr[s[i] - 'a']++;
  }
  char ch, ch1;
  for (i = 0; i < 26; i++) {
    if (fr[i] == k) {
      c++;
    }
    if (fr[i] > k && fr[i] != 2 * k) {
      c1++;
      ch = i + 'a';
    }
    if (fr[i] == 2 * k) {
      c2++;
      ch1 = i + 'a';
    }
  }
  for (i = 0; i < n; i++)
    ans = ans + ""1"";
  map<char, int> mp;
  if (c % 2 == 0 c1 > 0 c2 > 0) {
    for (i = 0; i < n; i++) {
      if (fr[s[i] - 'a'] == k) {
        if (mp.find(s[i]) != mp.end()) {
          ans[i] = '2';
        } else {
          if (no <= (c / 2)) {
            ans[i] = '2';
            no++;
            mp[s[i]] = 1;
          }
        }
      }
    }
    if (c % 2 == 1 && c1 > 0) {
      no = 1;
      for (i = 0; i < n; i++) {
        if (s[i] == ch && no <= k) {
          ans[i] = '2';
          no++;
        }
      }
    }
    if (c % 2 == 1 && c1 == 0) {
      no = 1;
      int flag = 0;
      for (int i = 0; i < n; i++) {
        if (s[i] == ch1 && no <= k) {
          ans[i] = '2';
          no++;
        }
        if (fr[s[i] - 'a'] == k && flag == 0 && ans[i] == '1') {
          ans[i] = '2';
          flag = 1;
        }
      }
    }
    cout << ans << endl;
  } else {
    cout << ""NO"" << endl;
  }
}
int main() {
  string S = ""abbbccc"";
  int N = S.size();
  int K = 1;
  DivideString(S, N, K);
  return 0;
}",Check if a string can be split into two strings with same number of K.
899,Check if two items can be selected from two different categories without exceeding price | C ++ implementation to check if two items can be selected from two different categories without exceeding the total price ; Function to check if two items can be selected from two different categories without exceeding the total price ; Loop to choose two different pairs using two nested loops ; Condition to check if the price of these two elements is less than S ; Driver Code ; Function Call,"#include <bits/stdc++.h>
using namespace std;
string check(int S, int prices[], int type[], int n) {
  for (int j = 0; j < n; j++) {
    for (int k = j + 1; k < n; k++) {
      if ((type[j] == 0 && type[k] == 1) || (type[j] == 1 && type[k] == 0)) {
        if (prices[j] + prices[k] <= S) {
          return ""Yes"";
        }
      }
    }
  }
  return ""No"";
}
int main() {
  int prices[] = {3, 8, 6, 5};
  int type[] = {0, 1, 1, 0};
  int S = 10;
  int n = 4;
  cout << check(S, prices, type, n);
  return 0;
}",Check if two items can be selected from two different categories without exceeding price.
900,Find the maximum sum ( a + b ) for a given input integer N satisfying the given condition | C ++ implementation to find the largest value of a + b satisfying the given condition ; Function to return the maximum sum of a + b satisfying the given condition ; Consider all possible pairs and check the sum divides product property ; To find the largest factor k ; Check if the product is divisible by the sum ; Storing the maximum sum in the max_sum variable ; Return the max_sum value ; Driver code,"#include <bits/stdc++.h>
using namespace std;
int getLargestSum(int N) {
  for (int i = 1; i * i <= N; i++) {
    for (int j = i + 1; j * j <= N; j++) {
      int k = N / j;
      int a = k * i;
      int b = k * j;
      if (a <= N && b <= N && a * b % (a + b) == 0)
        max_sum = max(max_sum, a + b);
    }
  }
  return max_sum;
}
int main() {
  int N = 25;
  int max_sum = getLargestSum(N);
  cout << max_sum << endl;
  return 0;
}",Find the maximum sum ( a + b ) for a given input integer N satisfying the given condition.
901,Encrypt a string by repeating i | C ++ implementation of the approach ; Function to return the encrypted string ; Number of times the current character will be repeated ; Repeat the current character in the encrypted string ; Driver code,"#include <bits/stdc++.h>
using namespace std;
string encryptString(string str, int n) {
  int i = 0, cnt = 0;
  string encryptedStr = """";
  while (i < n) {
    cnt = i + 1;
    while (cnt--)
      encryptedStr += str[i];
    i++;
  }
  return encryptedStr;
}
int main() {
  string str = ""geeks"";
  int n = str.length();
  cout << encryptString(str, n);
  return 0;
}",Encrypt a string by repeating i.
902,Minimize the difference between the maximum and minimum values of the modified array | C ++ program to find the minimum difference . ; Function to return required minimum difference ; finding minimum and maximum values ; returning minimum possible difference ; Driver program ; function to return the answer,"#include <bits/stdc++.h>
using namespace std;
int minDiff(int n, int x, int A[]) {
  int mn = A[0], mx = A[0];
  for (int i = 0; i < n; ++i) {
    mn = min(mn, A[i]);
    mx = max(mx, A[i]);
  }
  return max(0, mx - mn - 2 * x);
}
int main() {
  int n = 3, x = 3;
  int A[] = {1, 3, 6};
  cout << minDiff(n, x, A);
  return 0;
}",Minimize the difference between the maximum and minimum values of the modified array.
903,Minimum Swaps for Bracket Balancing | C ++ program to count swaps required to balance string ; Stores total number of Left and Right brackets encountered ; swap stores the number of swaps required imbalance maintains the number of imbalance pair ; Increment count of Left bracket ; swaps count is last swap count + total number imbalanced brackets ; imbalance decremented by 1 as it solved only one imbalance of Left and Right ; Increment count of Right bracket ; imbalance is reset to current difference between Left and Right brackets ; Driver code,"#include <bits/stdc++.h>
using namespace std;
long swapCount(string chars) {
  int countLeft = 0, countRight = 0;
  int swap = 0, imbalance = 0;
  for (int i = 0; i < chars.length(); i++) {
    if (chars[i] == '[') {
      countLeft++;
      if (imbalance > 0) {
        swap += imbalance;
        imbalance--;
      }
    } else if (chars[i] == ']') {
      countRight++;
      imbalance = (countRight - countLeft);
    }
  }
  return swap;
}
int main() {
  string s = ""[]][]["";
  cout << swapCount(s) << endl;
  s = ""[[][]]"";
  cout << swapCount(s) << endl;
  return 0;
}",Minimum Swaps for Bracket Balancing.
904,"Longest subsequence from an array of pairs having first element increasing and second element decreasing . | C ++ program for the above approach ; Function to find the length of the longest subsequence of pairs whose first element is increasing and second is decreasing ; dp [ i ] : Stores the longest subsequence upto i ; Base case ; When the conditions hold ; Finally , print the required answer ; Driver Code ; Given Input ; Function Call","#include <bits/stdc++.h>
using namespace std;
void longestSubSequence(pair<int, int> A[], int N) {
  int dp[N];
  for (int i = 0; i < N; i++) {
    dp[i] = 1;
    for (int j = 0; j < i; j++) {
      if (A[j].first < A[i].first && A[j].second > A[i].second) {
        dp[i] = max(dp[i], dp[j] + 1);
      }
    }
  }
  cout << dp[N - 1] << endl;
}
int main() {
  pair<int, int> A[] = {{1, 2}, {2, 2}, {3, 1}};
  int N = sizeof(A) / sizeof(A[0]);
  longestSubSequence(A, N);
  return 0;
}",Longest subsequence from an array of pairs having first element increasing and second element decreasing ..
905,Count ways to obtain given sum by repeated throws of a dice | C ++ Program for the above approach ; Function to calculate the total number of ways to have sum N ; Base Case ; Return already stored result ; Recur for all 6 states ; Return the result ; Driver Code ; Given sum N ; Initialize the dp array ; Function Call,"#include <bits/stdc++.h>
using namespace std;
int findWays(int N, int dp[]) {
  if (N == 0) {
    return 1;
  }
  if (dp[N] != -1) {
    return dp[N];
  }
  int cnt = 0;
  for (int i = 1; i <= 6; i++) {
    if (N - i >= 0) {
      cnt = cnt + findWays(N - i, dp);
    }
  }
  return dp[N] = cnt;
}
int main() {
  int N = 4;
  int dp[N + 1];
  memset(dp, -1, sizeof(dp));
  cout << findWays(N, dp);
  return 0;
}",Count ways to obtain given sum by repeated throws of a dice.
906,Count ways to obtain given sum by repeated throws of a dice | C ++ Program for the above approach ; Function to calculate the total number of ways to have sum N ; Initialize dp array ; Iterate over all the possible intermediate values to reach N ; Calculate the sum for all 6 faces ; Print the total number of ways ; Driver Code ; Given sum N ; Function call,"#include <bits/stdc++.h>
using namespace std;
void findWays(int N) {
  int dp[N + 1];
  dp[0] = 1;
  for (int i = 1; i <= N; i++) {
    dp[i] = 0;
    for (int j = 1; j <= 6; j++) {
      if (i - j >= 0) {
        dp[i] = dp[i] + dp[i - j];
      }
    }
  }
  cout << dp[N];
}
int main() {
  int N = 4;
  findWays(N);
  return 0;
}",Count ways to obtain given sum by repeated throws of a dice.
907,"Split the string into minimum parts such that each part is in the another string | C ++ implementation to split the string into minimum number of parts such that each part is also present in the another string ; Node of Trie ; Function to insert a node in the Trie Data Structure ; Inserting every character from idx till end to string into trie ; if there is no edge corresponding to the ith character , then make a new node ; Function to find the minimum number of parts such that each part is present into another string ; Making a new trie ; Inserting every substring of S2 in trie ; Creating dp array and init it with infinity ; Base Case ; Starting the cut from ith character taking temporary node pointer for checking whether the substring [ i , j ) is present in trie of not ; if the jth character is not in trie we 'll break ; Updating the the ending of jth character with dp [ i ] + 1 ; Descending the trie pointer ; Answer not possible ; Driver Code","#include <bits/stdc++.h>
using namespace std;
const int INF = 1e9 + 9;
struct TrieNode {
  TrieNode *child[26] = {NULL};
};
void insert(int idx, string &s, TrieNode *root) {
  TrieNode *temp = root;
  for (int i = idx; i < s.length(); i++) {
    if (temp->child[s[i] - 'a'] == NULL)
      temp->child[s[i] - 'a'] = new TrieNode;
    temp = temp->child[s[i] - 'a'];
  }
}
int minCuts(string S1, string S2) {
  int n1 = S1.length();
  int n2 = S2.length();
  TrieNode *root = new TrieNode;
  for (int i = 0; i < n2; i++) {
    insert(i, S2, root);
  }
  vector<int> dp(n1 + 1, INF);
  dp[0] = 0;
  for (int i = 0; i < n1; i++) {
    TrieNode *temp = root;
    for (int j = i + 1; j <= n1; j++) {
      if (temp->child[S1[j - 1] - 'a'] == NULL)
        break;
      dp[j] = min(dp[j], dp[i] + 1);
      temp = temp->child[S1[j - 1] - 'a'];
    }
  }
  if (dp[n1] >= INF)
    return -1;
  else
    return dp[n1];
}
int main() {
  string S1 = ""abcdab"";
  string S2 = ""dabc"";
  cout << minCuts(S1, S2);
}",Split the string into minimum parts such that each part is in the another string.
908,Largest Square in a Binary Matrix with at most K 1 s for multiple Queries | C ++ implementation to find the largest square in the matrix such that it contains atmost K 1 's ; Function to find the largest square in the matrix such that it contains atmost K 1 's ; Precomputation of the countDP prefix sum of the matrix ; Loop to solve each query ; Binary Search to the side which have atmost in K 1 's in square ; Count total number of 1 s in the sub square considered ; If the count is less than or equals to the maximum move to right half ; Driver code,"#include <bits/stdc++.h>
using namespace std;
const int MAX = 100;
void largestSquare(int matrix[][MAX], int R, int C, int q_i[], int q_j[], int K,
                   int Q) {
  int countDP[R][C];
  memset(countDP, 0, sizeof(countDP));
  countDP[0][0] = matrix[0][0];
  for (int i = 1; i < R; i++)
    countDP[i][0] = countDP[i - 1][0] + matrix[i][0];
  for (int j = 1; j < C; j++)
    countDP[0][j] = countDP[0][j - 1] + matrix[0][j];
  for (int i = 1; i < R; i++)
    for (int j = 1; j < C; j++)
      countDP[i][j] = matrix[i][j] + countDP[i - 1][j] + countDP[i][j - 1] -
                      countDP[i - 1][j - 1];
  for (int q = 0; q < Q; q++) {
    int i = q_i[q];
    int j = q_j[q];
    int min_dist = min(min(i, j), min(R - i - 1, C - j - 1));
    int ans = -1, l = 0, u = min_dist;
    while (l <= u) {
      int mid = (l + u) / 2;
      int x1 = i - mid, x2 = i + mid;
      int y1 = j - mid, y2 = j + mid;
      int count = countDP[x2][y2];
      if (x1 > 0)
        count -= countDP[x1 - 1][y2];
      if (y1 > 0)
        count -= countDP[x2][y1 - 1];
      if (x1 > 0 && y1 > 0)
        count += countDP[x1 - 1][y1 - 1];
      if (count <= K) {
        ans = 2 * mid + 1;
        l = mid + 1;
      } else
        u = mid - 1;
    }
    cout << ans << ""\n"";
  }
}
int main() {
  int matrix[][MAX] = {
      {1, 0, 1, 0, 0}, {1, 0, 1, 1, 1}, {1, 1, 1, 1, 1}, {1, 0, 0, 1, 0}};
  int K = 9, Q = 1;
  int q_i[] = {1};
  int q_j[] = {2};
  largestSquare(matrix, 4, 5, q_i, q_j, K, Q);
  return 0;
}",Largest Square in a Binary Matrix with at most K 1 s for multiple Queries.
